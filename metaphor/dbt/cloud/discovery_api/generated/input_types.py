# Generated by ariadne-codegen
# Source: schema.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccessLevel,
    AppliedModelSortField,
    FreshnessStatus,
    ResourceNodeType,
    RunStatus,
    SortDirection,
    TestType,
)


class AppliedModelSort(BaseModel):
    direction: SortDirection
    field: AppliedModelSortField


class AppliedResourcesFilter(BaseModel):
    tags: Optional[List[str]] = None
    types: List[ResourceNodeType]
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class DefinitionResourcesFilter(BaseModel):
    tags: Optional[List[str]] = None
    types: List[ResourceNodeType]
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class ExposureFilter(BaseModel):
    exposure_type: Optional[str] = Field(alias="exposureType", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class GenericMaterializedFilter(BaseModel):
    database: Optional[str] = None
    identifier: Optional[str] = None
    schema_: Optional[str] = Field(alias="schema", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class GroupFilter(BaseModel):
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class LineageFilter(BaseModel):
    column_names: Optional[List[str]] = Field(alias="columnNames", default=None)
    exclude: Optional[str] = None
    select: Optional[str] = None
    tags: Optional[List[str]] = None
    types: Optional[List[ResourceNodeType]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class MacroDefinitionFilter(BaseModel):
    package_name: Optional[str] = Field(alias="packageName", default=None)
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class ModelAppliedFilter(BaseModel):
    access: Optional[AccessLevel] = None
    database: Optional[str] = None
    group: Optional[str] = None
    identifier: Optional[str] = None
    last_run_status: Optional[RunStatus] = Field(alias="lastRunStatus", default=None)
    modeling_layer: Optional[str] = Field(alias="modelingLayer", default=None)
    package_name: Optional[str] = Field(alias="packageName", default=None)
    schema_: Optional[str] = Field(alias="schema", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class ModelDefinitionFilter(BaseModel):
    access: Optional[AccessLevel] = None
    database: Optional[str] = None
    group: Optional[str] = None
    identifier: Optional[str] = None
    modeling_layer: Optional[str] = Field(alias="modelingLayer", default=None)
    schema_: Optional[str] = Field(alias="schema", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class SourceAppliedFilter(BaseModel):
    database: Optional[str] = None
    freshness_checked: Optional[bool] = Field(alias="freshnessChecked", default=None)
    freshness_status: Optional[FreshnessStatus] = Field(
        alias="freshnessStatus", default=None
    )
    identifier: Optional[str] = None
    schema_: Optional[str] = Field(alias="schema", default=None)
    source_names: Optional[List[str]] = Field(alias="sourceNames", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class SourceDefinitionFilter(BaseModel):
    database: Optional[str] = None
    identifier: Optional[str] = None
    schema_: Optional[str] = Field(alias="schema", default=None)
    source_names: Optional[List[str]] = Field(alias="sourceNames", default=None)
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class TestAppliedFilter(BaseModel):
    status: Optional[str] = None
    tags: Optional[List[str]] = None
    test_types: Optional[List[TestType]] = Field(alias="testTypes", default=None)
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)


class TestDefinitionFilter(BaseModel):
    tags: Optional[List[str]] = None
    unique_ids: Optional[List[str]] = Field(alias="uniqueIds", default=None)
