# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class GetLineage(BaseModel):
    environment: "GetLineageEnvironment"


class GetLineageEnvironment(BaseModel):
    applied: Optional["GetLineageEnvironmentApplied"]


class GetLineageEnvironmentApplied(BaseModel):
    lineage: List[
        Annotated[
            Union[
                "GetLineageEnvironmentAppliedLineageLineageNode",
                "GetLineageEnvironmentAppliedLineageMacroLineageNode",
                "GetLineageEnvironmentAppliedLineageMetricLineageNode",
                "GetLineageEnvironmentAppliedLineageModelLineageNode",
                "GetLineageEnvironmentAppliedLineageSemanticModelLineageNode",
                "GetLineageEnvironmentAppliedLineageSnapshotLineageNode",
                "GetLineageEnvironmentAppliedLineageTestLineageNode",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class GetLineageEnvironmentAppliedLineageLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    typename__: Literal[
        "ExposureLineageNode",
        "LineageNode",
        "SavedQueryLineageNode",
        "SeedLineageNode",
        "SourceLineageNode",
    ] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageMacroLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["MacroLineageNode"] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageMetricLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["MetricLineageNode"] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageModelLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["ModelLineageNode"] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageSemanticModelLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["SemanticModelLineageNode"] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageSnapshotLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["SnapshotLineageNode"] = Field(alias="__typename")


class GetLineageEnvironmentAppliedLineageTestLineageNode(BaseModel):
    unique_id: str = Field(alias="uniqueId")
    parent_ids: List[str] = Field(alias="parentIds")
    typename__: Literal["TestLineageNode"] = Field(alias="__typename")


GetLineage.model_rebuild()
GetLineageEnvironment.model_rebuild()
GetLineageEnvironmentApplied.model_rebuild()
