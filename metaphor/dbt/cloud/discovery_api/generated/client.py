# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .get_environment_adapter_type import GetEnvironmentAdapterType
from .get_job_run_macros import GetJobRunMacros
from .get_job_run_metrics import GetJobRunMetrics
from .get_job_run_models import GetJobRunModels
from .get_job_run_snapshots import GetJobRunSnapshots
from .get_job_run_sources import GetJobRunSources
from .get_job_run_tests import GetJobRunTests
from .get_macro_arguments import GetMacroArguments
from .input_types import MacroDefinitionFilter


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_job_run_models(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunModels:
        query = gql(
            """
            query GetJobRunModels($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                models {
                  alias
                  columns {
                    comment
                    description
                    meta
                    name
                    tags
                    type
                  }
                  compiledCode
                  compiledSql
                  database
                  dependsOn
                  description
                  environmentId
                  materializedType
                  meta
                  name
                  packageName
                  rawCode
                  rawSql
                  runResults {
                    status
                    executeCompletedAt
                  }
                  schema
                  tags
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query, operation_name="GetJobRunModels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobRunModels.model_validate(data)

    def get_job_run_snapshots(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunSnapshots:
        query = gql(
            """
            query GetJobRunSnapshots($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                snapshots {
                  alias
                  columns {
                    comment
                    description
                    index
                    meta
                    name
                    tags
                    type
                  }
                  comment
                  compiledCode
                  compiledSql
                  database
                  description
                  environmentId
                  meta
                  name
                  owner
                  packageName
                  rawCode
                  rawSql
                  schema
                  tags
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query,
            operation_name="GetJobRunSnapshots",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetJobRunSnapshots.model_validate(data)

    def get_job_run_macros(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunMacros:
        query = gql(
            """
            query GetJobRunMacros($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                macros {
                  dependsOn
                  description
                  environmentId
                  macroSql
                  meta
                  name
                  packageName
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query, operation_name="GetJobRunMacros", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobRunMacros.model_validate(data)

    def get_job_run_sources(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunSources:
        query = gql(
            """
            query GetJobRunSources($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                sources {
                  columns {
                    description
                    name
                  }
                  database
                  description
                  identifier
                  schema
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query,
            operation_name="GetJobRunSources",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetJobRunSources.model_validate(data)

    def get_job_run_metrics(
        self,
        job_id: Any,
        run_id: Union[Optional[Any], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetJobRunMetrics:
        query = gql(
            """
            query GetJobRunMetrics($jobId: BigInt!, $runId: BigInt) {
              job(id: $jobId, runId: $runId) {
                metrics {
                  packageName
                  label
                  description
                  dependsOn
                  uniqueId
                  timeGrains
                  timestamp
                  dimensions
                  filters {
                    field
                    operator
                    value
                  }
                  tags
                  type
                  sql
                  expression
                  calculation_method
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query,
            operation_name="GetJobRunMetrics",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetJobRunMetrics.model_validate(data)

    def get_job_run_tests(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunTests:
        query = gql(
            """
            query GetJobRunTests($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                tests {
                  columnName
                  compiledSql
                  compiledCode
                  dependsOn
                  name
                  uniqueId
                  status
                  executeCompletedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query, operation_name="GetJobRunTests", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobRunTests.model_validate(data)

    def get_environment_adapter_type(
        self, environment_id: Any, **kwargs: Any
    ) -> GetEnvironmentAdapterType:
        query = gql(
            """
            query GetEnvironmentAdapterType($environmentId: BigInt!) {
              environment(id: $environmentId) {
                adapterType
                dbtProjectName
              }
            }
            """
        )
        variables: Dict[str, object] = {"environmentId": environment_id}
        response = self.execute(
            query=query,
            operation_name="GetEnvironmentAdapterType",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEnvironmentAdapterType.model_validate(data)

    def get_macro_arguments(
        self,
        environment_id: Any,
        filter: Union[Optional[MacroDefinitionFilter], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetMacroArguments:
        query = gql(
            """
            query GetMacroArguments($environmentId: BigInt!, $filter: MacroDefinitionFilter, $after: String) {
              environment(id: $environmentId) {
                definition {
                  macros(filter: $filter, first: 500, after: $after) {
                    edges {
                      node {
                        arguments {
                          description
                          name
                          type
                        }
                        uniqueId
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "environmentId": environment_id,
            "filter": filter,
            "after": after,
        }
        response = self.execute(
            query=query,
            operation_name="GetMacroArguments",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetMacroArguments.model_validate(data)
