# Generated by ariadne-codegen
# Source: schema.graphql

from enum import Enum


class AccessLevel(str, Enum):
    private = "private"
    protected = "protected"
    public = "public"


class AncestorNodeType(str, Enum):
    Exposure = "Exposure"
    Macro = "Macro"
    Model = "Model"
    Seed = "Seed"
    Snapshot = "Snapshot"
    Source = "Source"


class AppliedModelSortField(str, Enum):
    executeCompletedAt = "executeCompletedAt"
    queryUsageCount = "queryUsageCount"
    rowCount = "rowCount"
    uniqueId = "uniqueId"


class FreshnessStatus(str, Enum):
    Error = "Error"
    Pass = "Pass"
    Unknown = "Unknown"
    Warn = "Warn"


class OwnerResourceType(str, Enum):
    exposure = "exposure"
    group = "group"


class PackageResourceType(str, Enum):
    macro = "macro"
    model = "model"


class ReleaseVersion(str, Enum):
    latest = "latest"
    none = "none"
    old = "old"
    prerelease = "prerelease"


class ResourceNodeType(str, Enum):
    Exposure = "Exposure"
    Macro = "Macro"
    Metric = "Metric"
    Model = "Model"
    Seed = "Seed"
    SemanticModel = "SemanticModel"
    Snapshot = "Snapshot"
    Source = "Source"
    Test = "Test"


class RunStatus(str, Enum):
    error = "error"
    skipped = "skipped"
    success = "success"


class SortDirection(str, Enum):
    asc = "asc"
    desc = "desc"


class TestType(str, Enum):
    GENERIC_DATA_TEST = "GENERIC_DATA_TEST"
    SINGULAR_DATA_TEST = "SINGULAR_DATA_TEST"
    UNIT_TEST = "UNIT_TEST"


class TimePeriod(str, Enum):
    day = "day"
    hour = "hour"
    minute = "minute"
