# Generated by ariadne-codegen
# Source: queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetSources(BaseModel):
    environment: "GetSourcesEnvironment"


class GetSourcesEnvironment(BaseModel):
    applied: Optional["GetSourcesEnvironmentApplied"]


class GetSourcesEnvironmentApplied(BaseModel):
    sources: "GetSourcesEnvironmentAppliedSources"


class GetSourcesEnvironmentAppliedSources(BaseModel):
    total_count: int = Field(alias="totalCount")
    page_info: "GetSourcesEnvironmentAppliedSourcesPageInfo" = Field(alias="pageInfo")
    edges: List["GetSourcesEnvironmentAppliedSourcesEdges"]


class GetSourcesEnvironmentAppliedSourcesPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class GetSourcesEnvironmentAppliedSourcesEdges(BaseModel):
    node: "GetSourcesEnvironmentAppliedSourcesEdgesNode"


class GetSourcesEnvironmentAppliedSourcesEdgesNode(BaseModel):
    catalog: Optional["GetSourcesEnvironmentAppliedSourcesEdgesNodeCatalog"]
    database: Optional[str]
    description: Optional[str]
    identifier: Optional[str]
    schema_: Optional[str] = Field(alias="schema")
    unique_id: str = Field(alias="uniqueId")


class GetSourcesEnvironmentAppliedSourcesEdgesNodeCatalog(BaseModel):
    columns: Optional[
        List["GetSourcesEnvironmentAppliedSourcesEdgesNodeCatalogColumns"]
    ]


class GetSourcesEnvironmentAppliedSourcesEdgesNodeCatalogColumns(BaseModel):
    description: Optional[str]
    name: Optional[str]


GetSources.model_rebuild()
GetSourcesEnvironment.model_rebuild()
GetSourcesEnvironmentApplied.model_rebuild()
GetSourcesEnvironmentAppliedSources.model_rebuild()
GetSourcesEnvironmentAppliedSourcesEdges.model_rebuild()
GetSourcesEnvironmentAppliedSourcesEdgesNode.model_rebuild()
GetSourcesEnvironmentAppliedSourcesEdgesNodeCatalog.model_rebuild()
