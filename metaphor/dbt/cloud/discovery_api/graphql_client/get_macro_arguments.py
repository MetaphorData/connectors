# Generated by ariadne-codegen
# Source: queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetMacroArguments(BaseModel):
    environment: "GetMacroArgumentsEnvironment"


class GetMacroArgumentsEnvironment(BaseModel):
    definition: Optional["GetMacroArgumentsEnvironmentDefinition"]


class GetMacroArgumentsEnvironmentDefinition(BaseModel):
    macros: "GetMacroArgumentsEnvironmentDefinitionMacros"


class GetMacroArgumentsEnvironmentDefinitionMacros(BaseModel):
    edges: List["GetMacroArgumentsEnvironmentDefinitionMacrosEdges"]


class GetMacroArgumentsEnvironmentDefinitionMacrosEdges(BaseModel):
    node: "GetMacroArgumentsEnvironmentDefinitionMacrosEdgesNode"


class GetMacroArgumentsEnvironmentDefinitionMacrosEdgesNode(BaseModel):
    arguments: List["GetMacroArgumentsEnvironmentDefinitionMacrosEdgesNodeArguments"]
    unique_id: str = Field(alias="uniqueId")


class GetMacroArgumentsEnvironmentDefinitionMacrosEdgesNodeArguments(BaseModel):
    description: Optional[str]
    name: Optional[str]
    type: Optional[str]


GetMacroArguments.model_rebuild()
GetMacroArgumentsEnvironment.model_rebuild()
GetMacroArgumentsEnvironmentDefinition.model_rebuild()
GetMacroArgumentsEnvironmentDefinitionMacros.model_rebuild()
GetMacroArgumentsEnvironmentDefinitionMacrosEdges.model_rebuild()
GetMacroArgumentsEnvironmentDefinitionMacrosEdgesNode.model_rebuild()
