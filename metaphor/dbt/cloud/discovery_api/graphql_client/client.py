# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .get_environment_adapter_type import GetEnvironmentAdapterType
from .get_environment_model_file_path import GetEnvironmentModelFilePath
from .get_environment_snapshot_file_path import GetEnvironmentSnapshotFilePath
from .get_job_run_macros import GetJobRunMacros
from .get_job_run_models import GetJobRunModels
from .get_job_run_snapshots import GetJobRunSnapshots
from .get_job_run_sources import GetJobRunSources
from .get_job_tests import GetJobTests
from .get_macro_arguments import GetMacroArguments
from .input_types import (
    GenericMaterializedFilter,
    MacroDefinitionFilter,
    ModelDefinitionFilter,
)


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_job_tests(self, job_id: Any, **kwargs: Any) -> GetJobTests:
        query = gql(
            """
            query getJobTests($jobId: BigInt!) {
              job(id: $jobId) {
                tests {
                  uniqueId
                  name
                  status
                  columnName
                  executeCompletedAt
                  dependsOn
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id}
        response = self.execute(
            query=query, operation_name="getJobTests", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobTests.model_validate(data)

    def get_job_run_models(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunModels:
        query = gql(
            """
            query GetJobRunModels($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                models {
                  alias
                  columns {
                    comment
                    description
                    meta
                    name
                    tags
                    type
                  }
                  compiledCode
                  compiledSql
                  database
                  dependsOn
                  description
                  environmentId
                  materializedType
                  meta
                  name
                  packageName
                  rawCode
                  rawSql
                  schema
                  tags
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query, operation_name="GetJobRunModels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobRunModels.model_validate(data)

    def get_job_run_snapshots(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunSnapshots:
        query = gql(
            """
            query GetJobRunSnapshots($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                snapshots {
                  alias
                  columns {
                    comment
                    description
                    index
                    meta
                    name
                    tags
                    type
                  }
                  comment
                  compiledCode
                  compiledSql
                  database
                  description
                  environmentId
                  meta
                  name
                  owner
                  packageName
                  rawCode
                  rawSql
                  schema
                  tags
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query,
            operation_name="GetJobRunSnapshots",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetJobRunSnapshots.model_validate(data)

    def get_job_run_macros(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunMacros:
        query = gql(
            """
            query GetJobRunMacros($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                macros {
                  dependsOn
                  description
                  environmentId
                  macroSql
                  meta
                  name
                  packageName
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query, operation_name="GetJobRunMacros", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobRunMacros.model_validate(data)

    def get_job_run_sources(
        self, job_id: Any, run_id: Any, **kwargs: Any
    ) -> GetJobRunSources:
        query = gql(
            """
            query GetJobRunSources($jobId: BigInt!, $runId: BigInt!) {
              job(id: $jobId, runId: $runId) {
                sources {
                  columns {
                    description
                    name
                  }
                  database
                  description
                  identifier
                  schema
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id, "runId": run_id}
        response = self.execute(
            query=query,
            operation_name="GetJobRunSources",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetJobRunSources.model_validate(data)

    def get_environment_adapter_type(
        self, environment_id: Any, **kwargs: Any
    ) -> GetEnvironmentAdapterType:
        query = gql(
            """
            query GetEnvironmentAdapterType($environmentId: BigInt!) {
              environment(id: $environmentId) {
                adapterType
                dbtProjectName
              }
            }
            """
        )
        variables: Dict[str, object] = {"environmentId": environment_id}
        response = self.execute(
            query=query,
            operation_name="GetEnvironmentAdapterType",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEnvironmentAdapterType.model_validate(data)

    def get_macro_arguments(
        self,
        environment_id: Any,
        first: int,
        filter: Union[Optional[MacroDefinitionFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetMacroArguments:
        query = gql(
            """
            query GetMacroArguments($environmentId: BigInt!, $filter: MacroDefinitionFilter, $first: Int!) {
              environment(id: $environmentId) {
                definition {
                  macros(filter: $filter, first: $first) {
                    edges {
                      node {
                        arguments {
                          description
                          name
                          type
                        }
                        uniqueId
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "environmentId": environment_id,
            "filter": filter,
            "first": first,
        }
        response = self.execute(
            query=query,
            operation_name="GetMacroArguments",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetMacroArguments.model_validate(data)

    def get_environment_model_file_path(
        self,
        environment_id: Any,
        filter: Union[Optional[ModelDefinitionFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetEnvironmentModelFilePath:
        query = gql(
            """
            query GetEnvironmentModelFilePath($environmentId: BigInt!, $filter: ModelDefinitionFilter) {
              environment(id: $environmentId) {
                definition {
                  models(filter: $filter, first: 1) {
                    edges {
                      node {
                        filePath
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "environmentId": environment_id,
            "filter": filter,
        }
        response = self.execute(
            query=query,
            operation_name="GetEnvironmentModelFilePath",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEnvironmentModelFilePath.model_validate(data)

    def get_environment_snapshot_file_path(
        self,
        environment_id: Any,
        filter: Union[Optional[GenericMaterializedFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetEnvironmentSnapshotFilePath:
        query = gql(
            """
            query GetEnvironmentSnapshotFilePath($environmentId: BigInt!, $filter: GenericMaterializedFilter) {
              environment(id: $environmentId) {
                definition {
                  snapshots(filter: $filter, first: 1) {
                    edges {
                      node {
                        filePath
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "environmentId": environment_id,
            "filter": filter,
        }
        response = self.execute(
            query=query,
            operation_name="GetEnvironmentSnapshotFilePath",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEnvironmentSnapshotFilePath.model_validate(data)
