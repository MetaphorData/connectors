# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict

from .base_client import BaseClient
from .get_job_models import GetJobModels
from .get_job_tests import GetJobTests


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_job_models(self, job_id: Any, **kwargs: Any) -> GetJobModels:
        query = gql(
            """
            query getJobModels($jobId: BigInt!) {
              job(id: $jobId) {
                models {
                  alias
                  database
                  name
                  schema
                  uniqueId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id}
        response = self.execute(
            query=query, operation_name="getJobModels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobModels.model_validate(data)

    def get_job_tests(self, job_id: Any, **kwargs: Any) -> GetJobTests:
        query = gql(
            """
            query getJobTests($jobId: BigInt!) {
              job(id: $jobId) {
                tests {
                  uniqueId
                  name
                  status
                  columnName
                  executeCompletedAt
                  dependsOn
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"jobId": job_id}
        response = self.execute(
            query=query, operation_name="getJobTests", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetJobTests.model_validate(data)
