"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""The access level of the model you are declaring properties for."""
enum AccessLevel {
  private
  protected
  public
}

enum AncestorNodeType {
  Exposure
  Macro
  Model
  Seed
  Snapshot
  Source
}

"""
This type can represent any scalar type such as int, float, string or boolean
"""
scalar AnyScalar

"""Sort options for applied models"""
input AppliedModelSort {
  """The direction to sort by"""
  direction: SortDirection!

  """The field to sort by"""
  field: AppliedModelSortField!
}

enum AppliedModelSortField {
  executeCompletedAt
  queryUsageCount
  rowCount
  uniqueId
}

input AppliedResourcesFilter {
  """Filter results by tags"""
  tags: [String!]

  """Types of resources to enumerate"""
  types: [ResourceNodeType!]!

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

"""
The output of successful dbt DAG execution that creates or describes the state of the database.
"""
type AppliedState {
  exposures(
    after: String

    """Exposure Filter"""
    filter: ExposureFilter
    first: Int
  ): ExposureAppliedStateNodeConnection!

  """
  The timestamp when the environment was last updated, which is when the run was ingested.
  """
  lastUpdatedAt: DateTime

  """Project Lineage."""
  lineage(
    """Lineage Filter"""
    filter: LineageFilter!
  ): [LineageNode!]!

  """
  Retrieve model information based on environmentId.
      This will include any run from any job in the specified environment.
  """
  modelHistoricalRuns(
    """The model identifier"""
    identifier: String

    """
    Number of last run results where this model was built to return (max of 20)
    """
    lastRunCount: Int = 1

    """The unique ID of this model"""
    uniqueId: String

    """If true, return only runs that have catalog information for this model"""
    withCatalog: Boolean = false
  ): [ModelNode!]!
  models(
    after: String

    """Model Filter"""
    filter: ModelAppliedFilter
    first: Int

    """Sort by"""
    sort: AppliedModelSort
  ): ModelAppliedStateNodeConnection!

  """List of packages used in the environment"""
  packages(
    """Filter by resource type"""
    resource: PackageResourceType!
  ): [String!]!

  """The project name for this environment"""
  resourceCounts: JSONObject

  """The paginated results of resources."""
  resources(
    after: String

    """Resources Filter"""
    filter: AppliedResourcesFilter!
    first: Int
  ): EnvironmentAppliedNodeConnection!
  seeds(
    after: String

    """Seeds Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): SeedAppliedStateNodeConnection!
  snapshots(
    after: String

    """Seeds Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): SnapshotAppliedStateNodeConnection!
  sources(
    after: String

    """Source Filter"""
    filter: SourceAppliedFilter
    first: Int
  ): SourceAppliedStateNodeConnection!

  """The distinct tags of applied resources in the environment"""
  tags: [Tag!]!

  """The definition state of a test"""
  tests(
    after: String

    """Test Filter"""
    filter: TestAppliedFilter
    first: Int
  ): TestAppliedStateNodeConnection!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type CatalogColumn {
  """The comment of this column (generated by docs)"""
  comment: String

  """The description of this column (generated by docs)"""
  description: String

  """The index of this column (generated by docs)"""
  index: Int

  """
  The key-value store containing metadata relevant to this column (generated by docs)
  """
  meta: JSONObject

  """The name of this column (generated by docs)"""
  name: String

  """The tags associated with this column (generated by docs)"""
  tags: [String!]!

  """The type of this column (generated by docs)"""
  type: String
}

type CatalogNode {
  """Adapter agnostic bytes stat"""
  bytesStat: BigInt

  """The columns for this node"""
  columns: [CatalogColumn!]

  """The comment on this node"""
  comment: String

  """The environment ID of this model node"""
  environmentId: BigInt!

  """The job ID of the last run that built a catalog containing this node"""
  jobDefinitionId: BigInt

  """The owner of this node"""
  owner: String

  """Adapter agnostic row count"""
  rowCountStat: BigInt

  """
  The timestamp when the catalog build containing this node was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run that built a catalog containing this node"""
  runId: BigInt

  """The stats for this node"""
  stats: [CatalogStat]

  """The type of this node"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

type CatalogStat {
  """The description of this stat"""
  description: String

  """The id of this stat"""
  id: String

  """If this stat is included"""
  include: Boolean

  """The label of this stat"""
  label: String

  """The value of this stat"""
  value: AnyScalar
}

interface CloudArtifactInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!
}

type Criteria {
  """The freshness SLA that determines an error state for this source"""
  errorAfter: CriteriaInfo

  """The freshness SLA that determines a warning state for this source"""
  warnAfter: CriteriaInfo
}

type CriteriaInfo {
  """The number of periods in the freshness SLA"""
  count: Int

  """
  The period component of the freshness SLA (examples: minute, hour, day)
  """
  period: TimePeriod
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DefinitionResourcesFilter {
  """Filter results by tags"""
  tags: [String!]

  """Types of resources to enumerate"""
  types: [ResourceNodeType!]!

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

"""
The output of successful dbt DAG execution that creates or describes the state of the database.
"""
type DefinitionState {
  """The paginated results of Exposures."""
  exposures(
    after: String

    """Exposure Filter"""
    filter: ExposureFilter
    first: Int
  ): ExposureDefinitionNodeConnection!

  """Groups for model governance."""
  groups(
    after: String

    """Group Filter"""
    filter: GroupFilter
    first: Int
  ): GroupNodeConnection!

  """
  The timestamp when the environment was last updated, which is when the run was ingested.
  """
  lastUpdatedAt: DateTime

  """Project Lineage."""
  lineage(
    """Lineage Filter"""
    filter: LineageFilter!
  ): [LineageNode!]!
  macros(
    after: String

    """Macro Filter"""
    filter: MacroDefinitionFilter
    first: Int
  ): MacroDefinitionNodeConnection!
  metrics(
    after: String

    """Metrics Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): MetricDefinitionNodeConnection!
  models(
    after: String

    """Model Filter"""
    filter: ModelDefinitionFilter
    first: Int
  ): ModelDefinitionNodeConnection!

  """List of packages used in the environment"""
  packages(
    """Filter by resource type"""
    resource: PackageResourceType!
  ): [String!]!

  """The project name for this environment"""
  resourceCounts: JSONObject

  """The paginated results of resources."""
  resources(
    after: String

    """Resources Filter"""
    filter: DefinitionResourcesFilter!
    first: Int
  ): EnvironmentDefinitionNodeConnection!
  seeds(
    after: String

    """Seeds Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): SeedDefinitionNodeConnection!
  semanticModels(
    after: String

    """SemanticModels Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): SemanticModelDefinitionNodeConnection!
  snapshots(
    after: String

    """Snapshots Filter"""
    filter: GenericMaterializedFilter
    first: Int
  ): SnapshotDefinitionNodeConnection!
  sources(
    after: String

    """Source Filter"""
    filter: SourceDefinitionFilter
    first: Int
  ): SourceDefinitionNodeConnection!

  """The distinct tags of definition resources in the environment"""
  tags: [Tag!]!
  tests(
    after: String

    """Test Filter"""
    filter: TestDefinitionFilter
    first: Int
  ): TestDefinitionNodeConnection!
}

"""Retrieve information based on environment."""
type Environment {
  """The adapter type (data platform) that this environment executed with"""
  adapterType: String
  applied: AppliedState

  """The project name for this environment"""
  dbtProjectName: String
  definition: DefinitionState
}

interface EnvironmentAppliedNestedNode {
  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The user-supplied name of this particular node"""
  name: String

  """The resource type of this node"""
  resourceType: String!

  """The account ID of this node"""
  uniqueId: String!
}

interface EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type EnvironmentAppliedNodeConnection {
  edges: [EnvironmentAppliedNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EnvironmentAppliedNodeEdge {
  cursor: String!
  node: EnvironmentAppliedNode!
}

interface EnvironmentDefinitionNestedNode {
  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The user-supplied name of this particular node"""
  name: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of this node"""
  uniqueId: String!
}

interface EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type EnvironmentDefinitionNodeConnection {
  edges: [EnvironmentDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EnvironmentDefinitionNodeEdge {
  cursor: String!
  node: EnvironmentDefinitionNode!
}

type ExposureAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Type of this exposure"""
  exposureType: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """Exposure Label"""
  label: String

  """When the manifest was generated"""
  manifestGeneratedAt: DateTime

  """Exposure maturity"""
  maturity: String

  """The user-supplied name of this particular node"""
  name: String

  """Email of the owner of this exposure"""
  ownerEmail: String

  """Name of the owner of this exposure"""
  ownerName: String

  """The package name of this exposure"""
  packageName: String

  """The patch path of this exposure"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """The account ID of this node"""
  uniqueId: String!

  """Exposure url"""
  url: String
}

type ExposureAppliedStateNode implements EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The ancestors of this exposure"""
  ancestors(
    """Filter ancestors to specific node types"""
    types: [AncestorNodeType!]!
  ): [EnvironmentAppliedNestedNode!]!

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Type of this exposure"""
  exposureType: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this exposure"""
  fqn: [String!]!

  """Exposure Label"""
  label: String

  """When the manifest was generated"""
  manifestGeneratedAt: DateTime

  """Exposure maturity"""
  maturity: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """Email of the owner of this exposure"""
  ownerEmail: String

  """Name of the owner of this exposure"""
  ownerName: String

  """The package name of this exposure"""
  packageName: String

  """The direct parents of this exposure"""
  parents: [EnvironmentAppliedNestedNode!]!

  """The patch path of this exposure"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """Exposure url"""
  url: String
}

type ExposureAppliedStateNodeConnection {
  edges: [ExposureAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ExposureAppliedStateNodeEdge {
  cursor: String!
  node: ExposureAppliedStateNode!
}

type ExposureDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Type of this exposure"""
  exposureType: String

  """Original file path to the node"""
  filePath: String!

  """Exposure Label"""
  label: String

  """When the manifest was generated"""
  manifestGeneratedAt: DateTime

  """Exposure maturity"""
  maturity: String

  """The user-supplied name of this particular node"""
  name: String

  """Email of the owner of this exposure"""
  ownerEmail: String

  """Name of the owner of this exposure"""
  ownerName: String

  """The package name of this exposure"""
  packageName: String

  """The patch path of this exposure"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of this node"""
  uniqueId: String!

  """Exposure url"""
  url: String
}

type ExposureDefinitionNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The ancestors of this exposure"""
  ancestors: [EnvironmentDefinitionNestedNode!]!

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Type of this exposure"""
  exposureType: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this exposure"""
  fqn: [String!]!

  """Exposure Label"""
  label: String

  """When the manifest was generated"""
  manifestGeneratedAt: DateTime

  """Exposure maturity"""
  maturity: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """Email of the owner of this exposure"""
  ownerEmail: String

  """Name of the owner of this exposure"""
  ownerName: String

  """The package name of this exposure"""
  packageName: String

  """The direct parents of this exposure"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this exposure"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """Exposure url"""
  url: String
}

type ExposureDefinitionNodeConnection {
  edges: [ExposureDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ExposureDefinitionNodeEdge {
  cursor: String!
  node: ExposureDefinitionNode!
}

input ExposureFilter {
  """Filter results by exposure type"""
  exposureType: String

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

"""Exposure Lineage Object"""
type ExposureLineageNode implements LineageGraphNode & LineageNode & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type ExposureNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The list of nodes this exposure depends on"""
  dependsOn: [String!]!

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """The type of this exposure"""
  exposureType: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The ISO time when the manifest for this exposure was generated"""
  manifestGeneratedAt: DateTime

  """The maturity of this exposure"""
  maturity: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The email of the owner of this exposure"""
  ownerEmail: String

  """The name of the owner of this exposure"""
  ownerName: String

  """The package name of this exposure"""
  packageName: String

  """The list of resources that are ancestors of this exposure"""
  parents: [NodeInterface!]!

  """The list of models that are parents of this exposure"""
  parentsModels: [ModelNode!]!

  """The list of sources that are parents of this exposure"""
  parentsSources: [SourceNode!]!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The tags associated with this node"""
  tags: [String!]

  """The unique ID of this node"""
  uniqueId: String!

  """The url of this exposure"""
  url: String
}

"""Public model from another project"""
type ExternalModelNode implements EnvironmentAppliedNestedNode & EnvironmentDefinitionNestedNode {
  """The account ID of this node"""
  accountId: BigInt!
  database: String
  dbtProjectName: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]
  identifier: String
  latestVersion: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String
  packageName: String
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!
  relationName: String

  """The release version of this external model"""
  releaseVersion: ReleaseVersion
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
  version: String
}

enum FreshnessStatus {
  Error
  Pass
  Warn
}

"""
Basic filter for nodes that are materialized (exists) in the data warehouse
"""
input GenericMaterializedFilter {
  """Filter nodes by database"""
  database: String

  """Filter nodes by identifier"""
  identifier: String

  """Filter nodes by schema"""
  schema: String

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

input GroupFilter {
  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type GroupNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the group"""
  filePath: String!

  """The unique ID of the job in dbt Cloud that this node was generated for"""
  jobId: BigInt

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The number of models in this group"""
  modelCount: Int!

  """"""
  models: [ModelDefinitionNestedNode!]!

  """The name of this group"""
  name: String

  """Owner (email) of this group"""
  ownerEmail: String

  """Owner (name) of this group"""
  ownerName: String

  """Package name of this group"""
  packageName: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of the run in dbt Cloud that generated this node"""
  runId: BigInt
  tags: [String!]! @deprecated(reason: "Groups cannot have tags")

  """The unique ID of this node"""
  uniqueId: String!
}

type GroupNodeConnection {
  edges: [GroupNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GroupNodeEdge {
  cursor: String!
  node: GroupNode!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

""""""
type JobNode {
  exposure(
    """The name of this exposure"""
    name: String!
  ): ExposureNode

  """Retrieve exposure information."""
  exposures: [ExposureNode!]!

  """The unique ID of this job"""
  id: BigInt!
  macro(uniqueId: String!): MacroNode

  """Retrieve macro information."""
  macros: [MacroNode!]!

  """Retrieve metric information."""
  metric(uniqueId: String!): MetricNode

  """Retrieve metric information."""
  metrics: [MetricNode!]!
  model(uniqueId: String!): ModelNode

  """Retrieve model information."""
  models(
    """The database where this table/view lives"""
    database: String

    """The identifier of this table/view"""
    identifier: String

    """The schema where this table/view lives"""
    schema: String
  ): [ModelNode!]!

  """The unique ID of run in dbt-cloud"""
  runId: BigInt!
  seed(uniqueId: String!): SeedNode
  seeds: [SeedNode!]!
  snapshot(uniqueId: String!): SnapshotNode

  """Retrieve model information."""
  snapshots: [SnapshotNode!]!
  source(uniqueId: String!): SourceNode

  """Retrieve model information."""
  sources(
    """The database where this table/view lives"""
    database: String

    """The identifier of this table/view"""
    identifier: String

    """The schema where this table/view lives"""
    schema: String
  ): [SourceNode!]!

  """Retrieve test information."""
  test(
    """The unique ID of this particular test"""
    uniqueId: String!
  ): TestNode

  """Retrieve test information."""
  tests: [TestNode!]!
}

input LineageFilter {
  """Filter results by resources that have the specified column names"""
  columnNames: [String!]

  """Filter out results by exclude selector statement. Experimental."""
  exclude: String

  """Filter results by select statement. Experimental."""
  select: String

  """Filter results by tags"""
  tags: [String!]

  """Types of resources to enumerate"""
  types: [ResourceNodeType!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

"""
Common lineage node fields for nodes that appear in the DAG (excl. macros and documentation)
"""
interface LineageGraphNode implements LineageNode {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

"""Common lineage node fields"""
interface LineageNode {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

"""Common lineage node fields for nodes that can be executed"""
interface LineageNodeExecutable implements LineageNode {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """The last run status of this node"""
  lastRunStatus: String

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

"""Common lineage node fields for nodes that can be executed"""
interface LineageNodeTestable implements LineageNode {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")

  """The worst test status of this node"""
  worstTestStatus: String
}

"""Common lineage node fields for nodes with parents"""
interface LineageNodeWithParents implements LineageNode {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]!

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type MacroArguments {
  description: String
  name: String
  type: String
}

input MacroDefinitionFilter {
  """Filter results by package"""
  packageName: String

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type MacroDefinitionNestedNode implements EnvironmentAppliedNestedNode & EnvironmentDefinitionNestedNode {
  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The unique ID of the job in dbt Cloud that this node was generated for"""
  jobId: BigInt

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this macro"""
  packageName: String

  """The patch path of this macro"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of the run in dbt Cloud that generated this node"""
  runId: BigInt

  """The unique ID of this node"""
  uniqueId: String!
}

type MacroDefinitionNode implements EnvironmentAppliedNode & EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!
  arguments: [MacroArguments!]!

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The unique ID of the job in dbt Cloud that this node was generated for"""
  jobId: BigInt

  """The sql that defines this macro"""
  macroSql: String!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this macro"""
  packageName: String

  """the nodes this macro depends on"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this macro"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of the run in dbt Cloud that generated this node"""
  runId: BigInt

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type MacroDefinitionNodeConnection {
  edges: [MacroDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MacroDefinitionNodeEdge {
  cursor: String!
  node: MacroDefinitionNode!
}

"""Macro Lineage Object"""
type MacroLineageNode implements LineageNode & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type MacroNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The list of nodes this macro depends on"""
  dependsOn: [String!]!

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The sql that defines this macro"""
  macroSql: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The name of this macro"""
  name: String

  """The label associated with this macro"""
  originalFilePath: String

  """The package name of this macro"""
  packageName: String

  """The label associated with this macro"""
  path: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """The label associated with this macro"""
  rootPath: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The tags associated with this node"""
  tags: [String!]

  """The unique ID of this node"""
  uniqueId: String!
}

type MetricDefinitionNestedNode implements EnvironmentAppliedNestedNode & EnvironmentDefinitionNestedNode {
  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The filter of this metric"""
  filter: JSONObject

  """The formula of this metric"""
  formula: String

  """The fully qualified name of the node"""
  fqn: [String!]

  """The group this metric belongs to"""
  group: String

  """The job ID of the last run containing definition of this metric node"""
  jobDefinitionId: BigInt

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this metric"""
  packageName: String

  """The patch path of this metric"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this metric node"""
  runId: BigInt

  """The type of this metric node"""
  type: String

  """The type params of the metric"""
  typeParams: JSONObject

  """The unique ID of this node"""
  uniqueId: String!
}

type MetricDefinitionNode implements EnvironmentAppliedNode & EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The ancestors of this metric"""
  ancestors: [EnvironmentDefinitionNestedNode!]!

  """The direct children of this metric"""
  children: [EnvironmentDefinitionNestedNode!]!

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The filter of this metric"""
  filter: JSONObject

  """The formula of this metric"""
  formula: String

  """The fully qualified name of this metric"""
  fqn: [String!]!

  """The group this metric belongs to"""
  group: String

  """The job ID of the last run containing definition of this metric node"""
  jobDefinitionId: BigInt

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this metric"""
  packageName: String

  """The direct parents of this metric"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this metric"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this metric node"""
  runId: BigInt

  """The tags associated with this node"""
  tags: [String!]!

  """The type of this metric node"""
  type: String

  """The type params of the metric"""
  typeParams: JSONObject

  """The unique ID of this node"""
  uniqueId: String!
}

type MetricDefinitionNodeConnection {
  edges: [MetricDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MetricDefinitionNodeEdge {
  cursor: String!
  node: MetricDefinitionNode!
}

type MetricFilter {
  """The field this filter applies to"""
  field: String

  """The filter operator"""
  operator: String

  """value"""
  value: String
}

"""Metric Lineage Object"""
type MetricLineageNode implements LineageGraphNode & LineageNode & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type MetricNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The calculation method of this metric"""
  calculation_method: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The list of nodes this macro depends on"""
  dependsOn: [String!]!

  """The user-supplied description for this node"""
  description: String

  """A list of dimensions to group or filter the metric by"""
  dimensions: [String!]!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """
  The name of the environment in dbt Cloud that this node was generated for
  """
  environmentName: String

  """The expression to aggregate or calculate over"""
  expression: String

  """A list of filters to apply before calculating the metric"""
  filters: [MetricFilter!]!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The label associated with this metric"""
  label: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The model associated with this metric"""
  model: ModelNode

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this macro"""
  packageName: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The expression to aggregate or calculate over"""
  sql: String

  """The tags associated with this node"""
  tags: [String!]

  """One or more "grains" at which the metric can be evaluated"""
  timeGrains: [String!]

  """The time-based component of the metric"""
  timestamp: String

  """The type of this metric"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

"""Filter for applied models"""
input ModelAppliedFilter {
  """Filter models by access level"""
  access: AccessLevel

  """Filter nodes by database"""
  database: String

  """An optional configuration for grouping models"""
  group: String

  """Filter nodes by identifier"""
  identifier: String
  lastRunStatus: RunStatus

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """Filter results by package"""
  packageName: String

  """Filter nodes by schema"""
  schema: String

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type ModelAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """The access level of this model"""
  access: String

  """The package alias of this model"""
  alias: String

  """Whether or not this model has contracts on it"""
  contractEnforced: Boolean

  """The package database of this model"""
  database: String

  """The dbt version that ran this model"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The execution info for this node"""
  executionInfo: ModelExecutionInfoNode

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The group this model belongs to"""
  group: String

  """The latest version of this model"""
  latestVersion: String

  """The materialized type of this model"""
  materializedType: String

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this model"""
  packageName: String

  """The patch path of this snapshot"""
  patchPath: String

  """The release version of this model"""
  releaseVersion: ReleaseVersion

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this model"""
  schema: String

  """test status dictionary"""
  testStatuses: JSONObject!

  """The account ID of this node"""
  uniqueId: String!

  """The version of this model"""
  version: String
}

type ModelAppliedStateNode implements EnvironmentAppliedNode {
  """The access level of this model"""
  access: String

  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this model"""
  alias: String

  """All the parents of this model"""
  ancestors(
    """Filter ancestors to specific node types"""
    types: [AncestorNodeType!]!
  ): [EnvironmentAppliedNestedNode!]!

  """The catalog info for this node"""
  catalog: CatalogNode

  """The direct children nodes of this model"""
  children: [EnvironmentAppliedNestedNode!]!

  """The compiled code for this model"""
  compiledCode: String

  """The key-value store of configuration for this node"""
  config: JSONObject

  """The constraints on this model"""
  constraints: [ModelLevelConstraint!]!

  """Whether or not this model has contracts on it"""
  contractEnforced: Boolean

  """The package database of this model"""
  database: String

  """The dbt version that ran this model"""
  dbtVersion: String

  """The deprecation date of this model"""
  deprecationDate: DateTime

  """The package description of this model"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """The execution info for this node"""
  executionInfo: ModelExecutionInfoNode

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this model"""
  fqn: [String!]!

  """The group this model belongs to"""
  group: String

  """The language of this model"""
  language: String

  """The latest version of this model"""
  latestVersion: String

  """The materialized type of this model"""
  materializedType: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this model"""
  packageName: String

  """The packages of this model"""
  packages: [String!]!

  """The direct parent nodes of this model"""
  parents: [EnvironmentAppliedNestedNode!]!

  """The patch path of this snapshot"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw code for this model"""
  rawCode: String

  """The release version of this model"""
  releaseVersion: ReleaseVersion

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this model"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this model"""
  tests: [TestAppliedStateNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this model"""
  version: String

  """The versions of this model. Only returned if requesting 1 model."""
  versions: [ModelVersion!]!
}

type ModelAppliedStateNodeConnection {
  edges: [ModelAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModelAppliedStateNodeEdge {
  cursor: String!
  node: ModelAppliedStateNode!
}

input ModelDefinitionFilter {
  """Filter models by access level"""
  access: AccessLevel

  """Filter nodes by database"""
  database: String

  """An optional configuration for grouping models"""
  group: String

  """Filter nodes by identifier"""
  identifier: String

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """Filter nodes by schema"""
  schema: String

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type ModelDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """The access level of this model"""
  access: String

  """The package alias of this model"""
  alias: String

  """Whether or not this model has contracts on it"""
  contractEnforced: Boolean

  """The package database of this model"""
  database: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The group this model belongs to"""
  group: String

  """The job ID of the last run containing definition of this snapshot node"""
  jobDefinitionId: BigInt

  """The latest version of this model"""
  latestVersion: String

  """The materialized type of this model"""
  materializedType: String

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this model"""
  packageName: String

  """The patch path of this snapshot"""
  patchPath: String

  """The release version of this model"""
  releaseVersion: ReleaseVersion

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this snapshot node"""
  runId: BigInt

  """The package schema of this model"""
  schema: String

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this model"""
  version: String
}

type ModelDefinitionNode implements EnvironmentDefinitionNode {
  """The access level of this model"""
  access: String

  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this model"""
  alias: String

  """All the parents of this model"""
  ancestors(
    """Filter ancestors to specific node types"""
    types: [AncestorNodeType!]!
  ): [EnvironmentDefinitionNestedNode!]!

  """The direct children nodes of this model"""
  children: [EnvironmentDefinitionNestedNode!]!

  """The constraints on this model"""
  constraints: [ModelLevelConstraint!]!

  """Whether or not this model has contracts on it"""
  contractEnforced: Boolean

  """The package database of this model"""
  database: String

  """The deprecation date of this model"""
  deprecationDate: DateTime

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this model"""
  fqn: [String!]!

  """The group this model belongs to"""
  group: String

  """The job ID of the last run containing definition of this snapshot node"""
  jobDefinitionId: BigInt

  """The language of this model"""
  language: String

  """The latest version of this model"""
  latestVersion: String

  """The materialized type of this model"""
  materializedType: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this model"""
  packageName: String

  """The packages of this model"""
  packages: [String!]!

  """The direct parent nodes of this model"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this snapshot"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw code for this model"""
  rawCode: String

  """The release version of this model"""
  releaseVersion: ReleaseVersion

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this snapshot node"""
  runId: BigInt

  """The package schema of this model"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this model"""
  tests: [TestDefinitionNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this model"""
  version: String
}

type ModelDefinitionNodeConnection {
  edges: [ModelDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModelDefinitionNodeEdge {
  cursor: String!
  node: ModelDefinitionNode!
}

type ModelExecutionInfoNode {
  """The ISO timestamp when this model completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this model began compilation"""
  compileStartedAt: DateTime

  """The ISO timestamp when this model finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this model began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this model"""
  executionTime: Float

  """
  The job ID of the last run that either succeeded or failed in building this model node
  """
  lastJobDefinitionId: BigInt

  """
  The error message if the last run failed in building this model, else null
  """
  lastRunError: String

  """
  The timestamp when the last run that either succeeded or failed in building this model was completed, ISO formatted timestamp
  """
  lastRunGeneratedAt: DateTime

  """
  The run ID of the last run that either succeeded or failed in building this model node
  """
  lastRunId: BigInt

  """
  The status of the last run that either succeeded or failed in building this model
  """
  lastRunStatus: RunStatus

  """The job ID of the last successful run that built this model node"""
  lastSuccessJobDefinitionId: BigInt

  """The run ID of the last successful run that built this model node"""
  lastSuccessRunId: BigInt

  """
  The elapsed time of the specific run step (dbt run) that generated this model node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime
}

type ModelLevelConstraint {
  """Columns this constraint pertains to"""
  columns: [String!]

  """Constraint qualifying expression if provided"""
  expression: String

  """The name of this constraint"""
  name: String

  """Type of constraint"""
  type: String

  """Warn if unenforced"""
  warnUnenforced: Boolean

  """Warn if unsupported"""
  warnUnsupported: Boolean
}

"""Model Lineage Object"""
type ModelLineageNode implements LineageGraphNode & LineageNode & LineageNodeExecutable & LineageNodeTestable & LineageNodeWithParents {
  """The access level of this node"""
  access: String

  """The package alias of this node"""
  alias: String

  """The package database of this node"""
  database: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String

  """The last run status of this node"""
  lastRunStatus: String

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String

  """The layer of the DAG that the model belongs to"""
  modelingLayer: String

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this model depends on"""
  publicParentIds: [String!]!

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String

  """The worst test status of this node"""
  worstTestStatus: String
}

type ModelNode implements CloudArtifactInterface & NodeInterface {
  """The access level of this model"""
  access: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The alias of this model"""
  alias: String

  """The args passed to the dbt step which generated this model"""
  args: String

  """The list of nodes that depend on this model"""
  childrenL1: [String!]!

  """The columns of this model"""
  columns: [CatalogColumn!]

  """The comment on this model"""
  comment: String

  """The ISO timestamp when the model compilation started"""
  compileCompletedAt: DateTime

  """The ISO timestamp when the model compilation started"""
  compileStartedAt: DateTime

  """The compiled code of this model"""
  compiledCode: String

  """The compiled sql of this model"""
  compiledSql: String

  """The database this model is defined in"""
  database: String

  """The dbt group id of this model"""
  dbtGroup: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The list of nodes this model depends on"""
  dependsOn: [String!]!

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """The error message if there was an error else null"""
  error: String

  """The ISO timestamp when the model execution completed"""
  executeCompletedAt: DateTime

  """The ISO timestamp when the model execution started"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this model"""
  executionTime: Float

  """The identifier of the run step that generated this model"""
  invocationId: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The language of this model"""
  language: String

  """The materialized type of this model"""
  materializedType: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The owner of this model"""
  owner: String

  """The package name of this model"""
  packageName: String

  """The packages of this model"""
  packages: [String!]

  """Retrieve parents information."""
  parentsModels: [ModelNode!]!

  """Retrieve parents source information."""
  parentsSources: [SourceNode!]!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The raw code of this model"""
  rawCode: String

  """The raw sql of this model"""
  rawSql: String

  """The resource type of this node"""
  resourceType: String!

  """
  The elapsed time of the specific run step (dbt run) that generated this model node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The run results of this model"""
  runResults: [RunInfoNode!]!

  """The schema this model is defined in"""
  schema: String

  """Whether this model was skipped"""
  skip: Boolean

  """The stats of this model"""
  stats: [CatalogStat!]!

  """The database reported status of this model"""
  status: String

  """The tags associated with this node"""
  tags: [String!]

  """Retrieve test information."""
  tests: [TestNode!]!

  """The thread that ran the execution of this model"""
  threadId: String

  """The type of this model"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

type ModelVersion {
  """The version of this model"""
  name: String!

  """The release version of this model"""
  releaseVersion: String!

  """The unique ID of this model"""
  uniqueId: String!
}

interface NodeInterface {
  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The resource type of this node"""
  resourceType: String!

  """The tags associated with this node"""
  tags: [String!]

  """The unique ID of this node"""
  uniqueId: String!
}

"""The type of package resource"""
enum PackageResourceType {
  macro
  model
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  environment(
    """The environment id for this model"""
    id: BigInt!
  ): Environment!

  """Retrieve exposure information."""
  exposure(
    """The unique ID of this job"""
    jobId: Int!

    """The name of the exposure"""
    name: String!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): ExposureNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve exposure information."""
  exposures(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [ExposureNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  job(
    """The unique ID of this job"""
    id: BigInt!

    """The unique ID of the run in dbt-cloud"""
    runId: BigInt
  ): JobNode
  macro(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    uniqueId: String!
  ): MacroNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  macros(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [MacroNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  metric(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    uniqueId: String!
  ): MetricNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve metric information."""
  metrics(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [MetricNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  model(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    uniqueId: String!
  ): ModelNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """
  Retrieve model information based on environmentId.
    This will include any run from any job in the specified environment.
  """
  modelByEnvironment(
    """The environment id for this model"""
    environmentId: Int!

    """The model identifier"""
    identifier: String

    """
    Number of last run results where this model was built to return (max of 20)
    """
    lastRunCount: Int = 1

    """The unique ID of this model"""
    uniqueId: String

    """If true, return only runs that have catalog information for this model"""
    withCatalog: Boolean = false
  ): [ModelNode!]! @deprecated(reason: "Use the environment.applied.modelHistoricalRuns query instead.")

  """Retrieve model information."""
  models(
    database: String
    identifier: String

    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    schema: String
  ): [ModelNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  seed(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    uniqueId: String!
  ): SeedNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve seed information."""
  seeds(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [SeedNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve snapshot information."""
  snapshot(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int

    """The unique ID of the snapshot"""
    uniqueId: String!
  ): SnapshotNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve snapshot information."""
  snapshots(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [SnapshotNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
  source(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    uniqueId: String!
  ): SourceNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve source information."""
  sources(
    database: String
    identifier: String

    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
    schema: String
  ): [SourceNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve test information."""
  test(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int

    """The unique ID of this particular test"""
    uniqueId: String!
  ): TestNode @deprecated(reason: "We recommend using the environment query to get the latest state instead.")

  """Retrieve test information."""
  tests(
    """The unique ID of this job"""
    jobId: Int!

    """The unique ID of the run in dbt-cloud"""
    runId: Int
  ): [TestNode!]! @deprecated(reason: "We recommend using the environment query to get the latest state instead.")
}

enum ReleaseVersion {
  latest
  none
  old
  prerelease
}

"""The type of resource"""
enum ResourceNodeType {
  Exposure
  Macro
  Metric
  Model
  Seed
  SemanticModel
  Snapshot
  Source
  Test
}

"""Run information for a model"""
type RunInfoNode {
  """The args passed to the dbt step which generated this model"""
  args: String

  """The ISO timestamp when the model compilation started"""
  compileCompletedAt: DateTime

  """The ISO timestamp when the model compilation started"""
  compileStartedAt: DateTime

  """The error message if there was an error else null"""
  error: String

  """The ISO timestamp when the model execution completed"""
  executeCompletedAt: DateTime

  """The ISO timestamp when the model execution started"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this model"""
  executionTime: Float

  """The identifier of the run step that generated this model"""
  invocationId: String

  """
  The elapsed time of the specific run step (dbt run) that generated this model node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """Whether this model was skipped"""
  skip: Boolean

  """The database reported status of this model"""
  status: String

  """The thread that ran the execution of this model"""
  threadId: String
}

"""Status of a run"""
enum RunStatus {
  error
  skipped
  success
}

type SeedAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """The package alias of this seed"""
  alias: String

  """The package database of this seed"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The description of this seed"""
  description: String

  """The execution info for this seed"""
  executionInfo: SeedExecutionInfoNode!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this seed"""
  packageName: String

  """The patch path of this seed"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this seed"""
  schema: String

  """The account ID of this node"""
  uniqueId: String!
}

type SeedAppliedStateNode implements EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this seed"""
  alias: String

  """The catalog info for this node"""
  catalog: CatalogNode

  """The direct children of this seed"""
  children: [EnvironmentAppliedNestedNode!]!

  """The package database of this seed"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The description of this seed"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """The execution info for this seed"""
  executionInfo: SeedExecutionInfoNode!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this seed"""
  fqn: [String!]!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this seed"""
  packageName: String

  """The patch path of this seed"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this seed"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this seed"""
  tests: [TestAppliedStateNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SeedAppliedStateNodeConnection {
  edges: [SeedAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SeedAppliedStateNodeEdge {
  cursor: String!
  node: SeedAppliedStateNode!
}

type SeedDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """The package alias of this seed"""
  alias: String

  """The package database of this seed"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The job ID of the last run containing definition of this seed node"""
  jobDefinitionId: BigInt

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this seed"""
  packageName: String

  """The patch path of this seed"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this seed node"""
  runId: BigInt

  """The package schema of this seed"""
  schema: String

  """The unique ID of this node"""
  uniqueId: String!
}

type SeedDefinitionNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this seed"""
  alias: String

  """The direct children of this seed"""
  children: [EnvironmentDefinitionNestedNode!]!

  """The package database of this seed"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this seed"""
  fqn: [String!]!

  """The job ID of the last run containing definition of this seed node"""
  jobDefinitionId: BigInt

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this seed"""
  packageName: String

  """The patch path of this seed"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this seed node"""
  runId: BigInt

  """The package schema of this seed"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SeedDefinitionNodeConnection {
  edges: [SeedDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SeedDefinitionNodeEdge {
  cursor: String!
  node: SeedDefinitionNode!
}

type SeedExecutionInfoNode {
  """The ISO timestamp when this seed completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this seed began compilation"""
  compileStartedAt: DateTime

  """The ISO timestamp when this seed finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this seed began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this seed"""
  executionTime: Float

  """
  The job ID of the last run that either succeeded or failed in building this seed node
  """
  lastJobDefinitionId: BigInt

  """
  The error message if the last run failed in building this seed, else null
  """
  lastRunError: String

  """
  The timestamp when the last run that either succeeded or failed in building this seed was completed, ISO formatted timestamp
  """
  lastRunGeneratedAt: DateTime

  """
  The run ID of the last run that either succeeded or failed in building this seed node
  """
  lastRunId: BigInt

  """True if this seed was skipped in the last run, otherwise false"""
  lastRunSkip: Boolean

  """
  The status of the last run that either succeeded or failed in building this seed
  """
  lastRunStatus: String

  """The job ID of the last successful run that built this seed node"""
  lastSuccessJobDefinitionId: BigInt

  """The run ID of the last successful run that built this seed node"""
  lastSuccessRunId: BigInt

  """
  The elapsed time of the specific run step (dbt run) that generated this seed node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime
}

"""Seed Lineage Object"""
type SeedLineageNode implements LineageGraphNode & LineageNode & LineageNodeExecutable & LineageNodeTestable {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this seed"""
  alias: String

  """The package database of this seed"""
  database: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """The last run status of this node"""
  lastRunStatus: String

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this seed"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")

  """The worst test status of this node"""
  worstTestStatus: String
}

type SeedNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The identifier of this table/view"""
  alias: String

  """The list of nodes that depend on this seed"""
  childrenL1: [String!]

  """The columns for this seed"""
  columns: [CatalogColumn!]

  """The comment on this seed"""
  comment: String

  """The ISO timestamp when this seed completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this seed began compilation"""
  compileStartedAt: DateTime

  """The compiled code for this seed"""
  compiledCode: String

  """The compiled SQL for this seed"""
  compiledSql: String

  """The database where this table/view lives"""
  database: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """The error message if there was an error, else null"""
  error: String

  """The ISO timestamp when this seed finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this seed began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this seed"""
  executionTime: Float

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The owner of this seed"""
  owner: String

  """The package name of this seed"""
  packageName: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The raw code for this seed"""
  rawCode: String

  """The raw SQL for this seed"""
  rawSql: String

  """The resource type of this node"""
  resourceType: String!

  """
  The elapsed time of the specific run step (dbt run) that generated this seed node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The schema where this table/view lives"""
  schema: String

  """True if this seed was skipped, otherwise false"""
  skip: Boolean

  """The stats for this seed"""
  stats: [CatalogStat!]!

  """The database-reported status of this seed"""
  status: String

  """The tags associated with this node"""
  tags: [String!]

  """The thread that ran the execution of this seed"""
  thread_id: String @deprecated(reason: "No thread ID associated with seeds")

  """The type of this seed"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

type SemanticModelDefinitionNestedNode implements EnvironmentAppliedNestedNode & EnvironmentDefinitionNestedNode {
  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The dimensions of this semantic model"""
  dimensions: [SemanticModelDimension!]!

  """The entities of this semantic model"""
  entities: [SemanticModelEntity!]!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The unique ID of the job in dbt Cloud that this node was generated for"""
  jobDefinitionId: BigInt

  """The measures of this semantic model"""
  measures: [SemanticModelMeasure!]!

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this semantic model"""
  packageName: String

  """The patch path of this semantic model"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of the run in dbt Cloud that generated this node"""
  runId: BigInt

  """The unique ID of this node"""
  uniqueId: String!
}

type SemanticModelDefinitionNode implements EnvironmentAppliedNode & EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """All upstream nodes of this semantic model"""
  ancestors: [EnvironmentDefinitionNestedNode!]!

  """The direct children nodes of this semantic model"""
  children: [EnvironmentDefinitionNestedNode!]!

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The dimensions of this semantic model"""
  dimensions: [SemanticModelDimension!]!

  """The entities of this semantic model"""
  entities: [SemanticModelEntity!]!

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this semantic model"""
  fqn: [String!]!

  """The unique ID of the job in dbt Cloud that this node was generated for"""
  jobDefinitionId: BigInt

  """The measures of this semantic model"""
  measures: [SemanticModelMeasure!]!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this semantic model"""
  packageName: String

  """The direct parents nodes of this semantic model"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this semantic model"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The unique ID of the run in dbt Cloud that generated this node"""
  runId: BigInt

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SemanticModelDefinitionNodeConnection {
  edges: [SemanticModelDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SemanticModelDefinitionNodeEdge {
  cursor: String!
  node: SemanticModelDefinitionNode!
}

type SemanticModelDimension {
  """Description of the dimension"""
  description: String

  """Name of the dimension"""
  name: String

  """Type of the dimension"""
  type: String

  """Type parameters of the dimension"""
  typeParams: JSONObject
}

type SemanticModelEntity {
  """Description of the entity"""
  description: String

  """Name of the entity"""
  name: String

  """Type of the entity"""
  type: String
}

"""SemanticModel Lineage Object"""
type SemanticModelLineageNode implements LineageGraphNode & LineageNode & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type SemanticModelMeasure {
  """Aggregation type of the measure"""
  agg: String

  """Whether or not this measure creates a metric"""
  createMetric: Boolean

  """Description of the measure"""
  description: String

  """Expression of the measure"""
  expr: String

  """Name of the measure"""
  name: String
}

type SnapshotAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """The package alias of this snapshot"""
  alias: String

  """The package database of this snapshot"""
  database: String

  """The dbt version that ran this snapshot"""
  dbtVersion: String

  """The package description of this snapshot"""
  description: String

  """The execution info for this node"""
  executionInfo: SnapshotExecutionInfoNode

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this snapshot"""
  packageName: String

  """The patch path of this snapshot"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this snapshot"""
  schema: String

  """The account ID of this node"""
  uniqueId: String!
}

type SnapshotAppliedStateNode implements EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this snapshot"""
  alias: String

  """The catalog info for this node"""
  catalog: CatalogNode

  """The direct children nodes of this snapshot"""
  children: [EnvironmentAppliedNestedNode!]!

  """The compiled code for this snapshot"""
  compiledCode: String

  """The key-value store of configuration for this node"""
  config: JSONObject

  """The package database of this snapshot"""
  database: String

  """The dbt version that ran this snapshot"""
  dbtVersion: String

  """The package description of this snapshot"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """The execution info for this node"""
  executionInfo: SnapshotExecutionInfoNode

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this snapshot"""
  fqn: [String!]!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this snapshot"""
  packageName: String

  """the nodes this snapshot depends on"""
  parents: [EnvironmentAppliedNestedNode!]!

  """The patch path of this snapshot"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw code for this snapshot"""
  rawCode: String

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this snapshot"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this snapshot"""
  tests: [TestAppliedStateNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SnapshotAppliedStateNodeConnection {
  edges: [SnapshotAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SnapshotAppliedStateNodeEdge {
  cursor: String!
  node: SnapshotAppliedStateNode!
}

type SnapshotDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """The package alias of this snapshot"""
  alias: String

  """The package database of this snapshot"""
  database: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The job ID of the last run containing definition of this snapshot node"""
  jobDefinitionId: BigInt

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this snapshot"""
  packageName: String

  """The patch path of this snapshot"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this snapshot node"""
  runId: BigInt

  """The package schema of this snapshot"""
  schema: String

  """The unique ID of this node"""
  uniqueId: String!
}

type SnapshotDefinitionNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The package alias of this snapshot"""
  alias: String

  """The direct children nodes of this snapshot"""
  children: [EnvironmentDefinitionNestedNode!]!

  """The package database of this snapshot"""
  database: String

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the environment in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this snapshot"""
  fqn: [String!]!

  """The job ID of the last run containing definition of this snapshot node"""
  jobDefinitionId: BigInt

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The package name of this snapshot"""
  packageName: String

  """the nodes this snapshot depends on"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this snapshot"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw code for this snapshot"""
  rawCode: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this snapshot node"""
  runId: BigInt

  """The package schema of this snapshot"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SnapshotDefinitionNodeConnection {
  edges: [SnapshotDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SnapshotDefinitionNodeEdge {
  cursor: String!
  node: SnapshotDefinitionNode!
}

type SnapshotExecutionInfoNode {
  """The ISO timestamp when this snapshot completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this snapshot began compilation"""
  compileStartedAt: DateTime

  """The ISO timestamp when this snapshot finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this snapshot began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this snapshot"""
  executionTime: Float

  """
  The job ID of the last run that either succeeded or failed in building this snapshot node
  """
  lastJobDefinitionId: BigInt

  """
  The error message if the last run failed in building this snapshot, else null
  """
  lastRunError: String

  """
  The timestamp when the last run that either succeeded or failed in building this snapshot was completed, ISO formatted timestamp
  """
  lastRunGeneratedAt: DateTime

  """
  The run ID of the last run that either succeeded or failed in building this snapshot node
  """
  lastRunId: BigInt

  """
  The status of the last run that either succeeded or failed in building this snapshot
  """
  lastRunStatus: String

  """The job ID of the last successful run that built this snapshot node"""
  lastSuccessJobDefinitionId: BigInt

  """The run ID of the last successful run that built this snapshot node"""
  lastSuccessRunId: BigInt

  """
  The elapsed time of the specific run step (dbt run) that generated this snapshot node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime
}

"""Snapshot Lineage Object"""
type SnapshotLineageNode implements LineageGraphNode & LineageNode & LineageNodeExecutable & LineageNodeTestable & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this seed"""
  alias: String

  """The package database of this seed"""
  database: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """The last run status of this node"""
  lastRunStatus: String

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this seed"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")

  """The worst test status of this node"""
  worstTestStatus: String
}

type SnapshotNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The alias of this snapshot"""
  alias: String

  """The list of nodes that depend on this snapshot"""
  childrenL1: [String!]!

  """The columns of this snapshot"""
  columns: [CatalogColumn!]

  """The comment on this snapshot"""
  comment: String

  """The ISO timestamp when the snapshot compilation started"""
  compileCompletedAt: DateTime

  """The ISO timestamp when the snapshot compilation started"""
  compileStartedAt: DateTime

  """The compiled code of this snapshot"""
  compiledCode: String

  """The compiled sql of this snapshot"""
  compiledSql: String

  """The database this snapshot is defined in"""
  database: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """The error message if there was an error, otherwise null"""
  error: String

  """The ISO timestamp when the snapshot execution completed"""
  executeCompletedAt: DateTime

  """The ISO timestamp when the snapshot execution started"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this snapshot"""
  executionTime: Float

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The owner of this snapshot"""
  owner: String

  """The package name of this snapshot"""
  packageName: String

  """Retrieve parents information."""
  parentsModels: [ModelNode!]!

  """Retrieve parents source information."""
  parentsSources: [SourceNode!]!

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The raw code of this snapshot"""
  rawCode: String

  """The raw sql of this snapshot"""
  rawSql: String

  """The resource type of this node"""
  resourceType: String!

  """
  The elapsed time of the specific run step (dbt run) that generated this snapshot node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The schema this snapshot is defined in"""
  schema: String

  """True if this snapshot was skipped, otherwise false"""
  skip: Boolean

  """The stats of this snapshot"""
  stats: [CatalogStat!]!

  """The database-reported status of this snapshot"""
  status: String

  """The tags associated with this node"""
  tags: [String!]

  """The thread that ran the execution of this snapshot"""
  threadId: String

  """The type of this snapshot"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

enum SortDirection {
  asc
  desc
}

input SourceAppliedFilter {
  """Filter nodes by database"""
  database: String

  """Filter results by freshness checked"""
  freshnessChecked: Boolean

  """Filter results by freshness status"""
  freshnessStatus: FreshnessStatus

  """Filter nodes by identifier"""
  identifier: String

  """Filter nodes by schema"""
  schema: String

  """Names of the sources to return"""
  sourceNames: [String!]

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type SourceAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """The package database of this source"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The freshness info for this node"""
  freshness: SourceFreshnessNode!

  """The user-supplied name of this particular source"""
  identifier: String

  """The loader for this source"""
  loader: String

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this source"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this source"""
  schema: String

  """The source_description of this source"""
  sourceDescription: String

  """The user-supplied name of this particular source"""
  sourceName: String

  """test status dictionary"""
  testStatuses: JSONObject!

  """The account ID of this node"""
  uniqueId: String!
}

type SourceAppliedStateNode implements EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The catalog info for this node"""
  catalog: CatalogNode

  """The direct children of this source"""
  children: [EnvironmentAppliedNestedNode!]!

  """The package database of this source"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this source"""
  fqn: [String!]!

  """The freshness info for this node"""
  freshness: SourceFreshnessNode!

  """The user-supplied name of this particular source"""
  identifier: String

  """The loader for this source"""
  loader: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this source"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """The package schema of this source"""
  schema: String

  """The source_description of this source"""
  sourceDescription: String

  """The user-supplied name of this particular source"""
  sourceName: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this source"""
  tests: [TestAppliedStateNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SourceAppliedStateNodeConnection {
  edges: [SourceAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SourceAppliedStateNodeEdge {
  cursor: String!
  node: SourceAppliedStateNode!
}

input SourceDefinitionFilter {
  """Filter nodes by database"""
  database: String

  """Filter nodes by identifier"""
  identifier: String

  """Filter nodes by schema"""
  schema: String

  """Names of the sources to return"""
  sourceNames: [String!]

  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type SourceDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """The package database of this source"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The user-supplied name of this particular source"""
  identifier: String

  """The loader for this source"""
  loader: String

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this source"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The package schema of this source"""
  schema: String

  """The source_description of this source"""
  sourceDescription: String

  """The user-supplied name of this particular source"""
  sourceName: String

  """The unique ID of this node"""
  uniqueId: String!
}

type SourceDefinitionNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The direct children of this source"""
  children: [EnvironmentDefinitionNestedNode!]!

  """The package database of this source"""
  database: String

  """dbt version"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this source"""
  fqn: [String!]!

  """The user-supplied name of this particular source"""
  identifier: String

  """The loader for this source"""
  loader: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this source"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The package schema of this source"""
  schema: String

  """The source_description of this source"""
  sourceDescription: String

  """The user-supplied name of this particular source"""
  sourceName: String

  """The tags associated with this node"""
  tags: [String!]!

  """tests for this source"""
  tests: [TestDefinitionNestedNode!]!

  """The unique ID of this node"""
  uniqueId: String!
}

type SourceDefinitionNodeConnection {
  edges: [SourceDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SourceDefinitionNodeEdge {
  cursor: String!
  node: SourceDefinitionNode!
}

type SourceFreshnessNode {
  """The freshness SLA specified for this source table"""
  criteria: Criteria!

  """Whether or not the freshness was checked"""
  freshnessChecked: Boolean

  """The job ID of the last run that checked for source freshness"""
  freshnessJobDefinitionId: BigInt

  """
  The timestamp when the source freshness was checked, ISO formatted timestamp
  """
  freshnessRunGeneratedAt: DateTime

  """The run ID of the last run that checked for source freshness"""
  freshnessRunId: BigInt

  """
  The state of the freshness check for this source. Can be one of null, "pass", "fail", or "error". A value of null indicates that there was no freshness check.
  """
  freshnessStatus: FreshnessStatus

  """
  The max value in the designated "loaded_at" column for this source table. ISO formatted timestamp
  """
  maxLoadedAt: DateTime

  """The delta (in seconds) between max_loaded_at and snapshotted_at"""
  maxLoadedAtTimeAgoInS: Float

  """
  The time when this source was checked for freshnesses by dbt. ISO formatted timestamp
  """
  snapshottedAt: DateTime
}

"""Source Lineage Object"""
type SourceLineageNode implements LineageGraphNode & LineageNode & LineageNodeTestable {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")

  """The worst test status of this node"""
  worstTestStatus: String
}

type SourceNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The list of nodes that depend on this source"""
  childrenL1: [String!]!

  """The columns of this source"""
  columns: [CatalogColumn!]

  """The comment on this source"""
  comment: String

  """The freshness SLA specified for this source table"""
  criteria: Criteria!

  """The database this source is defined in"""
  database: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """Whether or not the freshness was checked"""
  freshnessChecked: Boolean

  """The identifier of this table/view"""
  identifier: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The loader of this source"""
  loader: String

  """
  The max value in the designated "loaded_at" column for this source table. ISO formatted timestamp
  """
  maxLoadedAt: DateTime

  """The delta (in seconds) between max_loaded_at and snapshotted_at"""
  maxLoadedAtTimeAgoInS: Float

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """The owner of this source"""
  owner: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The resource type of this node"""
  resourceType: String!

  """
  The elapsed time of the specific run step (dbt source snapshot-freshness) that generated this source node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt source snapshot-freshness) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The schema this source is defined in"""
  schema: String

  """
  The time when this source was checked for freshnesses by dbt. ISO formatted timestamp
  """
  snapshottedAt: DateTime

  """The user-supplied description for this source"""
  sourceDescription: String

  """The logical name of this source"""
  sourceName: String

  """
  The state of the freshness check for this source. Can be one of null, "pass", "fail", or "error". A value of null indicates that there was no freshness check.
  """
  state: FreshnessStatus

  """The stats of this source"""
  stats: [CatalogStat!]!

  """The tags associated with this node"""
  tags: [String!]

  """Retrieve test information."""
  tests: [TestNode!]!

  """The type of this source"""
  type: String

  """The unique ID of this node"""
  uniqueId: String!
}

"""A dbt resource's tag"""
type Tag {
  """The tag name"""
  name: String!
}

input TestAppliedFilter {
  status: String

  """Filter results by tags"""
  tags: [String!]
  testTypes: [TestType!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type TestAppliedStateNestedNode implements EnvironmentAppliedNestedNode {
  """The name of the column that the test pertains to"""
  columnName: String

  """dbt version"""
  dbtVersion: String

  """Descriptions of the test"""
  description: String

  """The execution info for this node"""
  executionInfo: TestExecutionInfoNode!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of the node"""
  fqn: [String!]

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this test"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!
  testMetadata: TestMetadata!

  """The type of test"""
  testType: TestType!

  """The account ID of this node"""
  uniqueId: String!
}

"""The definition state of a test"""
type TestAppliedStateNode implements EnvironmentAppliedNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The name of the column that the test pertains to"""
  columnName: String

  """The compiled code of this test"""
  compiledCode: String

  """The key-value store of configuration for this node"""
  config: JSONObject

  """dbt version"""
  dbtVersion: String

  """Descriptions of the test"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """The status of the event"""
  eventStatus: JSONObject

  """The execution info for this node"""
  executionInfo: TestExecutionInfoNode!

  """The expect for this test"""
  expect: JSONObject

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this test"""
  fqn: [String!]!

  """The given for this test"""
  given: [JSONObject!]

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The model of the test"""
  model: String

  """The user-supplied name of this particular node"""
  name: String

  """The number of expect rows for this test"""
  numExpectRows: Int

  """The number of given for this test"""
  numGiven: Int

  """The number of given rows for this test"""
  numGivenRows: Int

  """The overrides for this test"""
  overrides: JSONObject

  """The direct parents of this test"""
  parents: [EnvironmentAppliedNestedNode!]!

  """The patch path of this test"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw sql of this test"""
  rawCode: String

  """The resource type of this node"""
  resourceType: String!

  """The tags associated with this node"""
  tags: [String!]!
  testMetadata: TestMetadata!

  """The type of test"""
  testType: TestType!

  """The unique ID of the node that this test is testing"""
  testedNodeUniqueId: String

  """The unique ID of the input node that this test is testing"""
  thisInputNodeUniqueId: String

  """The unique ID of this node"""
  uniqueId: String!
}

type TestAppliedStateNodeConnection {
  edges: [TestAppliedStateNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestAppliedStateNodeEdge {
  cursor: String!
  node: TestAppliedStateNode!
}

input TestDefinitionFilter {
  """Filter results by tags"""
  tags: [String!]

  """unique ids of nodes to return"""
  uniqueIds: [String!]
}

type TestDefinitionNestedNode implements EnvironmentDefinitionNestedNode {
  """The name of the column that the test pertains to"""
  columnName: String

  """dbt version"""
  dbtVersion: String

  """Descriptions of the test"""
  description: String

  """Original file path to the node"""
  filePath: String!

  """The job ID of the last run containing definition of this test node"""
  jobDefinitionId: BigInt

  """The user-supplied name of this particular node"""
  name: String

  """The patch path of this test"""
  patchPath: String

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this test node"""
  runId: BigInt

  """The type of test"""
  testType: TestType

  """The unique ID of this node"""
  uniqueId: String!
}

type TestDefinitionNode implements EnvironmentDefinitionNode {
  """The account ID of this node"""
  accountId: BigInt!

  """The name of the column that the test pertains to"""
  columnName: String

  """dbt version"""
  dbtVersion: String

  """Descriptions of the test"""
  description: String

  """The environment ID of this node"""
  environmentId: BigInt!

  """The status of the event"""
  eventStatus: JSONObject!

  """The expect for this test"""
  expect: JSONObject!

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this test"""
  fqn: [String!]!

  """The given for this test"""
  given: [JSONObject!]!

  """The job ID of the last run containing definition of this test node"""
  jobDefinitionId: BigInt

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The model of the test"""
  model: String

  """The user-supplied name of this particular node"""
  name: String

  """The number of expect rows for this test"""
  numExpectRows: Int

  """The number of given for this test"""
  numGiven: Int

  """The number of given rows for this test"""
  numGivenRows: Int

  """The overrides for this test"""
  overrides: JSONObject!

  """The direct parents of this test"""
  parents: [EnvironmentDefinitionNestedNode!]!

  """The patch path of this test"""
  patchPath: String

  """The project ID of this node"""
  projectId: BigInt!

  """The raw sql of this test"""
  rawCode: String

  """The resource type of this node"""
  resource: String!

  """The resource type of this node"""
  resourceType: String!

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """The run ID of the last run containing definition of this test node"""
  runId: BigInt

  """The tags associated with this node"""
  tags: [String!]!

  """The type of test"""
  testType: TestType

  """The unique ID of the node that this test is testing"""
  testedNodeUniqueId: String

  """The unique ID of the input node that this test is testing"""
  thisInputNodeUniqueId: String

  """The unique ID of this node"""
  uniqueId: String!
}

type TestDefinitionNodeConnection {
  edges: [TestDefinitionNodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestDefinitionNodeEdge {
  cursor: String!
  node: TestDefinitionNode!
}

type TestExecutionInfoNode {
  """The ISO timestamp when this test completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this test began compilation"""
  compileStartedAt: DateTime

  """The ISO timestamp when this test finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this test began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this test"""
  executionTime: Float

  """
  The job ID of the last run that either succeeded or failed in building this test node
  """
  lastJobDefinitionId: BigInt

  """
  The error message if the last run failed in building this test, else null
  """
  lastRunError: String

  """The number of failures in the last run"""
  lastRunFailures: BigInt

  """
  The timestamp when the last run that either succeeded or failed in building this test was completed, ISO formatted timestamp
  """
  lastRunGeneratedAt: DateTime

  """
  The run ID of the last run that either succeeded or failed in building this test node
  """
  lastRunId: BigInt

  """
  The status of the last run that either succeeded or failed in building this test
  """
  lastRunStatus: String

  """The job ID of the last successful run that built this test node"""
  lastSuccessJobDefinitionId: BigInt

  """The run ID of the last successful run that built this test node"""
  lastSuccessRunId: BigInt

  """
  The elapsed time of the specific run step (dbt run) that generated this test node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime
}

"""Test Lineage Object"""
type TestLineageNode implements LineageGraphNode & LineageNode & LineageNodeExecutable & LineageNodeWithParents {
  """The access level of this node"""
  access: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package alias of this node"""
  alias: String @deprecated(reason: "Use ...on syntax from specific types")

  """The package database of this node"""
  database: String @deprecated(reason: "Use ...on syntax from specific types")

  """Original file path to the node"""
  filePath: String!

  """The fully qualified name of this node"""
  fqn: [String!]!

  """The group this node belongs to"""
  group: String @deprecated(reason: "Use ...on syntax from specific types")

  """The last run status of this node"""
  lastRunStatus: String

  """
  True if the node matches a selector method, rather than matching via graph traversal
  """
  matchesMethod: Boolean

  """The materialization type"""
  materializationType: String @deprecated(reason: "Use ...on syntax from specific types")

  """The user-supplied name of this particular node"""
  name: String

  """the nodes this node depends on"""
  parentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The project id of this node"""
  projectId: BigInt!

  """the public nodes this resource depends on"""
  publicParentIds: [String!]! @deprecated(reason: "Use ...on syntax from specific types")

  """The resource type of this node"""
  resourceType: ResourceNodeType!

  """The package schema of this node"""
  schema: String @deprecated(reason: "Use ...on syntax from specific types")

  """The tags associated with this node"""
  tags: [String!]!

  """The unique ID of this node"""
  uniqueId: String!

  """The version of this node"""
  version: String @deprecated(reason: "Use ...on syntax from specific types")
}

type TestMetadata {
  columnName: String
  kwargs: JSONObject
  name: String
  namespace: String
}

type TestNode implements CloudArtifactInterface & NodeInterface {
  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  accountId: BigInt!

  """The name of the column that the test pertains to"""
  columnName: String

  """The ISO timestamp when this test completed compilation"""
  compileCompletedAt: DateTime

  """The ISO timestamp when this test began compilation"""
  compileStartedAt: DateTime

  """The compiled code of this test"""
  compiledCode: String

  """The compiled sql of this test"""
  compiledSql: String

  """The version of dbt used to produce this node"""
  dbtVersion: String

  """The list of nodes this test depends on"""
  dependsOn: [String!]!

  """The user-supplied description for this node"""
  description: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  environmentId: BigInt!

  """
  The error message in the case of state being "error"
  """
  error: String

  """The ISO timestamp when this test finished running"""
  executeCompletedAt: DateTime

  """The ISO timestamp when this test began running"""
  executeStartedAt: DateTime

  """The total time elapsed during the execution of this test"""
  executionTime: Float

  """The failure result"""
  fail: Boolean

  """The identifier of the run step that generated this test"""
  invocationId: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  jobId: BigInt!

  """The language of this test"""
  language: String

  """The key-value store containing metadata relevant to this node"""
  meta: JSONObject

  """The user-supplied name of this particular node"""
  name: String

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  projectId: BigInt!

  """The raw code of this test"""
  rawCode: String

  """The raw sql of this test"""
  rawSql: String

  """The resource type of this node"""
  resourceType: String!

  """
  The elapsed time of the specific run step (dbt run) that generated this test node
  """
  runElapsedTime: Float

  """
  The timestamp when the run step (dbt run) was completed, ISO formatted timestamp
  """
  runGeneratedAt: DateTime

  """
  The unique ID of the account in dbt Cloud that this node was generated for
  """
  runId: BigInt!

  """The skipped result"""
  skip: Boolean

  """
  The test results. Can be one of, in order of severity, "error", "fail", "warn", "pass"
  """
  state: String

  """
  Status details the results of a test. For errors, it reads "ERROR". For other test results, it represents the number of rows that contribute to the test results
  """
  status: String

  """The tags associated with this node"""
  tags: [String!]

  """The thread that ran the execution of this test"""
  threadId: String

  """The unique ID of this node"""
  uniqueId: String!

  """The warning result"""
  warn: Boolean
}

"""The type of test"""
enum TestType {
  GENERIC_DATA_TEST
  SINGULAR_DATA_TEST
  UNIT_TEST
}

"""
The period component of the freshness SLA (examples: minute, hour, day)
"""
enum TimePeriod {
  day
  hour
  minute
}