[tool.poetry]
name = "metaphor-connectors"
version = "0.11.91"
license = "Apache-2.0"
description = "A collection of Python-based 'connectors' that extract metadata from various sources to ingest into the Metaphor app."
authors = ["Metaphor <dev@metaphor.io>"]
readme = "README.md"
homepage = "https://metaphor.io"
repository = "https://github.com/MetaphorData/connectors"
packages = [
    { include = "metaphor" },
]

[tool.poetry.scripts]
metaphor = 'metaphor.__main__:main'

[tool.poetry.dependencies]
asyncpg = { version = "^0.25.0", optional = true }
aws-assume-role-lib = "^2.10.0"
boto3 = "^1.24.20"
botocore = "^1.27.20"
canonicaljson = "^1.4.0"
coverage = "^6.5.0"
databricks-cli = "^0.17.3"
fastjsonschema = "^2.15.1"
GitPython = "^3.1.0"
google-cloud-bigquery = { version = "^2.34.4", optional = true }
google-cloud-logging = { version = "^3.1.0", optional = true }
lkml = { version = "^1.2.0", optional = true }
looker-sdk = { version = "^22.4.0", optional = true }
metaphor-models = "^0.17.0"
metaphor-sqllineage = { version = "^1.3.6", optional = true }
msal = { version = "^1.17.0", optional = true }
pydantic = "~=1.9.0"
python = ">=3.7,<3.11"  # See https://github.com/googleapis/python-bigquery/issues/856
python-dateutil = "^2.8.1"
PyYAML = "^6.0"
requests = "^2.27.1"
smart-open = "^5.0.0"
snowflake-connector-python = { version = "~=2.7.0", optional = true }
sql-metadata = { version = "^2.6.0", optional = true }
tableauserverclient = { version = "^0.17.0", optional = true }
thoughtspot-rest-api-sdk = { version = "~=1.11.0", optional = true }

[tool.poetry.extras]
all = [
  "asyncpg",
  "databricks-cli",
  "GitPython",
  "google-cloud-bigquery",
  "google-cloud-logging",
  "lkml",
  "looker-sdk",
  "metaphor-sqllineage",
  "msal",
  "pyserde",
  "snowflake-connector-python",
  "sql-metadata",
  "tableauserverclient",
  "thoughtspot-rest-api-sdk",
]
bigquery = ["google-cloud-bigquery", "google-cloud-logging", "sql-metadata"]
dbt = []
looker = ["GitPython", "lkml", "looker-sdk", "sql-metadata"]
metabase = ["sql-metadata"]
postgresql = ["asyncpg"]
power_bi = ["msal", "sql-metadata"]
redshift = ["asyncpg", "metaphor-sqllineage"]
snowflake = ["snowflake-connector-python", "sql-metadata"]
synapse = ["msal"]
tableau = ["tableauserverclient"]
throughtspot = ["thoughtspot-rest-api-sdk"]
unity_catalog = ["databricks-cli"]

[tool.poetry.dev-dependencies]
apache-airflow = "^2.4.1"
bandit = "^1.7.2"
black = "^22.1"
datamodel-code-generator = { extras = ["http"], version = "^0.11.14" }
flake8 = "^4.0.1"
freezegun = "^1.1.0"
isort = "^5.8.0"
mypy = "^0.961"
pytest = "^6.2.2"
pytest-asyncio = "^0.18.0"
pytest-cov = "^3.0.0"
types-attrs = "^19.1.0"
types-freezegun = "^0.1.4"
types-pytz = "^2021.3.4"
types-PyYAML = "^6.0.4"
types-requests = "^2.25.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "strict"

[tool.black]
exclude = "^/(metaphor/dbt/generated/.+)"

[tool.isort]
profile = "black"
extend_skip = [
  ".serverless",
  "dbt_manifest.py",
  "dbt_catalog.py"
]

[tool.mypy]
exclude = ["venv"]
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.bandit]
exclude_dirs = ["venv"]
skips = ['B101', 'B106', 'B608']
