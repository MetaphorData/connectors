{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json",
    "dbt_version": "1.8.0",
    "generated_at": "2024-05-28T21:23:19.449154Z",
    "invocation_id": "3a7cd1e1-3f19-4a52-b28b-bbc3645768de",
    "env": {}
  },
  "results": [
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.333818Z",
          "completed_at": "2024-05-28T21:23:19.345665Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.346055Z",
          "completed_at": "2024-05-28T21:23:19.346069Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.013495922088623047,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.raw_bike_hires",
      "compiled": true,
      "compiled_code": "SELECT \n    rental_id\n    , duration as duration_seconds\n    , duration / 60 as duration_minutes\n    , bike_id\n    , start_date\n    , start_station_id\n    , start_station_name\n    , end_date\n    , end_station_id\n    , end_station_name\nFROM  DEMO_DB.berlin_bicycles.cycle_hire\nWHERE EXTRACT(year from start_date) = 2017",
      "relation_name": "DEMO_DB.METAPHOR.raw_bike_hires"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.347993Z",
          "completed_at": "2024-05-28T21:23:19.352290Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.352605Z",
          "completed_at": "2024-05-28T21:23:19.352611Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.005464076995849609,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.raw_bike_stations",
      "compiled": true,
      "compiled_code": "SELECT \n    id\n    , name as station_name\n    , bikes_count\n    , docks_count\n    , install_date\n    , removal_date\nFROM  DEMO_DB.berlin_bicycles.cycle_stations\nWHERE install_date < '2017-01-01' and (removal_date < '2018-01-01' or removal_date is null)",
      "relation_name": "DEMO_DB.METAPHOR.raw_bike_stations"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.354313Z",
          "completed_at": "2024-05-28T21:23:19.357397Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.357738Z",
          "completed_at": "2024-05-28T21:23:19.357744Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.004314899444580078,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "snapshot.london_bike_analysis.cycle_hire_snapshot",
      "compiled": true,
      "compiled_code": "\n\n\nselect * from DEMO_DB.berlin_bicycles.cycle_hire",
      "relation_name": "DEMO_DB.snapshots.cycle_hire_snapshot"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.359239Z",
          "completed_at": "2024-05-28T21:23:19.362120Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.362409Z",
          "completed_at": "2024-05-28T21:23:19.362415Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.0038330554962158203,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.cleaned_bike_rides",
      "compiled": true,
      "compiled_code": "-- Adding extra fields including if the bike was rented during peak time \nSELECT\n    SUM(duration_minutes) as total_minutes\n    , COUNT(rental_id) as total_bike_hires\n    , ROUND(SUM(duration_minutes) / COUNT(rental_id), 2) AS average_duration\n    , EXTRACT(month from start_date) as month\n    , CASE\n        WHEN EXTRACT(HOUR from TO_TIMESTAMP(start_date)) >= 6 AND EXTRACT(HOUR from TO_TIMESTAMP(start_date)) <= 10 THEN 'Morning Peak'\n        WHEN EXTRACT(HOUR from TO_TIMESTAMP(start_date)) >= 16 AND EXTRACT(HOUR from TO_TIMESTAMP(start_date)) <= 19 THEN 'Evening Peak'\n        ELSE 'Off-Peak'\n      END AS start_peak_travel\n    , IFF(start_station_id = end_station_id, True, False) as same_station_flag\n    , start_station_id\n    , start_station_name\n    , end_station_id\n    , end_station_name\nFROM DEMO_DB.METAPHOR.raw_bike_hires\nGROUP BY 4,5,6,7,8,9,10\nORDER BY total_minutes DESC",
      "relation_name": "DEMO_DB.METAPHOR.cleaned_bike_rides"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.364153Z",
          "completed_at": "2024-05-28T21:23:19.368713Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.369006Z",
          "completed_at": "2024-05-28T21:23:19.369012Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.0057981014251708984,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.dbt_utils_fewer_rows_than_raw_bike_hires_ref_raw_bike_stations_.ffa7ccfb39",
      "compiled": true,
      "compiled_code": "\n\n\n\nwith a as (\n\n    select count(*) as count_our_model from DEMO_DB.METAPHOR.raw_bike_hires\n\n),\nb as (\n\n    select count(*) as count_comparison_model from DEMO_DB.METAPHOR.raw_bike_stations\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.370300Z",
          "completed_at": "2024-05-28T21:23:19.372867Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.373106Z",
          "completed_at": "2024-05-28T21:23:19.373111Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.0034008026123046875,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.cleaned_bike_rides_from_snapshot",
      "compiled": true,
      "compiled_code": "-- Adding extra fields including if the bike was rented during peak time \nSELECT\n    SUM(duration) as total_seconds\n    , COUNT(rental_id) as total_bike_hires\n    , ROUND(SUM(duration) / COUNT(rental_id), 2) AS average_duration\n    , EXTRACT(month from start_date) as month\n    , CASE\n        WHEN EXTRACT(HOUR from TO_TIMESTAMP(start_date)) >= 6 AND EXTRACT(HOUR from TO_TIMESTAMP(start_date)) <= 10 THEN 'Morning Peak'\n        WHEN EXTRACT(HOUR from TO_TIMESTAMP(start_date)) >= 16 AND EXTRACT(HOUR from TO_TIMESTAMP(start_date)) <= 19 THEN 'Evening Peak'\n        ELSE 'Off-Peak'\n      END AS start_peak_travel\n    , IFF(start_station_id = end_station_id, True, False) as same_station_flag\n    , start_station_id\n    , start_station_name\n    , end_station_id\n    , end_station_name\nFROM DEMO_DB.snapshots.cycle_hire_snapshot\nGROUP BY 4,5,6,7,8,9,10\nORDER BY total_seconds DESC",
      "relation_name": "DEMO_DB.METAPHOR.cleaned_bike_rides_from_snapshot"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.374276Z",
          "completed_at": "2024-05-28T21:23:19.377754Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.377978Z",
          "completed_at": "2024-05-28T21:23:19.377983Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.004240274429321289,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.rides_by_month_2017",
      "compiled": true,
      "compiled_code": "WITH stations AS (\n\n    SELECT *\n    FROM DEMO_DB.METAPHOR.raw_bike_stations\n\n),\n\nrides AS (\n\n    SELECT *\n    FROM DEMO_DB.METAPHOR.cleaned_bike_rides\n\n),\n\nstart_stat_join AS (\n\n    SELECT rides.*\n    , stations.bikes_count as start_station_bikes_count\n    , stations.docks_count as start_station_docks_count\n    , stations.install_date as start_station_install_date\n    FROM rides\n    LEFT JOIN stations\n    ON rides.start_station_id = stations.id\n)\n\nSELECT \n    total_minutes \n    , total_bike_hires \n    , average_duration \n    , month \n    , start_peak_travel\n    , same_station_flag\n    , start_station_id\n    , start_station_name\n    , start_station_bikes_count \n    , start_station_docks_count \n    , start_station_install_date \n    , end_station_id\n    , end_station_name\n    , stations.bikes_count as end_station_bikes_count\n    , stations.docks_count as end_station_docks_count\n    , stations.install_date as end_station_install_date\nFROM start_stat_join\nLEFT JOIN stations\nON start_stat_join.end_station_id = stations.id",
      "relation_name": "DEMO_DB.METAPHOR.rides_by_month_2017"
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.379143Z",
          "completed_at": "2024-05-28T21:23:19.413337Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.413567Z",
          "completed_at": "2024-05-28T21:23:19.413573Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.03499293327331543,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.accepted_values_cleaned_bike_rides_start_peak_travel__Evening_Peak__Off_Peak__Morning_Peak.014130c1a3",
      "compiled": true,
      "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        start_peak_travel as value_field,\n        count(*) as n_records\n\n    from DEMO_DB.METAPHOR.cleaned_bike_rides\n    group by start_peak_travel\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Evening Peak','Off-Peak','Morning Peak'\n)\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.414582Z",
          "completed_at": "2024-05-28T21:23:19.417238Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.417433Z",
          "completed_at": "2024-05-28T21:23:19.417437Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.003306150436401367,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.dbt_utils_at_least_one_cleaned_bike_rides_month.909766ad33",
      "compiled": true,
      "compiled_code": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(month) as filler_column\n\n    from DEMO_DB.METAPHOR.cleaned_bike_rides\n\n    having count(month) = 0\n\n) validation_errors\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.418418Z",
          "completed_at": "2024-05-28T21:23:19.420879Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.421076Z",
          "completed_at": "2024-05-28T21:23:19.421080Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.003122091293334961,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.dbt_utils_at_least_one_cleaned_bike_rides_total_bike_hires.db70dcef4a",
      "compiled": true,
      "compiled_code": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(total_bike_hires) as filler_column\n\n    from DEMO_DB.METAPHOR.cleaned_bike_rides\n\n    having count(total_bike_hires) = 0\n\n) validation_errors\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.421994Z",
          "completed_at": "2024-05-28T21:23:19.424420Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.424620Z",
          "completed_at": "2024-05-28T21:23:19.424623Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.0030591487884521484,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.dbt_utils_at_least_one_cleaned_bike_rides_total_minutes.8432437e46",
      "compiled": true,
      "compiled_code": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(total_minutes) as filler_column\n\n    from DEMO_DB.METAPHOR.cleaned_bike_rides\n\n    having count(total_minutes) = 0\n\n) validation_errors\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.425607Z",
          "completed_at": "2024-05-28T21:23:19.430280Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.430474Z",
          "completed_at": "2024-05-28T21:23:19.430478Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.00537419319152832,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.not_null_cleaned_bike_rides_month.e937c898a1",
      "compiled": true,
      "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom DEMO_DB.METAPHOR.cleaned_bike_rides\nwhere month is null\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.431387Z",
          "completed_at": "2024-05-28T21:23:19.434500Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.434694Z",
          "completed_at": "2024-05-28T21:23:19.434697Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.0037338733673095703,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.not_null_cleaned_bike_rides_same_station_flag.6293c4e2a8",
      "compiled": true,
      "compiled_code": "\n    \n    \n\n\n\nselect same_station_flag\nfrom DEMO_DB.METAPHOR.cleaned_bike_rides\nwhere same_station_flag is null\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.435609Z",
          "completed_at": "2024-05-28T21:23:19.438024Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.438212Z",
          "completed_at": "2024-05-28T21:23:19.438215Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.003031015396118164,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.not_null_cleaned_bike_rides_start_station_name.4eec63218d",
      "compiled": true,
      "compiled_code": "\n    \n    \n\n\n\nselect start_station_name\nfrom DEMO_DB.METAPHOR.cleaned_bike_rides\nwhere start_station_name is null\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.439125Z",
          "completed_at": "2024-05-28T21:23:19.441661Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.441853Z",
          "completed_at": "2024-05-28T21:23:19.441856Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.003158092498779297,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.not_null_cleaned_bike_rides_total_bike_hires.848927fb8f",
      "compiled": true,
      "compiled_code": "\n    \n    \n\n\n\nselect total_bike_hires\nfrom DEMO_DB.METAPHOR.cleaned_bike_rides\nwhere total_bike_hires is null\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.442767Z",
          "completed_at": "2024-05-28T21:23:19.445151Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.445335Z",
          "completed_at": "2024-05-28T21:23:19.445339Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.003000020980834961,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "test.london_bike_analysis.not_null_cleaned_bike_rides_total_minutes.1c7c80a2d6",
      "compiled": true,
      "compiled_code": "\n    \n    \n\n\n\nselect total_minutes\nfrom DEMO_DB.METAPHOR.cleaned_bike_rides\nwhere total_minutes is null\n\n\n",
      "relation_name": null
    },
    {
      "status": "success",
      "timing": [
        {
          "name": "compile",
          "started_at": "2024-05-28T21:23:19.446239Z",
          "completed_at": "2024-05-28T21:23:19.448006Z"
        },
        {
          "name": "execute",
          "started_at": "2024-05-28T21:23:19.448208Z",
          "completed_at": "2024-05-28T21:23:19.448211Z"
        }
      ],
      "thread_id": "Thread-1",
      "execution_time": 0.002393960952758789,
      "adapter_response": {},
      "message": null,
      "failures": null,
      "unique_id": "model.london_bike_analysis.rides_by_month_start_station_2017",
      "compiled": true,
      "compiled_code": "SELECT \n    SUM(total_minutes) AS total_minutes\n    , ROUND(SUM(total_minutes) / 60 ,2) AS total_hours\n    , SUM(total_bike_hires) AS total_bike_hires\n    , ROUND(SUM(total_minutes) / SUM(total_bike_hires), 2) AS average_duration_in_minutes\n    , month\n    , start_peak_travel\n    , same_station_flag\n    , start_station_id\n    , start_station_name\n    , start_station_bikes_count\n    , start_station_docks_count\n    , start_station_install_date\nFROM DEMO_DB.METAPHOR.rides_by_month_2017\nGROUP BY 5,6,7,8,9,10,11,12\nORDER BY total_bike_hires DESC",
      "relation_name": "DEMO_DB.METAPHOR.rides_by_month_start_station_2017"
    }
  ],
  "elapsed_time": 1.1765928268432617,
  "args": {
    "use_colors": true,
    "macro_debugging": false,
    "send_anonymous_usage_stats": true,
    "log_format_file": "debug",
    "select": [],
    "print": true,
    "source_freshness_run_project_hooks": false,
    "enable_legacy_logger": false,
    "which": "generate",
    "write_json": true,
    "compile": true,
    "vars": {},
    "profiles_dir": "/Users/marslan/.dbt",
    "defer": false,
    "empty_catalog": false,
    "log_level": "info",
    "version_check": true,
    "strict_mode": false,
    "introspect": true,
    "project_dir": "/Users/marslan/Metaphor/dbt/ride_share",
    "use_colors_file": true,
    "favor_state": false,
    "log_format": "default",
    "partial_parse_file_diff": true,
    "log_file_max_bytes": 10485760,
    "warn_error_options": {
      "include": [],
      "exclude": []
    },
    "indirect_selection": "eager",
    "log_level_file": "debug",
    "cache_selected_only": false,
    "require_resource_names_without_spaces": false,
    "static_parser": true,
    "require_explicit_package_overrides_for_builtin_materializations": true,
    "invocation_command": "dbt docs generate",
    "static": false,
    "show_resource_report": false,
    "exclude": [],
    "partial_parse": true,
    "printer_width": 80,
    "log_path": "/Users/marslan/Metaphor/dbt/ride_share/logs",
    "populate_cache": true,
    "quiet": false
  }
}
