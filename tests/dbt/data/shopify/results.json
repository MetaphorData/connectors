[
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents an order in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "The ID of the app that created the order.",
          "fieldPath": "app_id"
        },
        {
          "documentation": "The street address of the billing address.",
          "fieldPath": "billing_address_address_1"
        },
        {
          "documentation": "An optional additional field for the street address of the billing address.",
          "fieldPath": "billing_address_address_2"
        },
        {
          "documentation": "The city, town, or village of the billing address.",
          "fieldPath": "billing_address_city"
        },
        {
          "documentation": "The company of the person associated with the billing address.",
          "fieldPath": "billing_address_company"
        },
        {
          "documentation": "The name of the country of the billing address.",
          "fieldPath": "billing_address_country"
        },
        {
          "documentation": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "fieldPath": "billing_address_country_code"
        },
        {
          "documentation": "The first name of the person associated with the payment method.",
          "fieldPath": "billing_address_first_name"
        },
        {
          "documentation": "The last name of the person associated with the payment method.",
          "fieldPath": "billing_address_last_name"
        },
        {
          "documentation": "The latitude of the billing address.",
          "fieldPath": "billing_address_latitude"
        },
        {
          "documentation": "The longitude of the billing address.",
          "fieldPath": "billing_address_longitude"
        },
        {
          "documentation": "The full name of the person associated with the payment method.",
          "fieldPath": "billing_address_name"
        },
        {
          "documentation": "The phone number at the billing address.",
          "fieldPath": "billing_address_phone"
        },
        {
          "documentation": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "fieldPath": "billing_address_province"
        },
        {
          "documentation": "The two-letter abbreviation of the region of the billing address.",
          "fieldPath": "billing_address_province_code"
        },
        {
          "documentation": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "fieldPath": "billing_address_zip"
        },
        {
          "documentation": "The IP address of the browser used by the customer when they placed the order.",
          "fieldPath": "browser_ip"
        },
        {
          "documentation": "Whether the customer consented to receive email updates from the shop.",
          "fieldPath": "buyer_accepts_marketing"
        },
        {
          "documentation": "The reason why the order was canceled.",
          "fieldPath": "cancel_reason"
        },
        {
          "documentation": "The date and time when the order was canceled.",
          "fieldPath": "cancelled_at"
        },
        {
          "documentation": "The ID of the cart that's associated with the order.",
          "fieldPath": "cart_token"
        },
        {
          "documentation": "The date and time when the order was closed.",
          "fieldPath": "closed_at"
        },
        {
          "documentation": "The autogenerated date and time when the order was created in Shopify.",
          "fieldPath": "created_at"
        },
        {
          "documentation": "The three-letter code for the shop currency.",
          "fieldPath": "currency"
        },
        {
          "documentation": "The ID of the order's customer.",
          "fieldPath": "customer_id"
        },
        {
          "documentation": "The customer's email address.",
          "fieldPath": "email"
        },
        {
          "documentation": "The status of payments associated with the order. Can only be set when the order is created",
          "fieldPath": "financial_status"
        },
        {
          "documentation": "The order's status in terms of fulfilled line items.",
          "fieldPath": "fulfillment_status"
        },
        {
          "documentation": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "fieldPath": "id"
        },
        {
          "documentation": "The URL for the page where the buyer landed when they entered the shop.",
          "fieldPath": "landing_site_base_url"
        },
        {
          "documentation": "The ID of the physical location where the order was processed.",
          "fieldPath": "location_id"
        },
        {
          "documentation": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "fieldPath": "name"
        },
        {
          "documentation": "An optional note that a shop owner can attach to the order.",
          "fieldPath": "note"
        },
        {
          "documentation": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "fieldPath": "number"
        },
        {
          "documentation": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "fieldPath": "order_number"
        },
        {
          "documentation": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "fieldPath": "processed_at"
        },
        {
          "documentation": "How the payment was processed.",
          "fieldPath": "processing_method"
        },
        {
          "documentation": "The website where the customer clicked a link to the shop.",
          "fieldPath": "referring_site"
        },
        {
          "documentation": "The street address of the shipping address.",
          "fieldPath": "shipping_address_address_1"
        },
        {
          "documentation": "An optional additional field for the street address of the shipping address.",
          "fieldPath": "shipping_address_address_2"
        },
        {
          "documentation": "The city, town, or village of the shipping address.",
          "fieldPath": "shipping_address_city"
        },
        {
          "documentation": "The company of the person associated with the shipping address.",
          "fieldPath": "shipping_address_company"
        },
        {
          "documentation": "The name of the country of the shipping address.",
          "fieldPath": "shipping_address_country"
        },
        {
          "documentation": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "fieldPath": "shipping_address_country_code"
        },
        {
          "documentation": "The first name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_first_name"
        },
        {
          "documentation": "The last name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_last_name"
        },
        {
          "documentation": "The latitude of the shipping address.",
          "fieldPath": "shipping_address_latitude"
        },
        {
          "documentation": "The longitude of the shipping address.",
          "fieldPath": "shipping_address_longitude"
        },
        {
          "documentation": "The full name of the person associated with the payment method.",
          "fieldPath": "shipping_address_name"
        },
        {
          "documentation": "The phone number at the shipping address.",
          "fieldPath": "shipping_address_phone"
        },
        {
          "documentation": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_province"
        },
        {
          "documentation": "The two-letter abbreviation of the region of the shipping address.",
          "fieldPath": "shipping_address_province_code"
        },
        {
          "documentation": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_zip"
        },
        {
          "documentation": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "fieldPath": "source_name"
        },
        {
          "documentation": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "fieldPath": "subtotal_price"
        },
        {
          "documentation": "Whether taxes are included in the order subtotal.",
          "fieldPath": "taxes_included"
        },
        {
          "documentation": "Whether this is a test order.",
          "fieldPath": "test"
        },
        {
          "documentation": "A unique token for the order.",
          "fieldPath": "token"
        },
        {
          "documentation": "The total discounts applied to the price of the order in the shop currency.",
          "fieldPath": "total_discounts"
        },
        {
          "documentation": "The sum of all line item prices in the shop currency.",
          "fieldPath": "total_line_items_price"
        },
        {
          "documentation": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "fieldPath": "total_price"
        },
        {
          "documentation": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "fieldPath": "total_tax"
        },
        {
          "documentation": "The sum of all line item weights in grams.",
          "fieldPath": "total_weight"
        },
        {
          "documentation": "The date and time (ISO 8601 format) when the order was last modified.",
          "fieldPath": "updated_at"
        },
        {
          "documentation": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "fieldPath": "user_id"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.order",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a customer in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "Whether the customer has consented to receive marketing material via email.",
          "fieldPath": "accepts_marketing"
        },
        {
          "documentation": "The date and time when the customer was created.",
          "fieldPath": "created_at"
        },
        {
          "documentation": "The default address for the customer.",
          "fieldPath": "default_address_id"
        },
        {
          "documentation": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "fieldPath": "email"
        },
        {
          "documentation": "The customer's first name.",
          "fieldPath": "first_name"
        },
        {
          "documentation": "A unique identifier for the customer.",
          "fieldPath": "id"
        },
        {
          "documentation": "The customer's last name.",
          "fieldPath": "last_name"
        },
        {
          "documentation": "The number of orders associated with this customer.",
          "fieldPath": "orders_count"
        },
        {
          "documentation": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "fieldPath": "phone"
        },
        {
          "documentation": "The state of the customer's account with a shop.",
          "fieldPath": "state"
        },
        {
          "documentation": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "fieldPath": "tax_exempt"
        },
        {
          "documentation": "The total amount of money that the customer has spent across their order history.",
          "fieldPath": "total_spent"
        },
        {
          "documentation": "The date and time when the customer information was last updated.",
          "fieldPath": "updated_at"
        },
        {
          "documentation": "Whether the customer has verified their email address.",
          "fieldPath": "verified_email"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.customer",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a line item for an order in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "fieldPath": "fulfillable_quantity"
        },
        {
          "documentation": "The service provider that's fulfilling the item.",
          "fieldPath": "fulfillment_service"
        },
        {
          "documentation": "How far along an order is in terms line items fulfilled.",
          "fieldPath": "fulfillment_status"
        },
        {
          "documentation": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "fieldPath": "gift_card"
        },
        {
          "documentation": "The weight of the item in grams.",
          "fieldPath": "grams"
        },
        {
          "documentation": "The ID of the line item.",
          "fieldPath": "id"
        },
        {
          "documentation": "The name of the product variant.",
          "fieldPath": "name"
        },
        {
          "documentation": "The ID of the related order.",
          "fieldPath": "order_id"
        },
        {
          "documentation": "The price of the item before discounts have been applied in the shop currency.",
          "fieldPath": "price"
        },
        {
          "documentation": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "fieldPath": "product_id"
        },
        {
          "documentation": "The number of items that were purchased.",
          "fieldPath": "quantity"
        },
        {
          "documentation": "Whether the item requires shipping.",
          "fieldPath": "requires_shipping"
        },
        {
          "documentation": "The item's SKU (stock keeping unit).",
          "fieldPath": "sku"
        },
        {
          "documentation": "Whether the item was taxable.",
          "fieldPath": "taxable"
        },
        {
          "documentation": "The title of the product.",
          "fieldPath": "title"
        },
        {
          "documentation": "The total amount of the discount allocated to the line item in the shop currency.",
          "fieldPath": "total_discount"
        },
        {
          "documentation": "The ID of the product variant.",
          "fieldPath": "variant_id"
        },
        {
          "documentation": "The name of the item's supplier.",
          "fieldPath": "vendor"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.order_line",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a line item refund in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "The unique identifier of the line item in the refund.",
          "fieldPath": "id"
        },
        {
          "documentation": "TThe unique identifier of the location where the items will be restockedBD",
          "fieldPath": "location_id"
        },
        {
          "documentation": "The ID of the related line item in the order.",
          "fieldPath": "order_line_id"
        },
        {
          "documentation": "The quantity of the associated line item that was returned.",
          "fieldPath": "quantity"
        },
        {
          "documentation": "The ID of the related refund.",
          "fieldPath": "refund_id"
        },
        {
          "documentation": "How this refund line item affects inventory levels.",
          "fieldPath": "restock_type"
        },
        {
          "documentation": "Subtotal amount of the order line refund",
          "fieldPath": "subtotal"
        },
        {
          "documentation": "The total tax applied to the refund.",
          "fieldPath": "total_tax"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.order_line_refund",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a product in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "Whether the record has been deleted in the source system.",
          "fieldPath": "_fivetran_deleted"
        },
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "The date and time when the product was created.",
          "fieldPath": "created_at"
        },
        {
          "documentation": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "fieldPath": "handle"
        },
        {
          "documentation": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "fieldPath": "id"
        },
        {
          "documentation": "A categorization for the product used for filtering and searching products.",
          "fieldPath": "product_type"
        },
        {
          "documentation": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "fieldPath": "published_at"
        },
        {
          "documentation": "Whether the product is published to the Point of Sale channel.",
          "fieldPath": "published_scope"
        },
        {
          "documentation": "The name of the product.",
          "fieldPath": "title"
        },
        {
          "documentation": "The date and time when the product was last modified.",
          "fieldPath": "updated_at"
        },
        {
          "documentation": "The name of the product's vendor.",
          "fieldPath": "vendor"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.product",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a product variant in Shopify"
      ],
      "fieldDocumentations": [
        {
          "documentation": "The barcode, UPC, or ISBN number for the product.",
          "fieldPath": "barcode"
        },
        {
          "documentation": "The original price of the item before an adjustment or a sale.",
          "fieldPath": "compare_at_price"
        },
        {
          "documentation": "The date and time (ISO 8601 format) when the product variant was created.",
          "fieldPath": "created_at"
        },
        {
          "documentation": "The fulfillment service associated with the product variant.",
          "fieldPath": "fulfillment_service"
        },
        {
          "documentation": "The weight of the product variant in grams.",
          "fieldPath": "grams"
        },
        {
          "documentation": "The unique numeric identifier for the product variant.",
          "fieldPath": "id"
        },
        {
          "documentation": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "fieldPath": "image_id"
        },
        {
          "documentation": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "fieldPath": "inventory_item_id"
        },
        {
          "documentation": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "fieldPath": "inventory_management"
        },
        {
          "documentation": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "fieldPath": "inventory_policy"
        },
        {
          "documentation": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "fieldPath": "inventory_quantity"
        },
        {
          "documentation": "This property is deprecated. Use the InventoryLevel resource instead.",
          "fieldPath": "old_inventory_quantity"
        },
        {
          "documentation": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_1"
        },
        {
          "documentation": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_2"
        },
        {
          "documentation": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_3"
        },
        {
          "documentation": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "fieldPath": "position"
        },
        {
          "documentation": "The price of the product variant.",
          "fieldPath": "price"
        },
        {
          "documentation": "The unique numeric identifier for the product.",
          "fieldPath": "product_id"
        },
        {
          "documentation": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "fieldPath": "requires_shipping"
        },
        {
          "documentation": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "fieldPath": "sku"
        },
        {
          "documentation": "Whether a tax is charged when the product variant is sold.",
          "fieldPath": "taxable"
        },
        {
          "documentation": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.",
          "fieldPath": "tax_code"
        },
        {
          "documentation": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "fieldPath": "title"
        },
        {
          "documentation": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "fieldPath": "updated_at"
        },
        {
          "documentation": "The weight of the product variant in the unit system specified with weight_unit.",
          "fieldPath": "weight"
        },
        {
          "documentation": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "fieldPath": "weight_unit"
        },
        {
          "documentation": "The total shipping price set for the order.",
          "fieldPath": "total_shipping_price_set"
        },
        {
          "documentation": "The index associated with the order.",
          "fieldPath": "index"
        },
        {
          "documentation": "The total pre tax price of the order.",
          "fieldPath": "pre_tax_price"
        },
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.product_variant",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a transaction in Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The ID for the transaction.",
          "fieldPath": "transaction_id"
        },
        {
          "documentation": "The ID for the order that the transaction is associated with.",
          "fieldPath": "order_id"
        },
        {
          "documentation": "The ID associated with a refund in the refund table.",
          "fieldPath": "refund_id"
        },
        {
          "documentation": "The amount of money included in the transaction.",
          "fieldPath": "amount"
        },
        {
          "documentation": "The authorization code associated with the transaction.",
          "fieldPath": "authorization"
        },
        {
          "documentation": "The date and time when the transaction was created.",
          "fieldPath": "created_timestamp"
        },
        {
          "documentation": "The date and time when a transaction was processed.",
          "fieldPath": "processed_timestamp"
        },
        {
          "documentation": "The ID for the device.",
          "fieldPath": "device_id"
        },
        {
          "documentation": "The name of the gateway the transaction was issued through.",
          "fieldPath": "gateway"
        },
        {
          "documentation": "The origin of the transaction.",
          "fieldPath": "source_name"
        },
        {
          "documentation": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "fieldPath": "message"
        },
        {
          "documentation": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "fieldPath": "currency"
        },
        {
          "documentation": "The ID of the physical location where the transaction was processed.",
          "fieldPath": "location_id"
        },
        {
          "documentation": "The ID of an associated transaction.",
          "fieldPath": "parent_id"
        },
        {
          "documentation": "The response code from the address verification system.",
          "fieldPath": "payment_avs_result_code"
        },
        {
          "documentation": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "fieldPath": "payment_credit_card_bin"
        },
        {
          "documentation": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "fieldPath": "payment_cvv_result_code"
        },
        {
          "documentation": "The customer's credit card number, with most of the leading digits redacted.",
          "fieldPath": "payment_credit_card_number"
        },
        {
          "documentation": "The name of the company that issued the customer's credit card.",
          "fieldPath": "payment_credit_card_company"
        },
        {
          "documentation": "The transaction's type.",
          "fieldPath": "kind"
        },
        {
          "documentation": "A transaction receipt attached to the transaction by the gateway.",
          "fieldPath": "receipt"
        },
        {
          "documentation": "The ID of the adjustment.",
          "fieldPath": "currency_exchange_id"
        },
        {
          "documentation": "The difference between the amounts on the associated transaction and the parent transaction.",
          "fieldPath": "currency_exchange_adjustment"
        },
        {
          "documentation": "The amount of the parent transaction in the shop currency.",
          "fieldPath": "currency_exchange_original_amount"
        },
        {
          "documentation": "The amount of the associated transaction in the shop currency.",
          "fieldPath": "currency_exchange_final_amount"
        },
        {
          "documentation": "The shop currency.",
          "fieldPath": "currency_exchange_currency"
        },
        {
          "documentation": "A standardized error code, independent of the payment provider.",
          "fieldPath": "error_code"
        },
        {
          "documentation": "The status of the transaction.",
          "fieldPath": "status"
        },
        {
          "documentation": "Whether the transaction is a test transaction.",
          "fieldPath": "test"
        },
        {
          "documentation": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "fieldPath": "user_id"
        },
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.transaction",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents a refund within Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The unique numeric identifier for the refund.",
          "fieldPath": "id"
        },
        {
          "documentation": "Timestamp of the date when the refund was created.",
          "fieldPath": "created_at"
        },
        {
          "documentation": "Timestamp of the date when the refund was processed.",
          "fieldPath": "processed_at"
        },
        {
          "documentation": "User generated note attached to the refund.",
          "fieldPath": "note"
        },
        {
          "documentation": "Boolean indicating if the refund is a result of a restock.",
          "fieldPath": "restock"
        },
        {
          "documentation": "Reference to the user id which generated the refund.",
          "fieldPath": "user_id"
        },
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        },
        {
          "documentation": "Record representing total duties set for the refund.",
          "fieldPath": "total_duties_set"
        },
        {
          "documentation": "Reference to the order which the refund is associated.",
          "fieldPath": "order_id"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.refund",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "documentation": {
      "datasetDocumentations": [
        "Each record represents and adjustment to and order within Shopify."
      ],
      "fieldDocumentations": [
        {
          "documentation": "The unique numeric identifier for the order adjustment.",
          "fieldPath": "id"
        },
        {
          "documentation": "Reference to the order which the adjustment is associated.",
          "fieldPath": "order_id"
        },
        {
          "documentation": "Reference to the refund which the adjustment is associated.",
          "fieldPath": "refund_id"
        },
        {
          "documentation": "Amount of the adjustment.",
          "fieldPath": "amount"
        },
        {
          "documentation": "Tax amount applied to the order adjustment.",
          "fieldPath": "tax_amount"
        },
        {
          "documentation": "The kind of order adjustment (eg. refund, restock, etc.).",
          "fieldPath": "kind"
        },
        {
          "documentation": "The reason for the order adjustment.",
          "fieldPath": "reason"
        },
        {
          "documentation": "Amount set towards the order adjustment",
          "fieldPath": "amount_set"
        },
        {
          "documentation": "Tax amount set towards the order adjustment.",
          "fieldPath": "tax_amount_set"
        },
        {
          "documentation": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced"
        }
      ]
    },
    "logicalId": {
      "account": "metaphor",
      "name": "dev_db.shopify.order_adjustment",
      "platform": "SNOWFLAKE"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with calendar as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__calendar\n    where cast(\n    date_trunc('month', date_day)\n as date) = date_day\n\n), customers as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__customers\n\n), orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__orders\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        \n    date_trunc('month', first_order_timestamp)\n as cohort_month\n    from calendar\n    inner join customers\n        on cast(\n    date_trunc('month', first_order_timestamp)\n as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(\n    date_trunc('month', created_timestamp)\n as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as \n    varchar\n), '') || '-' || coalesce(cast(customer_id as \n    varchar\n), '') || '-' || coalesce(cast(source_relation as \n    varchar\n), '') as \n    varchar\n)) as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key",
      "description": "Each record represents a customer's performance in a calendar month.",
      "fields": [
        {
          "description": "The month the cohort belongs to, i.e the first month the customer had an order.",
          "fieldPath": "cohort_month",
          "nativeType": "Not Set"
        },
        {
          "description": "The 'number' of the `date_month` of the record, i.e. how many months from their start month this cohort occurred",
          "fieldPath": "cohort_month_number",
          "nativeType": "Not Set"
        },
        {
          "description": "Unique key representing a customer in a given month.",
          "fieldPath": "customer_cohort_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the related customer.",
          "fieldPath": "customer_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The calendar month the customer stats relate to.",
          "fieldPath": "date_month",
          "nativeType": "Not Set"
        },
        {
          "description": "The timestamp of the customer's first order.",
          "fieldPath": "first_order_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "Number of line items purchased in the `date_month`",
          "fieldPath": "line_item_count_in_month",
          "nativeType": "Not Set"
        },
        {
          "description": "Number of line items purchased up until and including this `date_month`.",
          "fieldPath": "line_item_count_lifetime",
          "nativeType": "Not Set"
        },
        {
          "description": "Number of orders purchased in the `date_month`",
          "fieldPath": "order_count_in_month",
          "nativeType": "Not Set"
        },
        {
          "description": "Number of orders purchased up until and including this `date_month`.",
          "fieldPath": "order_count_lifetime",
          "nativeType": "Not Set"
        },
        {
          "description": "Total amount (in currency) purchased in the `date_month`",
          "fieldPath": "total_price_in_month",
          "nativeType": "Not Set"
        },
        {
          "description": "Total amount (in currency) up until and including this `date_month`.",
          "fieldPath": "total_price_lifetime",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__date_trunc"
          ],
          "description": "",
          "name": "date_trunc",
          "packageName": "dbt_utils",
          "sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
          "uniqueId": "macro.dbt_utils.date_trunc"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__surrogate_key"
          ],
          "description": "",
          "name": "surrogate_key",
          "packageName": "dbt_utils",
          "sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
          "uniqueId": "macro.dbt_utils.surrogate_key"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~38EE67AE79CCDED00708E179CF56EA73",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt_utils.date_trunc('month','date_day') }} as date) = date_day\n\n), customers as (\n\n    select *\n    from {{ ref('shopify__customers') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        {{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as cohort_month\n    from calendar\n    inner join customers\n        on cast({{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast({{ dbt_utils.date_trunc('month', 'created_timestamp') }} as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    {% set partition_string = 'partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row' %}\n\n    select\n        *,\n        sum(total_price_in_month) over ({{ partition_string }}) as total_price_lifetime,\n        sum(order_count_in_month) over ({{ partition_string }}) as order_count_lifetime,\n        sum(line_item_count_in_month) over ({{ partition_string }}) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        {{ dbt_utils.surrogate_key(['date_month','customer_id','source_relation']) }} as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~36DA5F70C3449831EE263AE8758F8ACA",
        "VIRTUAL_VIEW~4377000DD4185096E91BE88D87DF2B6A",
        "VIRTUAL_VIEW~0336208A74394791789B6D0638402D2F"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [
            "customer_cohort_id"
          ],
          "dependsOnMacros": [
            "macro.dbt.test_unique"
          ],
          "name": "unique_shopify__customer_cohorts_customer_cohort_id",
          "sql": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom DEV_DB.DBT_DEV_shopify.shopify__customer_cohorts\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n",
          "uniqueId": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc"
        },
        {
          "columns": [
            "customer_cohort_id"
          ],
          "dependsOnMacros": [
            "macro.dbt.test_not_null"
          ],
          "name": "not_null_shopify__customer_cohorts_customer_cohort_id",
          "sql": "\n    \n    \n\nselect *\nfrom DEV_DB.DBT_DEV_shopify.shopify__customer_cohorts\nwhere customer_cohort_id is null\n\n\n",
          "uniqueId": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__customer_cohorts",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order\n\n), transactions as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__transactions\n    where lower(status) = 'success'\n/*\n), transaction_refund_adjustment as (\n\n    select\n        *,\n        case when lower(kind) = 'refund'\n            then currency_exchange_calculated_amount * -1\n            else currency_exchange_calculated_amount\n                end as adjusted_amount\n    from transactions\n*/\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),customers as (\n\n    select \n        \"_FIVETRAN_SYNCED\",\n  \"HAS_ACCEPTED_MARKETING\",\n  \"CREATED_TIMESTAMP\",\n  \"DEFAULT_ADDRESS_ID\",\n  \"EMAIL\",\n  \"FIRST_NAME\",\n  \"CUSTOMER_ID\",\n  \"LAST_NAME\",\n  \"PHONE\",\n  \"ACCOUNT_STATE\",\n  \"IS_TAX_EXEMPT\",\n  \"UPDATED_TIMESTAMP\",\n  \"IS_VERIFIED_EMAIL\",\n  \"SOURCE_RELATION\"\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__customer\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), joined as (\n\n    select \n        customers.*,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        coalesce(orders.average_order_value, 0) as average_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_amount,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders\n    from customers\n    left join orders\n        using (customer_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "description": "Each record represents a customer in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer has consented to receive marketing material via email.",
          "fieldPath": "has_accepted_marketing",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the customer was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The default address for the customer.",
          "fieldPath": "default_address_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "fieldPath": "email",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's first name.",
          "fieldPath": "first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique identifier for the customer.",
          "fieldPath": "customer_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's last name.",
          "fieldPath": "last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The number of orders associated with this customer.",
          "fieldPath": "lifetime_count_orders",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "fieldPath": "phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The state of the customer's account with a shop.",
          "fieldPath": "account_state",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "fieldPath": "is_tax_exempt",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the customer information was last updated.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer has verified their email address.",
          "fieldPath": "is_verified_email",
          "nativeType": "Not Set"
        },
        {
          "description": "The timestamp the customer completed their first order.",
          "fieldPath": "first_order_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The timestamp the customer completed their most recent order.",
          "fieldPath": "most_recent_order_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The average order value for the customer.",
          "fieldPath": "average_order_value",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of money that the customer has spent on orders across their order history.",
          "fieldPath": "lifetime_total_spent",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of money that the customer has been refunded on orders across their order history.",
          "fieldPath": "lifetime_total_refunded",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of money (minus refunds) that the customer has spent across their order history.",
          "fieldPath": "lifetime_total_amount",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__star"
          ],
          "description": "",
          "name": "star",
          "packageName": "dbt_utils",
          "sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}",
          "uniqueId": "macro.dbt_utils.star"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~0BCAF1695F5EF4654F6298B18B6FD6EA",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with customers as (\n\n    select \n        {{ dbt_utils.star(from=ref('stg_shopify__customer'), except=[\"orders_count\", \"total_spent\"]) }}\n    from {{ var('shopify_customer') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__customers__order_aggregates' )}}\n\n), joined as (\n\n    select \n        customers.*,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        coalesce(orders.average_order_value, 0) as average_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_amount,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders\n    from customers\n    left join orders\n        using (customer_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~825BC664F52EBB66F2AA9A1E976F2D21",
        "VIRTUAL_VIEW~7C86CCA6F5AA2F13F707554DCB19D5E7"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from DEV_DB.DBT_DEV_shopify.shopify__customers\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__customers",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with  __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),order_lines as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line\n\n), product_variants as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product_variant\n\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n    from refunds\n    group by 1,2\n\n\n), joined as (\n\n    select\n        order_lines.*,\n\n        \n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n        product_variants.title as variant_title,\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n        product_variants.inventory_management as variant_inventory_management,\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_requiring_shipping as variant_is_requiring_shipping\n    from order_lines\n    \n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    \n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n\n)\n\nselect *\nfrom joined",
      "description": "Each record represents a line item of an order in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "fieldPath": "fulfillable_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "The service provider that's fulfilling the item.",
          "fieldPath": "fulfillment_service",
          "nativeType": "Not Set"
        },
        {
          "description": "How far along an order is in terms line items fulfilled.",
          "fieldPath": "fulfillment_status",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "fieldPath": "is_gift_card",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the item in grams.",
          "fieldPath": "grams",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the line item.",
          "fieldPath": "order_line_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product variant.",
          "fieldPath": "name",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the related order.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the item before discounts have been applied in the shop currency.",
          "fieldPath": "price",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "fieldPath": "product_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The number of items that were purchased.",
          "fieldPath": "quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item requires shipping.",
          "fieldPath": "is_requiring_shipping",
          "nativeType": "Not Set"
        },
        {
          "description": "The item's SKU (stock keeping unit).",
          "fieldPath": "sku",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item was taxable.",
          "fieldPath": "is_taxable",
          "nativeType": "Not Set"
        },
        {
          "description": "The title of the product.",
          "fieldPath": "title",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of the discount allocated to the line item in the shop currency.",
          "fieldPath": "total_discount",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the product variant.",
          "fieldPath": "variant_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the item's supplier.",
          "fieldPath": "vendor",
          "nativeType": "Not Set"
        },
        {
          "description": "Quantity of the item that has been refunded.",
          "fieldPath": "refunded_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "Quantity ordered, excluding refunds.",
          "fieldPath": "quantity_net_refunds",
          "nativeType": "Not Set"
        },
        {
          "description": "The barcode, UPC, or ISBN number for the product.",
          "fieldPath": "variant_barcode",
          "nativeType": "Not Set"
        },
        {
          "description": "The original price of the item before an adjustment or a sale.",
          "fieldPath": "variant_compare_at_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the product variant was created.",
          "fieldPath": "variant_created_at",
          "nativeType": "Not Set"
        },
        {
          "description": "The fulfillment service associated with the product variant.",
          "fieldPath": "variant_fulfillment_service",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the product variant in grams.",
          "fieldPath": "variant_grams",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "fieldPath": "variant_image_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "fieldPath": "inventory_item_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "fieldPath": "variant_inventory_management",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "fieldPath": "variant_inventory_policy",
          "nativeType": "Not Set"
        },
        {
          "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "fieldPath": "variant_inventory_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "variant_option_1",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "variant_option_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "variant_option_3",
          "nativeType": "Not Set"
        },
        {
          "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "fieldPath": "variant_position",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the product variant.",
          "fieldPath": "variant_price",
          "nativeType": "Not Set"
        },
        {
          "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "fieldPath": "variant_is_requiring_shipping",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "fieldPath": "variant_sku",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether a tax is charged when the product variant is sold.",
          "fieldPath": "variant_is_taxable",
          "nativeType": "Not Set"
        },
        {
          "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "fieldPath": "variant_title",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "fieldPath": "variant_updated_at",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the product variant in the unit system specified with weight_unit.",
          "fieldPath": "variant_weight",
          "nativeType": "Not Set"
        },
        {
          "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "fieldPath": "variant_weight_unit",
          "nativeType": "Not Set"
        },
        {
          "description": "Subtotal amount of the refund applied to the order line.",
          "fieldPath": "refunded_subtotal",
          "nativeType": "Not Set"
        },
        {
          "description": "Subtotal of the order line with refunds subtracted.",
          "fieldPath": "subtotal_net_refunds",
          "nativeType": "Not Set"
        },
        {
          "description": "Image id of the product variant associated with the order line.",
          "fieldPath": "image_id",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "index",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "pre_tax_price",
          "nativeType": "FLOAT"
        },
        {
          "fieldPath": "property_charge_interval_frequency",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "property_for_shipping_jan_3_rd_2020",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "property_shipping_interval_frequency",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "property_shipping_interval_unit_type",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "property_subscription_id",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "variant_tax_code",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [],
          "description": "",
          "name": "enabled_vars",
          "packageName": "fivetran_utils",
          "sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.enabled_vars"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~6B492E60B671B7A9D1B1D66AD4D14F3B",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with order_lines as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), product_variants as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        order_lines.*,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        {% endif %}\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n        product_variants.title as variant_title,\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n        product_variants.inventory_management as variant_inventory_management,\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_requiring_shipping as variant_is_requiring_shipping\n    from order_lines\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    {% endif %}\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n\n)\n\nselect *\nfrom joined",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~D951A8DC03212D63D7AC6783E270EAAC",
        "VIRTUAL_VIEW~6CCF4857063CC26D97B5BE046B66B6B4",
        "VIRTUAL_VIEW~026527B9CD31768B78170E581DC21E44"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from DEV_DB.DBT_DEV_shopify.shopify__order_lines\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__order_lines",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),  __dbt__cte__shopify__orders__order_refunds as (\n\n\nwith refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order\n\n), order_lines as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n\n), order_adjustments as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_adjustment\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  parse_json( total_shipping_price_set )['shop_money']['amount'] as \n    float\n) ,0) as shipping_cost,\n        \n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n        \n\n        \n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n        \n        (orders.total_price\n            \n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            \n            \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)\n             ) as order_adjusted_total,\n        order_lines.line_item_count\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n\n    \n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    \n    \n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    \n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat",
      "description": "Each record represents an order in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the app that created the order.",
          "fieldPath": "app_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The street address of the billing address.",
          "fieldPath": "billing_address_address_1",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional additional field for the street address of the billing address.",
          "fieldPath": "billing_address_address_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The city, town, or village of the billing address.",
          "fieldPath": "billing_address_city",
          "nativeType": "Not Set"
        },
        {
          "description": "The company of the person associated with the billing address.",
          "fieldPath": "billing_address_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the country of the billing address.",
          "fieldPath": "billing_address_country",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "fieldPath": "billing_address_country_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The first name of the person associated with the payment method.",
          "fieldPath": "billing_address_first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The last name of the person associated with the payment method.",
          "fieldPath": "billing_address_last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The latitude of the billing address.",
          "fieldPath": "billing_address_latitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The longitude of the billing address.",
          "fieldPath": "billing_address_longitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The full name of the person associated with the payment method.",
          "fieldPath": "billing_address_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The phone number at the billing address.",
          "fieldPath": "billing_address_phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "fieldPath": "billing_address_province",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter abbreviation of the region of the billing address.",
          "fieldPath": "billing_address_province_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "fieldPath": "billing_address_zip",
          "nativeType": "Not Set"
        },
        {
          "description": "The IP address of the browser used by the customer when they placed the order.",
          "fieldPath": "browser_ip",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer consented to receive email updates from the shop.",
          "fieldPath": "has_buyer_accepted_marketing",
          "nativeType": "Not Set"
        },
        {
          "description": "The reason why the order was canceled.",
          "fieldPath": "cancel_reason",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the order was canceled.",
          "fieldPath": "cancelled_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the cart that's associated with the order.",
          "fieldPath": "cart_token",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the order was closed.",
          "fieldPath": "closed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The autogenerated date and time when the order was created in Shopify.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The three-letter code for the shop currency.",
          "fieldPath": "currency",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the order's customer.",
          "fieldPath": "customer_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's email address.",
          "fieldPath": "email",
          "nativeType": "Not Set"
        },
        {
          "description": "The status of payments associated with the order. Can only be set when the order is created",
          "fieldPath": "financial_status",
          "nativeType": "Not Set"
        },
        {
          "description": "The order's status in terms of fulfilled line items.",
          "fieldPath": "fulfillment_status",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The URL for the page where the buyer landed when they entered the shop.",
          "fieldPath": "landing_site_base_url",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the physical location where the order was processed.",
          "fieldPath": "location_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "fieldPath": "name",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional note that a shop owner can attach to the order.",
          "fieldPath": "note",
          "nativeType": "Not Set"
        },
        {
          "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "fieldPath": "number",
          "nativeType": "Not Set"
        },
        {
          "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "fieldPath": "order_number",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "fieldPath": "processed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "How the payment was processed.",
          "fieldPath": "processing_method",
          "nativeType": "Not Set"
        },
        {
          "description": "The website where the customer clicked a link to the shop.",
          "fieldPath": "referring_site",
          "nativeType": "Not Set"
        },
        {
          "description": "The street address of the shipping address.",
          "fieldPath": "shipping_address_address_1",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional additional field for the street address of the shipping address.",
          "fieldPath": "shipping_address_address_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The city, town, or village of the shipping address.",
          "fieldPath": "shipping_address_city",
          "nativeType": "Not Set"
        },
        {
          "description": "The company of the person associated with the shipping address.",
          "fieldPath": "shipping_address_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the country of the shipping address.",
          "fieldPath": "shipping_address_country",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "fieldPath": "shipping_address_country_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The first name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The last name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The latitude of the shipping address.",
          "fieldPath": "shipping_address_latitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The longitude of the shipping address.",
          "fieldPath": "shipping_address_longitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The full name of the person associated with the payment method.",
          "fieldPath": "shipping_address_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The phone number at the shipping address.",
          "fieldPath": "shipping_address_phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_province",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter abbreviation of the region of the shipping address.",
          "fieldPath": "shipping_address_province_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_zip",
          "nativeType": "Not Set"
        },
        {
          "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "fieldPath": "source_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "fieldPath": "subtotal_price",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether taxes are included in the order subtotal.",
          "fieldPath": "has_taxes_included",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether this is a test order.",
          "fieldPath": "is_test_order",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique token for the order.",
          "fieldPath": "token",
          "nativeType": "Not Set"
        },
        {
          "description": "The total discounts applied to the price of the order in the shop currency.",
          "fieldPath": "total_discounts",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item prices in the shop currency.",
          "fieldPath": "total_line_items_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "fieldPath": "total_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "fieldPath": "total_tax",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item weights in grams.",
          "fieldPath": "total_weight",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the order was last modified.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "fieldPath": "user_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Number of line items included in the order.",
          "fieldPath": "line_item_count",
          "nativeType": "Not Set"
        },
        {
          "description": "The sequential number of the order as it relates to the customer",
          "fieldPath": "customer_order_seq_number",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the order was a new or repeat order for the customer.",
          "fieldPath": "new_vs_repeat",
          "nativeType": "Not Set"
        },
        {
          "description": "The shipping cost of the order.",
          "fieldPath": "shipping_cost",
          "nativeType": "Not Set"
        },
        {
          "description": "Total adjustment amount applied to the order.",
          "fieldPath": "order_adjustment_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "Total tax applied to the adjustment on the order.",
          "fieldPath": "order_adjustment_tax_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "Total refund amount applied to the order.",
          "fieldPath": "refund_subtotal",
          "nativeType": "Not Set"
        },
        {
          "description": "Total tax applied to the refund on the order.",
          "fieldPath": "refund_total_tax",
          "nativeType": "Not Set"
        },
        {
          "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n",
          "fieldPath": "order_adjusted_total",
          "nativeType": "Not Set"
        },
        {
          "description": "Field representing the index of the order line in relation to the order.",
          "fieldPath": "index",
          "nativeType": "Not Set"
        },
        {
          "description": "The pre tax price of the order line.",
          "fieldPath": "pre_tax_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The checkout token applied to the order.",
          "fieldPath": "checkout_token",
          "nativeType": "Not Set"
        },
        {
          "description": "The total shipping price set to the order.",
          "fieldPath": "total_shipping_price_set",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [],
          "description": "",
          "name": "enabled_vars",
          "packageName": "fivetran_utils",
          "sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.enabled_vars"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.snowflake__json_parse"
          ],
          "description": "",
          "name": "json_parse",
          "packageName": "fivetran_utils",
          "sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.json_parse"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__type_float"
          ],
          "description": "",
          "name": "type_float",
          "packageName": "dbt_utils",
          "sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
          "uniqueId": "macro.dbt_utils.type_float"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~E5D035123387A38F109CF161C11B625C",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n{% if var('shopify__using_order_adjustment', true) %}\n), order_adjustments as (\n\n    select *\n    from {{ var('shopify_order_adjustment') }}\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast({{ fivetran_utils.json_parse(\"total_shipping_price_set\",[\"shop_money\",\"amount\"]) }} as {{ dbt_utils.type_float() }}) ,0) as shipping_cost,\n        \n        {% if var('shopify__using_order_adjustment', true) %}\n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n        {% endif %}\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n        {% endif %}\n        (orders.total_price\n            {% if var('shopify__using_order_adjustment', true) %}\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            {% endif %}\n            {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)\n            {% endif %} ) as order_adjusted_total,\n        order_lines.line_item_count\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    {% endif %}\n    {% if var('shopify__using_order_adjustment', true) %}\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    {% endif %}\n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~8D4000AB0098D0E6D8FD687A4AEB2090",
        "VIRTUAL_VIEW~87FF94E36A0DBA2812EE224687A534EF",
        "VIRTUAL_VIEW~B7EE6B6A8823F9048E0676C838DCA4C2",
        "VIRTUAL_VIEW~026527B9CD31768B78170E581DC21E44"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from DEV_DB.DBT_DEV_shopify.shopify__orders\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__orders",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with products as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product\n\n), order_lines as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__order_lines\n\n), orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__orders\n\n), order_lines_aggregated as (\n\n    select \n        order_lines.product_id, \n        order_lines.source_relation,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n\n        \n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        \n\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp\n    from order_lines\n    left join orders\n        using (order_id, source_relation)\n    group by 1,2\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(order_lines_aggregated.quantity_sold,0) as quantity_sold,\n        coalesce(order_lines_aggregated.subtotal_sold,0) as subtotal_sold,\n\n        \n        coalesce(order_lines_aggregated.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(order_lines_aggregated.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        \n        \n        order_lines_aggregated.first_order_timestamp,\n        order_lines_aggregated.most_recent_order_timestamp\n    from products\n    left join order_lines_aggregated\n        using (product_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "description": "Each record represents a product in Shopify.",
      "fields": [
        {
          "description": "Whether the record has been deleted in the source system.",
          "fieldPath": "_fivetran_deleted",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "fieldPath": "handle",
          "nativeType": "Not Set"
        },
        {
          "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "fieldPath": "product_id",
          "nativeType": "Not Set"
        },
        {
          "description": "A categorization for the product used for filtering and searching products.",
          "fieldPath": "product_type",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "fieldPath": "published_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the product is published to the Point of Sale channel.",
          "fieldPath": "published_scope",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product.",
          "fieldPath": "title",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product was last modified.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product's vendor.",
          "fieldPath": "vendor",
          "nativeType": "Not Set"
        },
        {
          "description": "Quantity of the product sold.",
          "fieldPath": "quantity_sold",
          "nativeType": "Not Set"
        },
        {
          "description": "Total amount of the product sold.",
          "fieldPath": "subtotal_sold",
          "nativeType": "Not Set"
        },
        {
          "description": "Quantity of the product sold, excluding refunds.",
          "fieldPath": "quantity_sold_net_refunds",
          "nativeType": "Not Set"
        },
        {
          "description": "Total amount of the product sold, excluding refunds.",
          "fieldPath": "subtotal_sold_net_refunds",
          "nativeType": "Not Set"
        },
        {
          "description": "The timestamp the product was first ordered.",
          "fieldPath": "first_order_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The timestamp the product was most recently ordered.",
          "fieldPath": "most_recent_order_timestamp",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [],
          "description": "",
          "name": "enabled_vars",
          "packageName": "fivetran_utils",
          "sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.enabled_vars"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~969891390746D9B4C1CECF9794334432",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with products as (\n\n    select *\n    from {{ var('shopify_product') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders')}}\n\n), order_lines_aggregated as (\n\n    select \n        order_lines.product_id, \n        order_lines.source_relation,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        {% endif %}\n\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp\n    from order_lines\n    left join orders\n        using (order_id, source_relation)\n    group by 1,2\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(order_lines_aggregated.quantity_sold,0) as quantity_sold,\n        coalesce(order_lines_aggregated.subtotal_sold,0) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(order_lines_aggregated.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(order_lines_aggregated.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        {% endif %}\n        \n        order_lines_aggregated.first_order_timestamp,\n        order_lines_aggregated.most_recent_order_timestamp\n    from products\n    left join order_lines_aggregated\n        using (product_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~6FDC013B116645227FA06AC923F678EC",
        "VIRTUAL_VIEW~5C01D2BB4B5591E60AD612F718BC3640",
        "VIRTUAL_VIEW~0336208A74394791789B6D0638402D2F"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from DEV_DB.DBT_DEV_shopify.shopify__products\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__products",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with transactions as (\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__transaction\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  parse_json( receipt )['charges']['data'][0]['balance_transaction']['exchange_rate'], '') as \n    numeric(28, 6)\n ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  parse_json( receipt )['charges']['data'][0]['balance_transaction']['exchange_rate'], '') as \n    numeric(28, 6)\n ),1) * amount as currency_exchange_calculated_amount\n    from transactions\n\n)\n\nselect *\nfrom exchange_rate",
      "description": "Each record represents a transaction in Shopify.",
      "fields": [
        {
          "description": "The ID for the transaction.",
          "fieldPath": "transaction_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the order that the transaction is associated with.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID associated with a refund in the refund table.",
          "fieldPath": "refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of money included in the transaction.",
          "fieldPath": "amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The authorization code associated with the transaction.",
          "fieldPath": "authorization",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the transaction was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when a transaction was processed.",
          "fieldPath": "processed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the device.",
          "fieldPath": "device_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the gateway the transaction was issued through.",
          "fieldPath": "gateway",
          "nativeType": "Not Set"
        },
        {
          "description": "The origin of the transaction.",
          "fieldPath": "source_name",
          "nativeType": "Not Set"
        },
        {
          "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "fieldPath": "message",
          "nativeType": "Not Set"
        },
        {
          "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "fieldPath": "currency",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the physical location where the transaction was processed.",
          "fieldPath": "location_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of an associated transaction.",
          "fieldPath": "parent_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The response code from the address verification system.",
          "fieldPath": "payment_avs_result_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "fieldPath": "payment_credit_card_bin",
          "nativeType": "Not Set"
        },
        {
          "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "fieldPath": "payment_cvv_result_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's credit card number, with most of the leading digits redacted.",
          "fieldPath": "payment_credit_card_number",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the company that issued the customer's credit card.",
          "fieldPath": "payment_credit_card_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The transaction's type.",
          "fieldPath": "kind",
          "nativeType": "Not Set"
        },
        {
          "description": "A transaction receipt attached to the transaction by the gateway.",
          "fieldPath": "receipt",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the adjustment.",
          "fieldPath": "currency_exchange_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The difference between the amounts on the associated transaction and the parent transaction.",
          "fieldPath": "currency_exchange_adjustment",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of the parent transaction in the shop currency.",
          "fieldPath": "currency_exchange_original_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of the associated transaction in the shop currency.",
          "fieldPath": "currency_exchange_final_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The shop currency.",
          "fieldPath": "currency_exchange_currency",
          "nativeType": "Not Set"
        },
        {
          "description": "A standardized error code, independent of the payment provider.",
          "fieldPath": "error_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The status of the transaction.",
          "fieldPath": "status",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the transaction is a test transaction.",
          "fieldPath": "test",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "fieldPath": "user_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Timestamp of the date the record was synced by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The exchange rate between the home currency and the currency of sale at the time of the transaction.",
          "fieldPath": "exchange_rate",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of the transaction with the currency exchange rate applied.",
          "fieldPath": "currency_exchange_calculated_amount",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.snowflake__json_parse"
          ],
          "description": "",
          "name": "json_parse",
          "packageName": "fivetran_utils",
          "sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.json_parse"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__type_numeric"
          ],
          "description": "",
          "name": "type_numeric",
          "packageName": "dbt_utils",
          "sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
          "uniqueId": "macro.dbt_utils.type_numeric"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~2EC0235EF20D36319C523CF2F010D39E",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "with transactions as (\n    select *\n    from {{ var('shopify_transaction') }}\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) as exchange_rate,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) * amount as currency_exchange_calculated_amount\n    from transactions\n\n)\n\nselect *\nfrom exchange_rate",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~1E5F6F342A744448859E62838F6F3EE3"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from DEV_DB.DBT_DEV_shopify.shopify__transactions\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__transactions",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order\n\n), transactions as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__transactions\n    where lower(status) = 'success'\n/*\n), transaction_refund_adjustment as (\n\n    select\n        *,\n        case when lower(kind) = 'refund'\n            then currency_exchange_calculated_amount * -1\n            else currency_exchange_calculated_amount\n                end as adjusted_amount\n    from transactions\n*/\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "fields": [],
      "materialization": {
        "targetDataset": "DATASET~700E7494AC9B1A4B04773DCD189D92DF",
        "type": "EPHEMERAL"
      },
      "packageName": "shopify",
      "rawSql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), transactions as (\n\n    select *\n    from {{ ref('shopify__transactions' )}}\n    where lower(status) = 'success'\n/*\n), transaction_refund_adjustment as (\n\n    select\n        *,\n        case when lower(kind) = 'refund'\n            then currency_exchange_calculated_amount * -1\n            else currency_exchange_calculated_amount\n                end as adjusted_amount\n    from transactions\n*/\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~8D4000AB0098D0E6D8FD687A4AEB2090",
        "VIRTUAL_VIEW~D44A2F377739331B07ADB810784FCCD4"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation",
          "sql": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order\n\n), transactions as (\n\n    select *\n    from DEV_DB.DBT_DEV_shopify.shopify__transactions\n    where lower(status) = 'success'\n/*\n), transaction_refund_adjustment as (\n\n    select\n        *,\n        case when lower(kind) = 'refund'\n            then currency_exchange_calculated_amount * -1\n            else currency_exchange_calculated_amount\n                end as adjusted_amount\n    from transactions\n*/\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__customers__order_aggregates",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with order_line as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "fields": [],
      "materialization": {
        "targetDataset": "DATASET~C9CDC635626C959DC4D26BE4F9683DD7",
        "type": "EPHEMERAL"
      },
      "packageName": "shopify",
      "rawSql": "with order_line as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~D951A8DC03212D63D7AC6783E270EAAC"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation",
          "sql": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n),validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__shopify__orders__order_line_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21"
        }
      ]
    },
    "logicalId": {
      "name": "shopify.shopify__orders__order_line_aggregates",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\nwith refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__refund\n\n), order_line_refunds as (\n\n    select *\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_refund\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join",
      "fields": [],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [],
          "description": "",
          "name": "enabled_vars",
          "packageName": "fivetran_utils",
          "sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.enabled_vars"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~D3E5422474231A3809D8CCEEA8623BB2",
        "type": "EPHEMERAL"
      },
      "packageName": "shopify",
      "rawSql": "{{ config(enabled=fivetran_utils.enabled_vars(['shopify__using_order_line_refund','shopify__using_refund'])) }}\n\nwith refunds as (\n\n    select *\n    from {{ var('shopify_refund') }}\n\n), order_line_refunds as (\n\n    select *\n    from {{ var('shopify_order_line_refund') }}\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~3432A4E71F4D55C9162C58CBA985400E",
        "VIRTUAL_VIEW~F03A1E7FC52E747A54E71AC134A1AE3B"
      ],
      "tags": []
    },
    "logicalId": {
      "name": "shopify.shopify__orders__order_refunds",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1008\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n",
      "fields": [
        {
          "fieldPath": "date_day",
          "nativeType": "DATE"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.default__date_spine"
          ],
          "description": "",
          "name": "date_spine",
          "packageName": "dbt_utils",
          "sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
          "uniqueId": "macro.dbt_utils.date_spine"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~32DE2ECD512305E97AB78842D21B7638",
        "type": "TABLE"
      },
      "packageName": "shopify",
      "rawSql": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"cast('2019-01-01' as date)\",\n    end_date=\"current_date\"\n   )\n}}",
      "tags": []
    },
    "logicalId": {
      "name": "shopify.shopify__calendar",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__customer_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as has_accepted_marketing , \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as customer_id , \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as account_state , \n    \n    \n    tax_exempt\n    \n as is_tax_exempt , \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp , \n    \n    \n    verified_email\n    \n as is_verified_email \n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents a customer in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer has consented to receive marketing material via email.",
          "fieldPath": "has_accepted_marketing",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the customer was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The default address for the customer.",
          "fieldPath": "default_address_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "fieldPath": "email",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's first name.",
          "fieldPath": "first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique identifier for the customer.",
          "fieldPath": "customer_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's last name.",
          "fieldPath": "last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The number of orders associated with this customer.",
          "fieldPath": "orders_count",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "fieldPath": "phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The state of the customer's account with a shop.",
          "fieldPath": "account_state",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "fieldPath": "is_tax_exempt",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of money that the customer has spent across their order history.",
          "fieldPath": "total_spent",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the customer information was last updated.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer has verified their email address.",
          "fieldPath": "is_verified_email",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_float"
          ],
          "description": "",
          "name": "get_customer_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_accepted_marketing\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"default_address_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"customer_id\"},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"orders_count\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_state\"},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\", \"alias\": \"is_tax_exempt\"},\n    {\"name\": \"total_spent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"verified_email\", \"datatype\": \"boolean\", \"alias\": \"is_verified_email\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_customer_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~D65820C9E40E6D6D1B55D450A2C07F4C",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__customer_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('customer_pass_through_columns') %}\n      ,\n      {{ var('customer_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~357F5A899FF04B3155304FCE11986D71"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__customer\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__customer",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as has_buyer_accepted_marketing , \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as cancelled_timestamp , \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    checkout_token\n    \n , \n    \n    \n    closed_at\n    \n as closed_timestamp , \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    id\n    \n as order_id , \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    processed_at\n    \n as processed_timestamp , \n    \n    \n    processing_method\n    \n as \n    \n    processing_method\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    total_shipping_price_set\n    \n , \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as has_taxes_included , \n    \n    \n    test\n    \n as is_test_order , \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp , \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents an order in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the app that created the order.",
          "fieldPath": "app_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The street address of the billing address.",
          "fieldPath": "billing_address_address_1",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional additional field for the street address of the billing address.",
          "fieldPath": "billing_address_address_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The city, town, or village of the billing address.",
          "fieldPath": "billing_address_city",
          "nativeType": "Not Set"
        },
        {
          "description": "The company of the person associated with the billing address.",
          "fieldPath": "billing_address_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the country of the billing address.",
          "fieldPath": "billing_address_country",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "fieldPath": "billing_address_country_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The first name of the person associated with the payment method.",
          "fieldPath": "billing_address_first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The last name of the person associated with the payment method.",
          "fieldPath": "billing_address_last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The latitude of the billing address.",
          "fieldPath": "billing_address_latitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The longitude of the billing address.",
          "fieldPath": "billing_address_longitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The full name of the person associated with the payment method.",
          "fieldPath": "billing_address_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The phone number at the billing address.",
          "fieldPath": "billing_address_phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "fieldPath": "billing_address_province",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter abbreviation of the region of the billing address.",
          "fieldPath": "billing_address_province_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "fieldPath": "billing_address_zip",
          "nativeType": "Not Set"
        },
        {
          "description": "The IP address of the browser used by the customer when they placed the order.",
          "fieldPath": "browser_ip",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the customer consented to receive email updates from the shop.",
          "fieldPath": "has_buyer_accepted_marketing",
          "nativeType": "Not Set"
        },
        {
          "description": "The reason why the order was canceled.",
          "fieldPath": "cancel_reason",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the order was canceled.",
          "fieldPath": "cancelled_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the cart that's associated with the order.",
          "fieldPath": "cart_token",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the order was closed.",
          "fieldPath": "closed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The autogenerated date and time when the order was created in Shopify.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The three-letter code for the shop currency.",
          "fieldPath": "currency",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the order's customer.",
          "fieldPath": "customer_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's email address.",
          "fieldPath": "email",
          "nativeType": "Not Set"
        },
        {
          "description": "The status of payments associated with the order. Can only be set when the order is created",
          "fieldPath": "financial_status",
          "nativeType": "Not Set"
        },
        {
          "description": "The order's status in terms of fulfilled line items.",
          "fieldPath": "fulfillment_status",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The URL for the page where the buyer landed when they entered the shop.",
          "fieldPath": "landing_site_base_url",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the physical location where the order was processed.",
          "fieldPath": "location_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "fieldPath": "name",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional note that a shop owner can attach to the order.",
          "fieldPath": "note",
          "nativeType": "Not Set"
        },
        {
          "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "fieldPath": "number",
          "nativeType": "Not Set"
        },
        {
          "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "fieldPath": "order_number",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "fieldPath": "processed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "How the payment was processed.",
          "fieldPath": "processing_method",
          "nativeType": "Not Set"
        },
        {
          "description": "The website where the customer clicked a link to the shop.",
          "fieldPath": "referring_site",
          "nativeType": "Not Set"
        },
        {
          "description": "The street address of the shipping address.",
          "fieldPath": "shipping_address_address_1",
          "nativeType": "Not Set"
        },
        {
          "description": "An optional additional field for the street address of the shipping address.",
          "fieldPath": "shipping_address_address_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The city, town, or village of the shipping address.",
          "fieldPath": "shipping_address_city",
          "nativeType": "Not Set"
        },
        {
          "description": "The company of the person associated with the shipping address.",
          "fieldPath": "shipping_address_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the country of the shipping address.",
          "fieldPath": "shipping_address_country",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "fieldPath": "shipping_address_country_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The first name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_first_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The last name of the person associated with the shipping address.",
          "fieldPath": "shipping_address_last_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The latitude of the shipping address.",
          "fieldPath": "shipping_address_latitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The longitude of the shipping address.",
          "fieldPath": "shipping_address_longitude",
          "nativeType": "Not Set"
        },
        {
          "description": "The full name of the person associated with the payment method.",
          "fieldPath": "shipping_address_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The phone number at the shipping address.",
          "fieldPath": "shipping_address_phone",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_province",
          "nativeType": "Not Set"
        },
        {
          "description": "The two-letter abbreviation of the region of the shipping address.",
          "fieldPath": "shipping_address_province_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "fieldPath": "shipping_address_zip",
          "nativeType": "Not Set"
        },
        {
          "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "fieldPath": "source_name",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "fieldPath": "subtotal_price",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether taxes are included in the order subtotal.",
          "fieldPath": "has_taxes_included",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether this is a test order.",
          "fieldPath": "is_test_order",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique token for the order.",
          "fieldPath": "token",
          "nativeType": "Not Set"
        },
        {
          "description": "The total discounts applied to the price of the order in the shop currency.",
          "fieldPath": "total_discounts",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item prices in the shop currency.",
          "fieldPath": "total_line_items_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "fieldPath": "total_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "fieldPath": "total_tax",
          "nativeType": "Not Set"
        },
        {
          "description": "The sum of all line item weights in grams.",
          "fieldPath": "total_weight",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the order was last modified.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "fieldPath": "user_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The total shipping price set for the order.",
          "fieldPath": "total_shipping_price_set",
          "nativeType": "Not Set"
        },
        {
          "description": "The index associated with the order.",
          "fieldPath": "index",
          "nativeType": "Not Set"
        },
        {
          "description": "The total pre tax price of the order.",
          "fieldPath": "pre_tax_price",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "checkout_token",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_float"
          ],
          "description": "",
          "name": "get_order_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"browser_ip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"buyer_accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_buyer_accepted_marketing\"},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cancelled_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"cancelled_timestamp\"},\n    {\"name\": \"cart_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"checkout_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"closed_timestamp\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"financial_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_id\"},\n    {\"name\": \"landing_site_base_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"processing_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"referring_site\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_shipping_price_set\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtotal_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"taxes_included\", \"datatype\": \"boolean\", \"alias\": \"has_taxes_included\"},\n    {\"name\": \"test\", \"datatype\": \"boolean\", \"alias\": \"is_test_order\"},\n    {\"name\": \"token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_discounts\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_line_items_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_weight\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_order_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~91239E79914A9A370AF8F118F9E71BC1",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_pass_through_columns') %}\n      ,\n      {{ var('order_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~70E264A5D95DF2ADA1176AC48ECBAF2E"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * \n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_adjustment_tmp\n\n),\n\nrenamed as (\n\n    select\n        \n    \n    \n    id\n    \n as order_adjustment_id , \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n      \n\n\n, '' as source_relation\n\n\n\n        \n    from source\n)\n\nselect * from renamed",
      "description": "Each record represents and adjustment to and order within Shopify.",
      "fields": [
        {
          "description": "The unique numeric identifier for the order adjustment.",
          "fieldPath": "order_adjustment_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Reference to the order which the adjustment is associated.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Reference to the refund which the adjustment is associated.",
          "fieldPath": "refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Amount of the adjustment.",
          "fieldPath": "amount",
          "nativeType": "Not Set"
        },
        {
          "description": "Tax amount applied to the order adjustment.",
          "fieldPath": "tax_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The kind of order adjustment (eg. refund, restock, etc.).",
          "fieldPath": "kind",
          "nativeType": "Not Set"
        },
        {
          "description": "The reason for the order adjustment.",
          "fieldPath": "reason",
          "nativeType": "Not Set"
        },
        {
          "description": "Amount set towards the order adjustment",
          "fieldPath": "amount_set",
          "nativeType": "Not Set"
        },
        {
          "description": "Tax amount set towards the order adjustment.",
          "fieldPath": "tax_amount_set",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_float",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_timestamp"
          ],
          "description": "",
          "name": "get_order_adjustment_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_order_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\":  dbt_utils.type_numeric(), \"alias\": \"order_adjustment_id\"},\n    {\"name\": \"order_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_order_adjustment_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~8085CB494CC5F499DB4E5003B82608EC",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__order_adjustment_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_adjustment_tmp')),\n                staging_columns=get_order_adjustment_columns()\n            )\n        }}\n\n      {{ fivetran_utils.source_relation() }}\n        \n    from source\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~A310FB46D1D81D8C2427FF1ECD48C0B6"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_adjustment\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_adjustment",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as is_gift_card , \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as order_line_id , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    index\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    pre_tax_price\n    \n , \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    property_charge_interval_frequency\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    property_for_shipping_jan_3_rd_2020\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    property_shipping_interval_frequency\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    property_shipping_interval_unit_type\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    property_subscription_id\n    \n , \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as is_requiring_shipping , \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as is_taxable , \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents a line item from an order in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "fieldPath": "fulfillable_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "The service provider that's fulfilling the item.",
          "fieldPath": "fulfillment_service",
          "nativeType": "Not Set"
        },
        {
          "description": "How far along an order is in terms line items fulfilled.",
          "fieldPath": "fulfillment_status",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "fieldPath": "is_gift_card",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the item in grams.",
          "fieldPath": "grams",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the line item.",
          "fieldPath": "order_line_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product variant.",
          "fieldPath": "name",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the related order.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the item before discounts have been applied in the shop currency.",
          "fieldPath": "price",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "fieldPath": "product_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The number of items that were purchased.",
          "fieldPath": "quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item requires shipping.",
          "fieldPath": "is_requiring_shipping",
          "nativeType": "Not Set"
        },
        {
          "description": "The item's SKU (stock keeping unit).",
          "fieldPath": "sku",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the item was taxable.",
          "fieldPath": "is_taxable",
          "nativeType": "Not Set"
        },
        {
          "description": "The title of the product.",
          "fieldPath": "title",
          "nativeType": "Not Set"
        },
        {
          "description": "The total amount of the discount allocated to the line item in the shop currency.",
          "fieldPath": "total_discount",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the product variant.",
          "fieldPath": "variant_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the item's supplier.",
          "fieldPath": "vendor",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "index",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "pre_tax_price",
          "nativeType": "FLOAT"
        },
        {
          "fieldPath": "property_charge_interval_frequency",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "property_for_shipping_jan_3_rd_2020",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "property_shipping_interval_frequency",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "property_shipping_interval_unit_type",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "property_subscription_id",
          "nativeType": "NUMBER"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_float"
          ],
          "description": "",
          "name": "get_order_line_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fulfillable_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"gift_card\", \"datatype\": \"boolean\", \"alias\": \"is_gift_card\"},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_id\"},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pre_tax_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_charge_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_for_shipping_jan_3_rd_2020\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_shipping_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_shipping_interval_unit_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_subscription_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_discount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"variant_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_order_line_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~BA6B905C235CCAE3FD18B2757028113E",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_line_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_tmp')),\n                staging_columns=get_order_line_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_pass_through_columns') %}\n      ,\n      {{ var('order_line_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~F39B352C7C85A5831F504CF466A0F53C"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_line",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_refund_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as order_line_refund_id , \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents a line item from an order in Shopify.",
      "fields": [
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique identifier of the line item in the refund.",
          "fieldPath": "order_line_refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "TThe unique identifier of the location where the items will be restockedBD",
          "fieldPath": "location_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the related line item in the order.",
          "fieldPath": "order_line_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The quantity of the associated line item that was returned.",
          "fieldPath": "quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the related refund.",
          "fieldPath": "refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "How this refund line item affects inventory levels.",
          "fieldPath": "restock_type",
          "nativeType": "Not Set"
        },
        {
          "description": "Subtotal amount of the order line refund",
          "fieldPath": "subtotal",
          "nativeType": "Not Set"
        },
        {
          "description": "The total tax applied to the refund.",
          "fieldPath": "total_tax",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_float",
            "macro.dbt_utils.type_string"
          ],
          "description": "",
          "name": "get_order_line_refund_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_order_line_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_refund_id\"},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"restock_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_order_line_refund_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~B3B6787487B86969BA0953A2F9E9F5DD",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\nwith source as (\n\n    select * from {{ ref('stg_shopify__order_line_refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_refund_tmp')),\n                staging_columns=get_order_line_refund_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_refund_pass_through_columns') %}\n      ,\n      {{ var('order_line_refund_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~4695C0BBBE2C6B5DAF0F7A493257BAC1"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__order_line_refund\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_line_refund",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as product_id , \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as published_timestamp , \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp , \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents a product in Shopify.",
      "fields": [
        {
          "description": "Whether the record has been deleted in the source system.",
          "fieldPath": "_fivetran_deleted",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "fieldPath": "handle",
          "nativeType": "Not Set"
        },
        {
          "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "fieldPath": "product_id",
          "nativeType": "Not Set"
        },
        {
          "description": "A categorization for the product used for filtering and searching products.",
          "fieldPath": "product_type",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "fieldPath": "published_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the product is published to the Point of Sale channel.",
          "fieldPath": "published_scope",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product.",
          "fieldPath": "title",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product was last modified.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the product's vendor.",
          "fieldPath": "vendor",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_numeric"
          ],
          "description": "",
          "name": "get_product_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"handle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"product_id\"},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"published_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"published_timestamp\"},\n    {\"name\": \"published_scope\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_product_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~5A0067ADD077558F93B9427661D2578A",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_pass_through_columns') %}\n      ,\n      {{ var('product_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~D6C48A55215C5F664A9A448F9602FC96"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__product",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product_variant_tmp\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as variant_id , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    updated_at\n    \n as updated_timestamp , \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    inventory_management\n    \n as \n    \n    inventory_management\n    \n, \n    \n    \n    taxable\n    \n as is_taxable , \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    weight\n    \n as \n    \n    weight\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    option_1\n    \n as \n    \n    option_1\n    \n, \n    \n    \n    option_2\n    \n as \n    \n    option_2\n    \n, \n    \n    \n    option_3\n    \n as \n    \n    option_3\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    old_inventory_quantity\n    \n as \n    \n    old_inventory_quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as is_requiring_shipping \n\n\n\n      --The below script allows for pass through columns.\n      \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n\n)\n\nselect * from renamed",
      "description": "Each record represents a product variant in Shopify",
      "fields": [
        {
          "description": "The barcode, UPC, or ISBN number for the product.",
          "fieldPath": "barcode",
          "nativeType": "Not Set"
        },
        {
          "description": "The original price of the item before an adjustment or a sale.",
          "fieldPath": "compare_at_price",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time (ISO 8601 format) when the product variant was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The fulfillment service associated with the product variant.",
          "fieldPath": "fulfillment_service",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the product variant in grams.",
          "fieldPath": "grams",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique numeric identifier for the product variant.",
          "fieldPath": "variant_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "fieldPath": "image_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "fieldPath": "inventory_item_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "fieldPath": "inventory_management",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "fieldPath": "inventory_policy",
          "nativeType": "Not Set"
        },
        {
          "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "fieldPath": "inventory_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "This property is deprecated. Use the InventoryLevel resource instead.",
          "fieldPath": "old_inventory_quantity",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_1",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_2",
          "nativeType": "Not Set"
        },
        {
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "fieldPath": "option_3",
          "nativeType": "Not Set"
        },
        {
          "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "fieldPath": "position",
          "nativeType": "Not Set"
        },
        {
          "description": "The price of the product variant.",
          "fieldPath": "price",
          "nativeType": "Not Set"
        },
        {
          "description": "The unique numeric identifier for the product.",
          "fieldPath": "product_id",
          "nativeType": "Not Set"
        },
        {
          "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "fieldPath": "is_requiring_shipping",
          "nativeType": "Not Set"
        },
        {
          "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "fieldPath": "sku",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether a tax is charged when the product variant is sold.",
          "fieldPath": "is_taxable",
          "nativeType": "Not Set"
        },
        {
          "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.",
          "fieldPath": "tax_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "fieldPath": "title",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "fieldPath": "updated_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The weight of the product variant in the unit system specified with weight_unit.",
          "fieldPath": "weight",
          "nativeType": "Not Set"
        },
        {
          "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "fieldPath": "weight_unit",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_string",
            "macro.dbt_utils.type_float"
          ],
          "description": "",
          "name": "get_product_variant_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_product_variant_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"variant_id\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"image_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"position\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_policy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"compare_at_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"inventory_management\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"barcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"weight\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"old_inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_product_variant_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~6047D2AA7DA0C624A79EDC995AD73DCB",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_variant_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_variant_tmp')),\n                staging_columns=get_product_variant_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_variant_pass_through_columns') %}\n      ,\n      {{ var('product_variant_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~E0FED012FCC2D600FE2891979567B928"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__product_variant\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__product_variant",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n\n\nwith source as (\n\n    select * \n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__refund_tmp\n\n),\n\nrenamed as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as refund_id , \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n      \n\n\n, '' as source_relation\n\n\n\n        \n    from source\n)\n\nselect * from renamed",
      "description": "Each record represents a refund within Shopify.",
      "fields": [
        {
          "description": "The unique numeric identifier for the refund.",
          "fieldPath": "refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "Timestamp of the date when the refund was created.",
          "fieldPath": "created_at",
          "nativeType": "Not Set"
        },
        {
          "description": "Timestamp of the date when the refund was processed.",
          "fieldPath": "processed_at",
          "nativeType": "Not Set"
        },
        {
          "description": "User generated note attached to the refund.",
          "fieldPath": "note",
          "nativeType": "Not Set"
        },
        {
          "description": "Boolean indicating if the refund is a result of a restock.",
          "fieldPath": "restock",
          "nativeType": "Not Set"
        },
        {
          "description": "Reference to the user id which generated the refund.",
          "fieldPath": "user_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "description": "Record representing total duties set for the refund.",
          "fieldPath": "total_duties_set",
          "nativeType": "Not Set"
        },
        {
          "description": "Reference to the order which the refund is associated.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_string"
          ],
          "description": "",
          "name": "get_refund_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"refund_id\"},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"restock\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_refund_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~9345738347B9FEF5FF913FAA35949CD9",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n\n      {{ fivetran_utils.source_relation() }}\n        \n    from source\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~8F32C74CCA09374F34894E479CE31EDD"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__refund\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__refund",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "with source as (\n\n    select * from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__transaction_tmp\n\n),\n\nrenamed as (\n\n    select\n\n        \n    cast(null as \n    numeric(28, 6)\n) as transaction_id , \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    cast(null as \n    timestamp_ntz\n) as created_timestamp , \n    cast(null as \n    timestamp_ntz\n) as processed_timestamp , \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n         --The below script allows for pass through columns.\n        \n\n      \n\n\n, '' as source_relation\n\n\n\n\n    from source\n    where not test\n\n)\n\nselect * from renamed",
      "description": "Each record represents a transaction in Shopify.",
      "fields": [
        {
          "description": "The ID for the transaction.",
          "fieldPath": "transaction_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the order that the transaction is associated with.",
          "fieldPath": "order_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID associated with a refund in the refund table.",
          "fieldPath": "refund_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of money included in the transaction.",
          "fieldPath": "amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The authorization code associated with the transaction.",
          "fieldPath": "authorization",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when the transaction was created.",
          "fieldPath": "created_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The date and time when a transaction was processed.",
          "fieldPath": "processed_timestamp",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the device.",
          "fieldPath": "device_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the gateway the transaction was issued through.",
          "fieldPath": "gateway",
          "nativeType": "Not Set"
        },
        {
          "description": "The origin of the transaction.",
          "fieldPath": "source_name",
          "nativeType": "Not Set"
        },
        {
          "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "fieldPath": "message",
          "nativeType": "Not Set"
        },
        {
          "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "fieldPath": "currency",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the physical location where the transaction was processed.",
          "fieldPath": "location_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of an associated transaction.",
          "fieldPath": "parent_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The response code from the address verification system.",
          "fieldPath": "payment_avs_result_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "fieldPath": "payment_credit_card_bin",
          "nativeType": "Not Set"
        },
        {
          "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "fieldPath": "payment_cvv_result_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The customer's credit card number, with most of the leading digits redacted.",
          "fieldPath": "payment_credit_card_number",
          "nativeType": "Not Set"
        },
        {
          "description": "The name of the company that issued the customer's credit card.",
          "fieldPath": "payment_credit_card_company",
          "nativeType": "Not Set"
        },
        {
          "description": "The transaction's type.",
          "fieldPath": "kind",
          "nativeType": "Not Set"
        },
        {
          "description": "A transaction receipt attached to the transaction by the gateway.",
          "fieldPath": "receipt",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID of the adjustment.",
          "fieldPath": "currency_exchange_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The difference between the amounts on the associated transaction and the parent transaction.",
          "fieldPath": "currency_exchange_adjustment",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of the parent transaction in the shop currency.",
          "fieldPath": "currency_exchange_original_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The amount of the associated transaction in the shop currency.",
          "fieldPath": "currency_exchange_final_amount",
          "nativeType": "Not Set"
        },
        {
          "description": "The shop currency.",
          "fieldPath": "currency_exchange_currency",
          "nativeType": "Not Set"
        },
        {
          "description": "A standardized error code, independent of the payment provider.",
          "fieldPath": "error_code",
          "nativeType": "Not Set"
        },
        {
          "description": "The status of the transaction.",
          "fieldPath": "status",
          "nativeType": "Not Set"
        },
        {
          "description": "Whether the transaction is a test transaction.",
          "fieldPath": "test",
          "nativeType": "Not Set"
        },
        {
          "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "fieldPath": "user_id",
          "nativeType": "Not Set"
        },
        {
          "description": "The time when a record was last updated by Fivetran.",
          "fieldPath": "_fivetran_synced",
          "nativeType": "Not Set"
        },
        {
          "fieldPath": "source_relation",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.dbt_utils.type_numeric",
            "macro.dbt_utils.type_timestamp",
            "macro.dbt_utils.type_string"
          ],
          "description": "",
          "name": "get_transaction_columns",
          "packageName": "shopify_source",
          "sql": "{% macro get_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"transaction_id\"},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"device_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"gateway\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"payment_avs_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_bin\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_cvv_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_exchange_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_adjustment\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_original_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_final_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"test\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{% if target.type in ('redshift','postgres') %}\n {{ columns.append({\"name\": \"authorization\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"authorization\"}) }}\n{% else %}\n {\"name\": \"authorization\", \"datatype\": dbt_utils.type_string()}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
          "uniqueId": "macro.shopify_source.get_transaction_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.quote_column"
          ],
          "description": "",
          "name": "fill_staging_columns",
          "packageName": "fivetran_utils",
          "sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
          "uniqueId": "macro.fivetran_utils.fill_staging_columns"
        },
        {
          "arguments": [],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__source_relation"
          ],
          "description": "",
          "name": "source_relation",
          "packageName": "fivetran_utils",
          "sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.source_relation"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~48601A180F09BFD2C745129FB16FF65B",
        "type": "TABLE"
      },
      "packageName": "shopify_source",
      "rawSql": "with source as (\n\n    select * from {{ ref('stg_shopify__transaction_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__transaction_tmp')),\n                staging_columns=get_transaction_columns()\n            )\n        }}\n\n         --The below script allows for pass through columns.\n        {% if var('transaction_pass_through_columns') %}\n        ,\n        {{ var('transaction_pass_through_columns') | join (\", \")}}\n\n        {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n    where not test\n\n)\n\nselect * from renamed",
      "sourceDatasets": [],
      "sourceModels": [
        "VIRTUAL_VIEW~0905F9D0D082B360DFB0F01BB53E5B79"
      ],
      "tags": [],
      "tests": [
        {
          "columns": [],
          "dependsOnMacros": [
            "macro.dbt_utils.test_unique_combination_of_columns",
            "macro.dbt_utils.default__test_unique_combination_of_columns"
          ],
          "name": "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation",
          "sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from DEV_DB.DBT_DEV_stg_shopify.stg_shopify__transaction\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
          "uniqueId": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2"
        }
      ]
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__transaction",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.customer\n\n\n\n",
      "fields": [
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "accepts_marketing",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "created_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "default_address_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "email",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "first_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "last_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "orders_count",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "phone",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "state",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "tax_exempt",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_spent",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "updated_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "verified_email",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~3BC881B39995DDFF6703976F4EB37549",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='customer', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='customer_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~C7103D7E86CF4DA676A09708408BF0DA"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__customer_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from DEV_DB.shopify.order_adjustment\n\n\n\n",
      "fields": [
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "refund_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "amount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "tax_amount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "kind",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "reason",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "amount_set",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "tax_amount_set",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~4879652C646AADB2B4338C8BA7ADFE52",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_adjustment', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_adjustment_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~E19058BA4AD71ECC2E3AB04A8F7A3C89"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_adjustment_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from DEV_DB.shopify.order_line_refund\n\n\n\n",
      "fields": [
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "location_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_line_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "quantity",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "refund_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "restock_type",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "subtotal",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_tax",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~5AD6B1677601F84640F598D984FA2E08",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_line_refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_refund_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~781D2C57E5199A1BB81BED5D40D1931C"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_line_refund_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.order_line\n\n\n\n",
      "fields": [
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "fulfillable_quantity",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "fulfillment_service",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "fulfillment_status",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "gift_card",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "grams",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "product_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "quantity",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "requires_shipping",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "sku",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "taxable",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "title",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_discount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "variant_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "vendor",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~F979EDF102FF80F14B9BE4155E970457",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~0C7AC9F08D591F6A79293F08A469D206"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_line_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.\"ORDER\"\n\n\n\n",
      "fields": [
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "app_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_address_1",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_address_2",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_city",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_company",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_country",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_country_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_first_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_last_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_latitude",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_longitude",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_phone",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_province",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_province_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "billing_address_zip",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "browser_ip",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "buyer_accepts_marketing",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "cancel_reason",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "cancelled_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "cart_token",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "closed_at",
          "nativeType": "TIMESTAMP_NTZ"
        },
        {
          "fieldPath": "created_at",
          "nativeType": "TIMESTAMP_NTZ"
        },
        {
          "fieldPath": "currency",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "customer_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "email",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "financial_status",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "fulfillment_status",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "landing_site_base_url",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "location_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "note",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "number",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_number",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "processed_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "processing_method",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "referring_site",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_address_1",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_address_2",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_city",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_company",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_country",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_country_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_first_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_last_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_latitude",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_longitude",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_phone",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_province",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_province_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "shipping_address_zip",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "source_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "subtotal_price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "taxes_included",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "test",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "token",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_discounts",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_line_items_price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_tax",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_weight",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "updated_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "user_id",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~60242DE40530A2BB189EF02AAEAB3FC0",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~95DF342667A8842C9AFDEF273C351AC6"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__order_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.product\n\n\n\n",
      "fields": [
        {
          "fieldPath": "_fivetran_deleted",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "created_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "handle",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "product_type",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "published_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "published_scope",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "title",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "updated_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "vendor",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~0B95D732D78BA8464B44D684415D70D8",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~B1610C998695141D13E9A9914CC1E85F"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__product_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.product_variant\n\n\n\n",
      "fields": [
        {
          "fieldPath": "barcode",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "compare_at_price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "created_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "fulfillment_service",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "grams",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "image_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "inventory_item_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "inventory_management",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "inventory_policy",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "inventory_quantity",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "old_inventory_quantity",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "option_1",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "option_2",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "option_3",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "position",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "product_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "requires_shipping",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "sku",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "taxable",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "tax_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "title",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "updated_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "weight",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "weight_unit",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_shipping_price_set",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "index",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "pre_tax_price",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~D8CB0AAD4FBEFA15FE6FBA43522037A2",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product_variant', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_variant_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~EECBC76B39953FBCA99119C4D621E902"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__product_variant_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n\n\n\n\n\n\n    select * \n    from DEV_DB.shopify.refund\n\n\n\n",
      "fields": [
        {
          "fieldPath": "id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "created_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "processed_at",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "note",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "restock",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "user_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "total_duties_set",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_id",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~BCA294157C9DF8AA2EFA4E1623CE4738",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='refund_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~A29D1EE2ADEA08258193CC28DDA53AEB"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__refund_tmp",
      "type": "DBT_MODEL"
    }
  },
  {
    "dbtModel": {
      "compiledSql": "\n\n\n\n    select * \n    from DEV_DB.shopify.transaction\n\n\n\n",
      "fields": [
        {
          "fieldPath": "transaction_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "order_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "refund_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "amount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "authorization",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "created_timestamp",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "processed_timestamp",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "device_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "gateway",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "source_name",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "message",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "location_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "parent_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "payment_avs_result_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "payment_credit_card_bin",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "payment_cvv_result_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "payment_credit_card_number",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "payment_credit_card_company",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "kind",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "receipt",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency_exchange_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency_exchange_adjustment",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency_exchange_original_amount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency_exchange_final_amount",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "currency_exchange_currency",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "error_code",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "status",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "test",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "user_id",
          "nativeType": "TEXT"
        },
        {
          "fieldPath": "_fivetran_synced",
          "nativeType": "TEXT"
        }
      ],
      "macros": [
        {
          "arguments": [
            {
              "description": "",
              "name": "table_identifier",
              "type": "string"
            },
            {
              "description": "",
              "name": "database_variable",
              "type": "string"
            }
          ],
          "dependsOnMacros": [
            "macro.fivetran_utils.default__union_data"
          ],
          "description": "",
          "name": "union_data",
          "packageName": "fivetran_utils",
          "sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
          "uniqueId": "macro.fivetran_utils.union_data"
        }
      ],
      "materialization": {
        "targetDataset": "DATASET~6A08E7B8252BB267DDC65B46CA4BBB7F",
        "type": "VIEW"
      },
      "packageName": "shopify_source",
      "rawSql": "{{\n    fivetran_utils.union_data(\n        table_identifier='transaction', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='transaction_source'\n    )\n}}",
      "sourceDatasets": [
        "DATASET~11E8D048BB2568C0D5AF960FB73972CA"
      ],
      "sourceModels": [],
      "tags": []
    },
    "logicalId": {
      "name": "shopify_source.stg_shopify__transaction_tmp",
      "type": "DBT_MODEL"
    }
  }
]
