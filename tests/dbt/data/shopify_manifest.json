{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json",
    "dbt_version": "0.20.2",
    "generated_at": "2021-10-06T02:46:51.199442Z",
    "invocation_id": "0ffff51a-384e-4921-b3f5-95595357d005",
    "env": {},
    "project_id": "329a01fddb5a552265170b02c579c85f",
    "user_id": "01729962-58fc-4236-a1e6-acf0d8e9620a",
    "send_anonymous_usage_stats": true,
    "adapter_type": "snowflake"
  },
  "nodes": {
    "model.shopify.shopify__customer_cohorts": {
      "raw_sql": "with calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt_utils.date_trunc('month','date_day') }} as date) = date_day\n\n), customers as (\n\n    select *\n    from {{ ref('shopify__customers') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        {{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as cohort_month\n    from calendar\n    inner join customers\n        on cast({{ dbt_utils.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast({{ dbt_utils.date_trunc('month', 'created_timestamp') }} as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    {% set partition_string = 'partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row' %}\n\n    select\n        *,\n        sum(total_price_in_month) over ({{ partition_string }}) as total_price_lifetime,\n        sum(order_count_in_month) over ({{ partition_string }}) as order_count_lifetime,\n        sum(line_item_count_in_month) over ({{ partition_string }}) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        {{ dbt_utils.surrogate_key(['date_month','customer_id','source_relation']) }} as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.surrogate_key"
        ],
        "nodes": [
          "model.shopify.shopify__calendar",
          "model.shopify.shopify__customers",
          "model.shopify.shopify__orders"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__customer_cohorts"
      ],
      "unique_id": "model.shopify.shopify__customer_cohorts",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__customer_cohorts.sql",
      "original_file_path": "models/shopify__customer_cohorts.sql",
      "name": "shopify__customer_cohorts",
      "alias": "shopify__customer_cohorts",
      "checksum": {
        "name": "sha256",
        "checksum": "4179fd82cc1aafd2c0e61ad2e4d8d0a2d4a6daf2afbb91a70bc77cc7311cf1aa"
      },
      "tags": [],
      "refs": [
        [
          "shopify__calendar"
        ],
        [
          "shopify__customers"
        ],
        [
          "shopify__orders"
        ]
      ],
      "sources": [],
      "description": "Each record represents a customer's performance in a calendar month.",
      "columns": {
        "cohort_month": {
          "name": "cohort_month",
          "description": "The month the cohort belongs to, i.e the first month the customer had an order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cohort_month_number": {
          "name": "cohort_month_number",
          "description": "The 'number' of the `date_month` of the record, i.e. how many months from their start month this cohort occurred",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_cohort_id": {
          "name": "customer_cohort_id",
          "description": "Unique key representing a customer in a given month.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "The ID of the related customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "date_month": {
          "name": "date_month",
          "description": "The calendar month the customer stats relate to.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_order_timestamp": {
          "name": "first_order_timestamp",
          "description": "The timestamp of the customer's first order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_item_count_in_month": {
          "name": "line_item_count_in_month",
          "description": "Number of line items purchased in the `date_month`",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_item_count_lifetime": {
          "name": "line_item_count_lifetime",
          "description": "Number of line items purchased up until and including this `date_month`.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_count_in_month": {
          "name": "order_count_in_month",
          "description": "Number of orders purchased in the `date_month`",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_count_lifetime": {
          "name": "order_count_lifetime",
          "description": "Number of orders purchased up until and including this `date_month`.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price_in_month": {
          "name": "total_price_in_month",
          "description": "Total amount (in currency) purchased in the `date_month`",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price_lifetime": {
          "name": "total_price_lifetime",
          "description": "Total amount (in currency) up until and including this `date_month`.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__customers": {
      "raw_sql": "with customers as (\n\n    select \n        {{ dbt_utils.star(from=ref('stg_shopify__customer'), except=[\"orders_count\", \"total_spent\"]) }}\n    from {{ var('shopify_customer') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__customers__order_aggregates' )}}\n\n), joined as (\n\n    select \n        customers.*,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        coalesce(orders.average_order_value, 0) as average_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_amount,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders\n    from customers\n    left join orders\n        using (customer_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.star"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__customer",
          "model.shopify_source.stg_shopify__customer",
          "model.shopify.shopify__customers__order_aggregates"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__customers"
      ],
      "unique_id": "model.shopify.shopify__customers",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__customers.sql",
      "original_file_path": "models/shopify__customers.sql",
      "name": "shopify__customers",
      "alias": "shopify__customers",
      "checksum": {
        "name": "sha256",
        "checksum": "70e28dce05bc26f7fc7678928e4bf4ab455d399c6f314f54d3c4671be96d3b7e"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__customer"
        ],
        [
          "stg_shopify__customer"
        ],
        [
          "shopify__customers__order_aggregates"
        ]
      ],
      "sources": [],
      "description": "Each record represents a customer in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_accepted_marketing": {
          "name": "has_accepted_marketing",
          "description": "Whether the customer has consented to receive marketing material via email.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the customer was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "default_address_id": {
          "name": "default_address_id",
          "description": "The default address for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_name": {
          "name": "first_name",
          "description": "The customer's first name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "A unique identifier for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "last_name": {
          "name": "last_name",
          "description": "The customer's last name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "lifetime_count_orders": {
          "name": "lifetime_count_orders",
          "description": "The number of orders associated with this customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone": {
          "name": "phone",
          "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_state": {
          "name": "account_state",
          "description": "The state of the customer's account with a shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_tax_exempt": {
          "name": "is_tax_exempt",
          "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time when the customer information was last updated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_verified_email": {
          "name": "is_verified_email",
          "description": "Whether the customer has verified their email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_order_timestamp": {
          "name": "first_order_timestamp",
          "description": "The timestamp the customer completed their first order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "most_recent_order_timestamp": {
          "name": "most_recent_order_timestamp",
          "description": "The timestamp the customer completed their most recent order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "average_order_value": {
          "name": "average_order_value",
          "description": "The average order value for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "lifetime_total_spent": {
          "name": "lifetime_total_spent",
          "description": "The total amount of money that the customer has spent on orders across their order history.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "lifetime_total_refunded": {
          "name": "lifetime_total_refunded",
          "description": "The total amount of money that the customer has been refunded on orders across their order history.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "lifetime_total_amount": {
          "name": "lifetime_total_amount",
          "description": "The total amount of money (minus refunds) that the customer has spent across their order history.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__order_lines": {
      "raw_sql": "with order_lines as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), product_variants as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        order_lines.*,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        {% endif %}\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n        product_variants.title as variant_title,\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n        product_variants.inventory_management as variant_inventory_management,\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_requiring_shipping as variant_is_requiring_shipping\n    from order_lines\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    {% endif %}\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n\n)\n\nselect *\nfrom joined",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.enabled_vars"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line",
          "model.shopify_source.stg_shopify__product_variant",
          "model.shopify.shopify__orders__order_refunds"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__order_lines"
      ],
      "unique_id": "model.shopify.shopify__order_lines",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__order_lines.sql",
      "original_file_path": "models/shopify__order_lines.sql",
      "name": "shopify__order_lines",
      "alias": "shopify__order_lines",
      "checksum": {
        "name": "sha256",
        "checksum": "c9fa8308e1257375b69ec4b40135a4d1ad64fab1d9e0c14b7a353132438df5d8"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_line"
        ],
        [
          "stg_shopify__product_variant"
        ],
        [
          "shopify__orders__order_refunds"
        ]
      ],
      "sources": [],
      "description": "Each record represents a line item of an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillable_quantity": {
          "name": "fulfillable_quantity",
          "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_service": {
          "name": "fulfillment_service",
          "description": "The service provider that's fulfilling the item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "How far along an order is in terms line items fulfilled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_gift_card": {
          "name": "is_gift_card",
          "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "grams": {
          "name": "grams",
          "description": "The weight of the item in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_line_id": {
          "name": "order_line_id",
          "description": "The ID of the line item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The name of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID of the related order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "price": {
          "name": "price",
          "description": "The price of the item before discounts have been applied in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "The number of items that were purchased.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_requiring_shipping": {
          "name": "is_requiring_shipping",
          "description": "Whether the item requires shipping.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "sku": {
          "name": "sku",
          "description": "The item's SKU (stock keeping unit).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_taxable": {
          "name": "is_taxable",
          "description": "Whether the item was taxable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The title of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discount": {
          "name": "total_discount",
          "description": "The total amount of the discount allocated to the line item in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_id": {
          "name": "variant_id",
          "description": "The ID of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the item's supplier.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refunded_quantity": {
          "name": "refunded_quantity",
          "description": "Quantity of the item that has been refunded.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity_net_refunds": {
          "name": "quantity_net_refunds",
          "description": "Quantity ordered, excluding refunds.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_barcode": {
          "name": "variant_barcode",
          "description": "The barcode, UPC, or ISBN number for the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_compare_at_price": {
          "name": "variant_compare_at_price",
          "description": "The original price of the item before an adjustment or a sale.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_created_at": {
          "name": "variant_created_at",
          "description": "The date and time (ISO 8601 format) when the product variant was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_fulfillment_service": {
          "name": "variant_fulfillment_service",
          "description": "The fulfillment service associated with the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_grams": {
          "name": "variant_grams",
          "description": "The weight of the product variant in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_image_id": {
          "name": "variant_image_id",
          "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_item_id": {
          "name": "inventory_item_id",
          "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_inventory_management": {
          "name": "variant_inventory_management",
          "description": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_inventory_policy": {
          "name": "variant_inventory_policy",
          "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_inventory_quantity": {
          "name": "variant_inventory_quantity",
          "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_option_1": {
          "name": "variant_option_1",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_option_2": {
          "name": "variant_option_2",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_option_3": {
          "name": "variant_option_3",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_position": {
          "name": "variant_position",
          "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_price": {
          "name": "variant_price",
          "description": "The price of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_is_requiring_shipping": {
          "name": "variant_is_requiring_shipping",
          "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_sku": {
          "name": "variant_sku",
          "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_is_taxable": {
          "name": "variant_is_taxable",
          "description": "Whether a tax is charged when the product variant is sold.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_title": {
          "name": "variant_title",
          "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_updated_at": {
          "name": "variant_updated_at",
          "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_weight": {
          "name": "variant_weight",
          "description": "The weight of the product variant in the unit system specified with weight_unit.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_weight_unit": {
          "name": "variant_weight_unit",
          "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refunded_subtotal": {
          "name": "refunded_subtotal",
          "description": "Subtotal amount of the refund applied to the order line.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_net_refunds": {
          "name": "subtotal_net_refunds",
          "description": "Subtotal of the order line with refunds subtracted.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "image_id": {
          "name": "image_id",
          "description": "Image id of the product variant associated with the order line.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__orders": {
      "raw_sql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n{% if var('shopify__using_order_adjustment', true) %}\n), order_adjustments as (\n\n    select *\n    from {{ var('shopify_order_adjustment') }}\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast({{ fivetran_utils.json_parse(\"total_shipping_price_set\",[\"shop_money\",\"amount\"]) }} as {{ dbt_utils.type_float() }}) ,0) as shipping_cost,\n        \n        {% if var('shopify__using_order_adjustment', true) %}\n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n        {% endif %}\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n        {% endif %}\n        (orders.total_price\n            {% if var('shopify__using_order_adjustment', true) %}\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            {% endif %}\n            {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)\n            {% endif %} ) as order_adjusted_total,\n        order_lines.line_item_count\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n\n    {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    {% endif %}\n    {% if var('shopify__using_order_adjustment', true) %}\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    {% endif %}\n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.enabled_vars",
          "macro.fivetran_utils.json_parse",
          "macro.dbt_utils.type_float"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order",
          "model.shopify.shopify__orders__order_line_aggregates",
          "model.shopify_source.stg_shopify__order_adjustment",
          "model.shopify.shopify__orders__order_refunds"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__orders"
      ],
      "unique_id": "model.shopify.shopify__orders",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__orders.sql",
      "original_file_path": "models/shopify__orders.sql",
      "name": "shopify__orders",
      "alias": "shopify__orders",
      "checksum": {
        "name": "sha256",
        "checksum": "314b165b27050181ab0f5a6e4bcd722c3f6918af348f575dd942f4c6aee4eb0c"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order"
        ],
        [
          "shopify__orders__order_line_aggregates"
        ],
        [
          "stg_shopify__order_adjustment"
        ],
        [
          "shopify__orders__order_refunds"
        ]
      ],
      "sources": [],
      "description": "Each record represents an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "app_id": {
          "name": "app_id",
          "description": "The ID of the app that created the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_1": {
          "name": "billing_address_address_1",
          "description": "The street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_2": {
          "name": "billing_address_address_2",
          "description": "An optional additional field for the street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_city": {
          "name": "billing_address_city",
          "description": "The city, town, or village of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_company": {
          "name": "billing_address_company",
          "description": "The company of the person associated with the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country": {
          "name": "billing_address_country",
          "description": "The name of the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country_code": {
          "name": "billing_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_first_name": {
          "name": "billing_address_first_name",
          "description": "The first name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_last_name": {
          "name": "billing_address_last_name",
          "description": "The last name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_latitude": {
          "name": "billing_address_latitude",
          "description": "The latitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_longitude": {
          "name": "billing_address_longitude",
          "description": "The longitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_name": {
          "name": "billing_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_phone": {
          "name": "billing_address_phone",
          "description": "The phone number at the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province": {
          "name": "billing_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province_code": {
          "name": "billing_address_province_code",
          "description": "The two-letter abbreviation of the region of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_zip": {
          "name": "billing_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "browser_ip": {
          "name": "browser_ip",
          "description": "The IP address of the browser used by the customer when they placed the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_buyer_accepted_marketing": {
          "name": "has_buyer_accepted_marketing",
          "description": "Whether the customer consented to receive email updates from the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancel_reason": {
          "name": "cancel_reason",
          "description": "The reason why the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancelled_timestamp": {
          "name": "cancelled_timestamp",
          "description": "The date and time when the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cart_token": {
          "name": "cart_token",
          "description": "The ID of the cart that's associated with the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "closed_timestamp": {
          "name": "closed_timestamp",
          "description": "The date and time when the order was closed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The autogenerated date and time when the order was created in Shopify.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code for the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "The ID of the order's customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The customer's email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "financial_status": {
          "name": "financial_status",
          "description": "The status of payments associated with the order. Can only be set when the order is created",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "The order's status in terms of fulfilled line items.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "landing_site_base_url": {
          "name": "landing_site_base_url",
          "description": "The URL for the page where the buyer landed when they entered the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the order was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "note": {
          "name": "note",
          "description": "An optional note that a shop owner can attach to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "number": {
          "name": "number",
          "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_number": {
          "name": "order_number",
          "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_timestamp": {
          "name": "processed_timestamp",
          "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processing_method": {
          "name": "processing_method",
          "description": "How the payment was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "referring_site": {
          "name": "referring_site",
          "description": "The website where the customer clicked a link to the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_1": {
          "name": "shipping_address_address_1",
          "description": "The street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_2": {
          "name": "shipping_address_address_2",
          "description": "An optional additional field for the street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_city": {
          "name": "shipping_address_city",
          "description": "The city, town, or village of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_company": {
          "name": "shipping_address_company",
          "description": "The company of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country": {
          "name": "shipping_address_country",
          "description": "The name of the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country_code": {
          "name": "shipping_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_first_name": {
          "name": "shipping_address_first_name",
          "description": "The first name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_last_name": {
          "name": "shipping_address_last_name",
          "description": "The last name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_latitude": {
          "name": "shipping_address_latitude",
          "description": "The latitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_longitude": {
          "name": "shipping_address_longitude",
          "description": "The longitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_name": {
          "name": "shipping_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_phone": {
          "name": "shipping_address_phone",
          "description": "The phone number at the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province": {
          "name": "shipping_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province_code": {
          "name": "shipping_address_province_code",
          "description": "The two-letter abbreviation of the region of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_zip": {
          "name": "shipping_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_price": {
          "name": "subtotal_price",
          "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_taxes_included": {
          "name": "has_taxes_included",
          "description": "Whether taxes are included in the order subtotal.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_test_order": {
          "name": "is_test_order",
          "description": "Whether this is a test order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "token": {
          "name": "token",
          "description": "A unique token for the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discounts": {
          "name": "total_discounts",
          "description": "The total discounts applied to the price of the order in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_line_items_price": {
          "name": "total_line_items_price",
          "description": "The sum of all line item prices in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price": {
          "name": "total_price",
          "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_tax": {
          "name": "total_tax",
          "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_weight": {
          "name": "total_weight",
          "description": "The sum of all line item weights in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time (ISO 8601 format) when the order was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_item_count": {
          "name": "line_item_count",
          "description": "Number of line items included in the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_order_seq_number": {
          "name": "customer_order_seq_number",
          "description": "The sequential number of the order as it relates to the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "new_vs_repeat": {
          "name": "new_vs_repeat",
          "description": "Whether the order was a new or repeat order for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_cost": {
          "name": "shipping_cost",
          "description": "The shipping cost of the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_adjustment_amount": {
          "name": "order_adjustment_amount",
          "description": "Total adjustment amount applied to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_adjustment_tax_amount": {
          "name": "order_adjustment_tax_amount",
          "description": "Total tax applied to the adjustment on the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_subtotal": {
          "name": "refund_subtotal",
          "description": "Total refund amount applied to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_total_tax": {
          "name": "refund_total_tax",
          "description": "Total tax applied to the refund on the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_adjusted_total": {
          "name": "order_adjusted_total",
          "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "index": {
          "name": "index",
          "description": "Field representing the index of the order line in relation to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "pre_tax_price": {
          "name": "pre_tax_price",
          "description": "The pre tax price of the order line.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "checkout_token": {
          "name": "checkout_token",
          "description": "The checkout token applied to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_shipping_price_set": {
          "name": "total_shipping_price_set",
          "description": "The total shipping price set to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__products": {
      "raw_sql": "with products as (\n\n    select *\n    from {{ var('shopify_product') }}\n\n), order_lines as (\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders')}}\n\n), order_lines_aggregated as (\n\n    select \n        order_lines.product_id, \n        order_lines.source_relation,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        {% endif %}\n\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp\n    from order_lines\n    left join orders\n        using (order_id, source_relation)\n    group by 1,2\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(order_lines_aggregated.quantity_sold,0) as quantity_sold,\n        coalesce(order_lines_aggregated.subtotal_sold,0) as subtotal_sold,\n\n        {% if fivetran_utils.enabled_vars(vars=[\"shopify__using_order_line_refund\", \"shopify__using_refund\"]) %}\n        coalesce(order_lines_aggregated.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(order_lines_aggregated.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        {% endif %}\n        \n        order_lines_aggregated.first_order_timestamp,\n        order_lines_aggregated.most_recent_order_timestamp\n    from products\n    left join order_lines_aggregated\n        using (product_id, source_relation)\n\n)\n\nselect *\nfrom joined",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.enabled_vars"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__product",
          "model.shopify.shopify__order_lines",
          "model.shopify.shopify__orders"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__products"
      ],
      "unique_id": "model.shopify.shopify__products",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__products.sql",
      "original_file_path": "models/shopify__products.sql",
      "name": "shopify__products",
      "alias": "shopify__products",
      "checksum": {
        "name": "sha256",
        "checksum": "e699f3d418cc215e557b5a7ad0705f82470c62c8b54b3fbb29a2896c507ba033"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__product"
        ],
        [
          "shopify__order_lines"
        ],
        [
          "shopify__orders"
        ]
      ],
      "sources": [],
      "description": "Each record represents a product in Shopify.",
      "columns": {
        "_fivetran_deleted": {
          "name": "_fivetran_deleted",
          "description": "Whether the record has been deleted in the source system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the product was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "handle": {
          "name": "handle",
          "description": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_type": {
          "name": "product_type",
          "description": "A categorization for the product used for filtering and searching products.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_timestamp": {
          "name": "published_timestamp",
          "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_scope": {
          "name": "published_scope",
          "description": "Whether the product is published to the Point of Sale channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The name of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time when the product was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the product's vendor.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity_sold": {
          "name": "quantity_sold",
          "description": "Quantity of the product sold.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_sold": {
          "name": "subtotal_sold",
          "description": "Total amount of the product sold.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity_sold_net_refunds": {
          "name": "quantity_sold_net_refunds",
          "description": "Quantity of the product sold, excluding refunds.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_sold_net_refunds": {
          "name": "subtotal_sold_net_refunds",
          "description": "Total amount of the product sold, excluding refunds.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_order_timestamp": {
          "name": "first_order_timestamp",
          "description": "The timestamp the product was first ordered.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "most_recent_order_timestamp": {
          "name": "most_recent_order_timestamp",
          "description": "The timestamp the product was most recently ordered.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__transactions": {
      "raw_sql": "with transactions as (\n    select *\n    from {{ var('shopify_transaction') }}\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) as exchange_rate,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt_utils.type_numeric() }} ),1) * amount as currency_exchange_calculated_amount\n    from transactions\n\n)\n\nselect *\nfrom exchange_rate",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.json_parse",
          "macro.dbt_utils.type_numeric"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__transaction"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "shopify__transactions"
      ],
      "unique_id": "model.shopify.shopify__transactions",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "shopify__transactions.sql",
      "original_file_path": "models/shopify__transactions.sql",
      "name": "shopify__transactions",
      "alias": "shopify__transactions",
      "checksum": {
        "name": "sha256",
        "checksum": "88e4a9aa6d2acc8dbe0e1d3f280087b5adb6a730391785680d0bf112b0923906"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__transaction"
        ]
      ],
      "sources": [],
      "description": "Each record represents a transaction in Shopify.",
      "columns": {
        "transaction_id": {
          "name": "transaction_id",
          "description": "The ID for the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID for the order that the transaction is associated with.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "The ID associated with a refund in the refund table.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount": {
          "name": "amount",
          "description": "The amount of money included in the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "authorization": {
          "name": "authorization",
          "description": "The authorization code associated with the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the transaction was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_timestamp": {
          "name": "processed_timestamp",
          "description": "The date and time when a transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "device_id": {
          "name": "device_id",
          "description": "The ID for the device.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gateway": {
          "name": "gateway",
          "description": "The name of the gateway the transaction was issued through.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "The origin of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "message": {
          "name": "message",
          "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "parent_id": {
          "name": "parent_id",
          "description": "The ID of an associated transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_avs_result_code": {
          "name": "payment_avs_result_code",
          "description": "The response code from the address verification system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_bin": {
          "name": "payment_credit_card_bin",
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_cvv_result_code": {
          "name": "payment_cvv_result_code",
          "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_number": {
          "name": "payment_credit_card_number",
          "description": "The customer's credit card number, with most of the leading digits redacted.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_company": {
          "name": "payment_credit_card_company",
          "description": "The name of the company that issued the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "kind": {
          "name": "kind",
          "description": "The transaction's type.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt": {
          "name": "receipt",
          "description": "A transaction receipt attached to the transaction by the gateway.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_id": {
          "name": "currency_exchange_id",
          "description": "The ID of the adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_adjustment": {
          "name": "currency_exchange_adjustment",
          "description": "The difference between the amounts on the associated transaction and the parent transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_original_amount": {
          "name": "currency_exchange_original_amount",
          "description": "The amount of the parent transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_final_amount": {
          "name": "currency_exchange_final_amount",
          "description": "The amount of the associated transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_currency": {
          "name": "currency_exchange_currency",
          "description": "The shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "error_code": {
          "name": "error_code",
          "description": "A standardized error code, independent of the payment provider.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status": {
          "name": "status",
          "description": "The status of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "test": {
          "name": "test",
          "description": "Whether the transaction is a test transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "Timestamp of the date the record was synced by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "exchange_rate": {
          "name": "exchange_rate",
          "description": "The exchange rate between the home currency and the currency of sale at the time of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_calculated_amount": {
          "name": "currency_exchange_calculated_amount",
          "description": "The total amount of the transaction with the currency exchange rate applied.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__customers__order_aggregates": {
      "raw_sql": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), transactions as (\n\n    select *\n    from {{ ref('shopify__transactions' )}}\n    where lower(status) = 'success'\n/*\n), transaction_refund_adjustment as (\n\n    select\n        *,\n        case when lower(kind) = 'refund'\n            then currency_exchange_calculated_amount * -1\n            else currency_exchange_calculated_amount\n                end as adjusted_amount\n    from transactions\n*/\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as average_order_value,\n        sum(case when lower(transactions.kind) in ('sale','capture') then transactions.currency_exchange_calculated_amount end) as lifetime_total_spent,\n        sum(case when lower(transactions.kind) in ('refund') then transactions.currency_exchange_calculated_amount end) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders\n    from orders\n    left join transactions\n        using (order_id, source_relation)\n    where customer_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.shopify_source.stg_shopify__order",
          "model.shopify.shopify__transactions"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "ephemeral",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "intermediate",
        "shopify__customers__order_aggregates"
      ],
      "unique_id": "model.shopify.shopify__customers__order_aggregates",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "intermediate/shopify__customers__order_aggregates.sql",
      "original_file_path": "models/intermediate/shopify__customers__order_aggregates.sql",
      "name": "shopify__customers__order_aggregates",
      "alias": "shopify__customers__order_aggregates",
      "checksum": {
        "name": "sha256",
        "checksum": "ee5443a42984faffeacbf043757bb8e443d1625ee07c8b4afcd2f41395198d98"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order"
        ],
        [
          "shopify__transactions"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/intermediate/intermediate.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "ephemeral"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__orders__order_line_aggregates": {
      "raw_sql": "with order_line as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), aggregated as (\n\n    select \n        order_id,\n        source_relation,\n        count(*) as line_item_count\n    from order_line\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated",
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "ephemeral",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "intermediate",
        "shopify__orders__order_line_aggregates"
      ],
      "unique_id": "model.shopify.shopify__orders__order_line_aggregates",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "intermediate/shopify__orders__order_line_aggregates.sql",
      "original_file_path": "models/intermediate/shopify__orders__order_line_aggregates.sql",
      "name": "shopify__orders__order_line_aggregates",
      "alias": "shopify__orders__order_line_aggregates",
      "checksum": {
        "name": "sha256",
        "checksum": "837181b671b2beb8e58924357d213e33d6479a47e16c604db35cbb6ce6489fa8"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_line"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/intermediate/intermediate.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "ephemeral"
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__orders__order_refunds": {
      "raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['shopify__using_order_line_refund','shopify__using_refund'])) }}\n\nwith refunds as (\n\n    select *\n    from {{ var('shopify_refund') }}\n\n), order_line_refunds as (\n\n    select *\n    from {{ var('shopify_order_line_refund') }}\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.enabled_vars"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__refund",
          "model.shopify_source.stg_shopify__order_line_refund"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "ephemeral",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "intermediate",
        "shopify__orders__order_refunds"
      ],
      "unique_id": "model.shopify.shopify__orders__order_refunds",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "intermediate/shopify__orders__order_refunds.sql",
      "original_file_path": "models/intermediate/shopify__orders__order_refunds.sql",
      "name": "shopify__orders__order_refunds",
      "alias": "shopify__orders__order_refunds",
      "checksum": {
        "name": "sha256",
        "checksum": "1bcc3be258e3bdda4c6845e465f95e7e5b4e0eee823b169e0cd5e7eff4cf7792"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__refund"
        ],
        [
          "stg_shopify__order_line_refund"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify://models/intermediate/intermediate.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "ephemeral",
        "enabled": true
      },
      "created_at": 1633488422
    },
    "model.shopify.shopify__calendar": {
      "raw_sql": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"cast('2019-01-01' as date)\",\n    end_date=\"current_date\"\n   )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.date_spine"
        ],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_shopify",
      "fqn": [
        "shopify",
        "utils",
        "shopify__calendar"
      ],
      "unique_id": "model.shopify.shopify__calendar",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "utils/shopify__calendar.sql",
      "original_file_path": "models/utils/shopify__calendar.sql",
      "name": "shopify__calendar",
      "alias": "shopify__calendar",
      "checksum": {
        "name": "sha256",
        "checksum": "330711091f6b47526ac5e8bc39960b2d171633362c0e10b666931be500abeddd"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "shopify",
        "materialized": "table"
      },
      "created_at": 1633488419
    },
    "model.shopify_source.stg_shopify__customer": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__customer_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('customer_pass_through_columns') %}\n      ,\n      {{ var('customer_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_customer_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__customer_tmp",
          "model.shopify_source.stg_shopify__customer_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__customer"
      ],
      "unique_id": "model.shopify_source.stg_shopify__customer",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__customer.sql",
      "original_file_path": "models/stg_shopify__customer.sql",
      "name": "stg_shopify__customer",
      "alias": "stg_shopify__customer",
      "checksum": {
        "name": "sha256",
        "checksum": "a7d42c71ede18f414c79aca441e3e9fc49f3ab0a3b2947dcfe7b50f3658e54b7"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__customer_tmp"
        ],
        [
          "stg_shopify__customer_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a customer in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_accepted_marketing": {
          "name": "has_accepted_marketing",
          "description": "Whether the customer has consented to receive marketing material via email.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the customer was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "default_address_id": {
          "name": "default_address_id",
          "description": "The default address for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_name": {
          "name": "first_name",
          "description": "The customer's first name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "A unique identifier for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "last_name": {
          "name": "last_name",
          "description": "The customer's last name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "orders_count": {
          "name": "orders_count",
          "description": "The number of orders associated with this customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone": {
          "name": "phone",
          "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_state": {
          "name": "account_state",
          "description": "The state of the customer's account with a shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_tax_exempt": {
          "name": "is_tax_exempt",
          "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_spent": {
          "name": "total_spent",
          "description": "The total amount of money that the customer has spent across their order history.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time when the customer information was last updated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_verified_email": {
          "name": "is_verified_email",
          "description": "Whether the customer has verified their email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__order": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_pass_through_columns') %}\n      ,\n      {{ var('order_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_order_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_tmp",
          "model.shopify_source.stg_shopify__order_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__order"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__order.sql",
      "original_file_path": "models/stg_shopify__order.sql",
      "name": "stg_shopify__order",
      "alias": "stg_shopify__order",
      "checksum": {
        "name": "sha256",
        "checksum": "3cdc09dc7decac9a1f68e175f875a7cae2b62d6e9330fb6828625f95901b1e18"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_tmp"
        ],
        [
          "stg_shopify__order_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "app_id": {
          "name": "app_id",
          "description": "The ID of the app that created the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_1": {
          "name": "billing_address_address_1",
          "description": "The street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_2": {
          "name": "billing_address_address_2",
          "description": "An optional additional field for the street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_city": {
          "name": "billing_address_city",
          "description": "The city, town, or village of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_company": {
          "name": "billing_address_company",
          "description": "The company of the person associated with the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country": {
          "name": "billing_address_country",
          "description": "The name of the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country_code": {
          "name": "billing_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_first_name": {
          "name": "billing_address_first_name",
          "description": "The first name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_last_name": {
          "name": "billing_address_last_name",
          "description": "The last name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_latitude": {
          "name": "billing_address_latitude",
          "description": "The latitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_longitude": {
          "name": "billing_address_longitude",
          "description": "The longitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_name": {
          "name": "billing_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_phone": {
          "name": "billing_address_phone",
          "description": "The phone number at the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province": {
          "name": "billing_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province_code": {
          "name": "billing_address_province_code",
          "description": "The two-letter abbreviation of the region of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_zip": {
          "name": "billing_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "browser_ip": {
          "name": "browser_ip",
          "description": "The IP address of the browser used by the customer when they placed the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_buyer_accepted_marketing": {
          "name": "has_buyer_accepted_marketing",
          "description": "Whether the customer consented to receive email updates from the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancel_reason": {
          "name": "cancel_reason",
          "description": "The reason why the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancelled_timestamp": {
          "name": "cancelled_timestamp",
          "description": "The date and time when the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cart_token": {
          "name": "cart_token",
          "description": "The ID of the cart that's associated with the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "closed_timestamp": {
          "name": "closed_timestamp",
          "description": "The date and time when the order was closed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The autogenerated date and time when the order was created in Shopify.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code for the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "The ID of the order's customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The customer's email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "financial_status": {
          "name": "financial_status",
          "description": "The status of payments associated with the order. Can only be set when the order is created",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "The order's status in terms of fulfilled line items.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "landing_site_base_url": {
          "name": "landing_site_base_url",
          "description": "The URL for the page where the buyer landed when they entered the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the order was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "note": {
          "name": "note",
          "description": "An optional note that a shop owner can attach to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "number": {
          "name": "number",
          "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_number": {
          "name": "order_number",
          "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_timestamp": {
          "name": "processed_timestamp",
          "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processing_method": {
          "name": "processing_method",
          "description": "How the payment was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "referring_site": {
          "name": "referring_site",
          "description": "The website where the customer clicked a link to the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_1": {
          "name": "shipping_address_address_1",
          "description": "The street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_2": {
          "name": "shipping_address_address_2",
          "description": "An optional additional field for the street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_city": {
          "name": "shipping_address_city",
          "description": "The city, town, or village of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_company": {
          "name": "shipping_address_company",
          "description": "The company of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country": {
          "name": "shipping_address_country",
          "description": "The name of the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country_code": {
          "name": "shipping_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_first_name": {
          "name": "shipping_address_first_name",
          "description": "The first name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_last_name": {
          "name": "shipping_address_last_name",
          "description": "The last name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_latitude": {
          "name": "shipping_address_latitude",
          "description": "The latitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_longitude": {
          "name": "shipping_address_longitude",
          "description": "The longitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_name": {
          "name": "shipping_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_phone": {
          "name": "shipping_address_phone",
          "description": "The phone number at the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province": {
          "name": "shipping_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province_code": {
          "name": "shipping_address_province_code",
          "description": "The two-letter abbreviation of the region of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_zip": {
          "name": "shipping_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_price": {
          "name": "subtotal_price",
          "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "has_taxes_included": {
          "name": "has_taxes_included",
          "description": "Whether taxes are included in the order subtotal.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_test_order": {
          "name": "is_test_order",
          "description": "Whether this is a test order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "token": {
          "name": "token",
          "description": "A unique token for the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discounts": {
          "name": "total_discounts",
          "description": "The total discounts applied to the price of the order in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_line_items_price": {
          "name": "total_line_items_price",
          "description": "The sum of all line item prices in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price": {
          "name": "total_price",
          "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_tax": {
          "name": "total_tax",
          "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_weight": {
          "name": "total_weight",
          "description": "The sum of all line item weights in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time (ISO 8601 format) when the order was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_shipping_price_set": {
          "name": "total_shipping_price_set",
          "description": "The total shipping price set for the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "index": {
          "name": "index",
          "description": "The index associated with the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "pre_tax_price": {
          "name": "pre_tax_price",
          "description": "The total pre tax price of the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__order_adjustment": {
      "raw_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__order_adjustment_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_adjustment_tmp')),\n                staging_columns=get_order_adjustment_columns()\n            )\n        }}\n\n      {{ fivetran_utils.source_relation() }}\n        \n    from source\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_order_adjustment_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_adjustment_tmp",
          "model.shopify_source.stg_shopify__order_adjustment_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__order_adjustment"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_adjustment",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__order_adjustment.sql",
      "original_file_path": "models/stg_shopify__order_adjustment.sql",
      "name": "stg_shopify__order_adjustment",
      "alias": "stg_shopify__order_adjustment",
      "checksum": {
        "name": "sha256",
        "checksum": "3a5d7764b7f2a24e80cd05eceb0320b5ea1e2fb0d368d8a36e3425110a3c978d"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_adjustment_tmp"
        ],
        [
          "stg_shopify__order_adjustment_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents and adjustment to and order within Shopify.",
      "columns": {
        "order_adjustment_id": {
          "name": "order_adjustment_id",
          "description": "The unique numeric identifier for the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "Reference to the order which the adjustment is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "Reference to the refund which the adjustment is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount": {
          "name": "amount",
          "description": "Amount of the adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_amount": {
          "name": "tax_amount",
          "description": "Tax amount applied to the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "kind": {
          "name": "kind",
          "description": "The kind of order adjustment (eg. refund, restock, etc.).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "reason": {
          "name": "reason",
          "description": "The reason for the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount_set": {
          "name": "amount_set",
          "description": "Amount set towards the order adjustment",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_amount_set": {
          "name": "tax_amount_set",
          "description": "Tax amount set towards the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table",
        "enabled": true
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__order_line": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__order_line_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_tmp')),\n                staging_columns=get_order_line_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_pass_through_columns') %}\n      ,\n      {{ var('order_line_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_order_line_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line_tmp",
          "model.shopify_source.stg_shopify__order_line_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__order_line"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_line",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__order_line.sql",
      "original_file_path": "models/stg_shopify__order_line.sql",
      "name": "stg_shopify__order_line",
      "alias": "stg_shopify__order_line",
      "checksum": {
        "name": "sha256",
        "checksum": "68349da14611befd793465395259fdac460f622fea56a50737344f18ea306eb7"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_line_tmp"
        ],
        [
          "stg_shopify__order_line_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a line item from an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillable_quantity": {
          "name": "fulfillable_quantity",
          "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_service": {
          "name": "fulfillment_service",
          "description": "The service provider that's fulfilling the item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "How far along an order is in terms line items fulfilled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_gift_card": {
          "name": "is_gift_card",
          "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "grams": {
          "name": "grams",
          "description": "The weight of the item in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_line_id": {
          "name": "order_line_id",
          "description": "The ID of the line item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The name of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID of the related order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "price": {
          "name": "price",
          "description": "The price of the item before discounts have been applied in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "The number of items that were purchased.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_requiring_shipping": {
          "name": "is_requiring_shipping",
          "description": "Whether the item requires shipping.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "sku": {
          "name": "sku",
          "description": "The item's SKU (stock keeping unit).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_taxable": {
          "name": "is_taxable",
          "description": "Whether the item was taxable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The title of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discount": {
          "name": "total_discount",
          "description": "The total amount of the discount allocated to the line item in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_id": {
          "name": "variant_id",
          "description": "The ID of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the item's supplier.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__order_line_refund": {
      "raw_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\nwith source as (\n\n    select * from {{ ref('stg_shopify__order_line_refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_refund_tmp')),\n                staging_columns=get_order_line_refund_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('order_line_refund_pass_through_columns') %}\n      ,\n      {{ var('order_line_refund_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_order_line_refund_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line_refund_tmp",
          "model.shopify_source.stg_shopify__order_line_refund_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__order_line_refund"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_line_refund",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__order_line_refund.sql",
      "original_file_path": "models/stg_shopify__order_line_refund.sql",
      "name": "stg_shopify__order_line_refund",
      "alias": "stg_shopify__order_line_refund",
      "checksum": {
        "name": "sha256",
        "checksum": "38e58ff706681b5ad0f1ddf6ce773fbe69638e447c8424ed3da739829ff75862"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__order_line_refund_tmp"
        ],
        [
          "stg_shopify__order_line_refund_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a line item from an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_line_refund_id": {
          "name": "order_line_refund_id",
          "description": "The unique identifier of the line item in the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "TThe unique identifier of the location where the items will be restockedBD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_line_id": {
          "name": "order_line_id",
          "description": "The ID of the related line item in the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "The quantity of the associated line item that was returned.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "The ID of the related refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "restock_type": {
          "name": "restock_type",
          "description": "How this refund line item affects inventory levels.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal": {
          "name": "subtotal",
          "description": "Subtotal amount of the order line refund",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_tax": {
          "name": "total_tax",
          "description": "The total tax applied to the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table",
        "enabled": true
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__product": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_pass_through_columns') %}\n      ,\n      {{ var('product_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_product_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__product_tmp",
          "model.shopify_source.stg_shopify__product_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__product"
      ],
      "unique_id": "model.shopify_source.stg_shopify__product",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__product.sql",
      "original_file_path": "models/stg_shopify__product.sql",
      "name": "stg_shopify__product",
      "alias": "stg_shopify__product",
      "checksum": {
        "name": "sha256",
        "checksum": "454a0f4f97ad46a00c66a6e44c19ce2fa925e83ed2d9b1da79ce485b0df559db"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__product_tmp"
        ],
        [
          "stg_shopify__product_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a product in Shopify.",
      "columns": {
        "_fivetran_deleted": {
          "name": "_fivetran_deleted",
          "description": "Whether the record has been deleted in the source system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the product was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "handle": {
          "name": "handle",
          "description": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_type": {
          "name": "product_type",
          "description": "A categorization for the product used for filtering and searching products.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_timestamp": {
          "name": "published_timestamp",
          "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_scope": {
          "name": "published_scope",
          "description": "Whether the product is published to the Point of Sale channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The name of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time when the product was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the product's vendor.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__product_variant": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__product_variant_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_variant_tmp')),\n                staging_columns=get_product_variant_columns()\n            )\n        }}\n\n      --The below script allows for pass through columns.\n      {% if var('product_variant_pass_through_columns') %}\n      ,\n      {{ var('product_variant_pass_through_columns') | join (\", \")}}\n\n      {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_product_variant_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__product_variant_tmp",
          "model.shopify_source.stg_shopify__product_variant_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__product_variant"
      ],
      "unique_id": "model.shopify_source.stg_shopify__product_variant",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__product_variant.sql",
      "original_file_path": "models/stg_shopify__product_variant.sql",
      "name": "stg_shopify__product_variant",
      "alias": "stg_shopify__product_variant",
      "checksum": {
        "name": "sha256",
        "checksum": "d39f2d43e04060cc67b953c04dad9fbe07ba93d87faeded8f0e655b6eb32b2ea"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__product_variant_tmp"
        ],
        [
          "stg_shopify__product_variant_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a product variant in Shopify",
      "columns": {
        "barcode": {
          "name": "barcode",
          "description": "The barcode, UPC, or ISBN number for the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "compare_at_price": {
          "name": "compare_at_price",
          "description": "The original price of the item before an adjustment or a sale.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time (ISO 8601 format) when the product variant was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_service": {
          "name": "fulfillment_service",
          "description": "The fulfillment service associated with the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "grams": {
          "name": "grams",
          "description": "The weight of the product variant in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_id": {
          "name": "variant_id",
          "description": "The unique numeric identifier for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "image_id": {
          "name": "image_id",
          "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_item_id": {
          "name": "inventory_item_id",
          "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_management": {
          "name": "inventory_management",
          "description": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_policy": {
          "name": "inventory_policy",
          "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_quantity": {
          "name": "inventory_quantity",
          "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "old_inventory_quantity": {
          "name": "old_inventory_quantity",
          "description": "This property is deprecated. Use the InventoryLevel resource instead.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_1": {
          "name": "option_1",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_2": {
          "name": "option_2",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_3": {
          "name": "option_3",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "position": {
          "name": "position",
          "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "price": {
          "name": "price",
          "description": "The price of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "The unique numeric identifier for the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_requiring_shipping": {
          "name": "is_requiring_shipping",
          "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "sku": {
          "name": "sku",
          "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "is_taxable": {
          "name": "is_taxable",
          "description": "Whether a tax is charged when the product variant is sold.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_code": {
          "name": "tax_code",
          "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_timestamp": {
          "name": "updated_timestamp",
          "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "weight": {
          "name": "weight",
          "description": "The weight of the product variant in the unit system specified with weight_unit.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "weight_unit": {
          "name": "weight_unit",
          "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__refund": {
      "raw_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\nwith source as (\n\n    select * \n    from {{ ref('stg_shopify__refund_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n\n      {{ fivetran_utils.source_relation() }}\n        \n    from source\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_refund_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__refund_tmp",
          "model.shopify_source.stg_shopify__refund_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__refund"
      ],
      "unique_id": "model.shopify_source.stg_shopify__refund",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__refund.sql",
      "original_file_path": "models/stg_shopify__refund.sql",
      "name": "stg_shopify__refund",
      "alias": "stg_shopify__refund",
      "checksum": {
        "name": "sha256",
        "checksum": "2714bea88c777916daa6302c0d0f6af63f568359aa893b1c719a3a8ce4c40ec0"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__refund_tmp"
        ],
        [
          "stg_shopify__refund_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a refund within Shopify.",
      "columns": {
        "refund_id": {
          "name": "refund_id",
          "description": "The unique numeric identifier for the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "Timestamp of the date when the refund was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_at": {
          "name": "processed_at",
          "description": "Timestamp of the date when the refund was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "note": {
          "name": "note",
          "description": "User generated note attached to the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "restock": {
          "name": "restock",
          "description": "Boolean indicating if the refund is a result of a restock.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "Reference to the user id which generated the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_duties_set": {
          "name": "total_duties_set",
          "description": "Record representing total duties set for the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "Reference to the order which the refund is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table",
        "enabled": true
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__transaction": {
      "raw_sql": "with source as (\n\n    select * from {{ ref('stg_shopify__transaction_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__transaction_tmp')),\n                staging_columns=get_transaction_columns()\n            )\n        }}\n\n         --The below script allows for pass through columns.\n        {% if var('transaction_pass_through_columns') %}\n        ,\n        {{ var('transaction_pass_through_columns') | join (\", \")}}\n\n        {% endif %}\n\n      {{ fivetran_utils.source_relation() }}\n\n    from source\n    where not test\n\n)\n\nselect * from renamed",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.shopify_source.get_transaction_columns",
          "macro.fivetran_utils.fill_staging_columns",
          "macro.fivetran_utils.source_relation"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__transaction_tmp",
          "model.shopify_source.stg_shopify__transaction_tmp"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "table",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "stg_shopify__transaction"
      ],
      "unique_id": "model.shopify_source.stg_shopify__transaction",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "stg_shopify__transaction.sql",
      "original_file_path": "models/stg_shopify__transaction.sql",
      "name": "stg_shopify__transaction",
      "alias": "stg_shopify__transaction",
      "checksum": {
        "name": "sha256",
        "checksum": "b279f027338918077f969684c153468bc25ab84aa6472be188034d4b1e312dca"
      },
      "tags": [],
      "refs": [
        [
          "stg_shopify__transaction_tmp"
        ],
        [
          "stg_shopify__transaction_tmp"
        ]
      ],
      "sources": [],
      "description": "Each record represents a transaction in Shopify.",
      "columns": {
        "transaction_id": {
          "name": "transaction_id",
          "description": "The ID for the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID for the order that the transaction is associated with.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "The ID associated with a refund in the refund table.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount": {
          "name": "amount",
          "description": "The amount of money included in the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "authorization": {
          "name": "authorization",
          "description": "The authorization code associated with the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the transaction was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_timestamp": {
          "name": "processed_timestamp",
          "description": "The date and time when a transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "device_id": {
          "name": "device_id",
          "description": "The ID for the device.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gateway": {
          "name": "gateway",
          "description": "The name of the gateway the transaction was issued through.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "The origin of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "message": {
          "name": "message",
          "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "parent_id": {
          "name": "parent_id",
          "description": "The ID of an associated transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_avs_result_code": {
          "name": "payment_avs_result_code",
          "description": "The response code from the address verification system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_bin": {
          "name": "payment_credit_card_bin",
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_cvv_result_code": {
          "name": "payment_cvv_result_code",
          "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_number": {
          "name": "payment_credit_card_number",
          "description": "The customer's credit card number, with most of the leading digits redacted.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_company": {
          "name": "payment_credit_card_company",
          "description": "The name of the company that issued the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "kind": {
          "name": "kind",
          "description": "The transaction's type.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt": {
          "name": "receipt",
          "description": "A transaction receipt attached to the transaction by the gateway.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_id": {
          "name": "currency_exchange_id",
          "description": "The ID of the adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_adjustment": {
          "name": "currency_exchange_adjustment",
          "description": "The difference between the amounts on the associated transaction and the parent transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_original_amount": {
          "name": "currency_exchange_original_amount",
          "description": "The amount of the parent transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_final_amount": {
          "name": "currency_exchange_final_amount",
          "description": "The amount of the associated transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_currency": {
          "name": "currency_exchange_currency",
          "description": "The shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "error_code": {
          "name": "error_code",
          "description": "A standardized error code, independent of the payment provider.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status": {
          "name": "status",
          "description": "The status of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "test": {
          "name": "test",
          "description": "Whether the transaction is a test transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": "shopify_source://models/stg_shopify.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "table"
      },
      "created_at": 1633488423
    },
    "model.shopify_source.stg_shopify__customer_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='customer', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='customer_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.customer"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__customer_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__customer_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__customer_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__customer_tmp.sql",
      "name": "stg_shopify__customer_tmp",
      "alias": "stg_shopify__customer_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "2198ae2d5d5b9baf42c3761b6c7584bd37deda02dff2f0aba582831708c198ac"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "customer"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__order_adjustment_tmp": {
      "raw_sql": "--To disable this model, set the shopify__using_order_adjustment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_adjustment', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_adjustment', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_adjustment_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.order_adjustment"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__order_adjustment_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__order_adjustment_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__order_adjustment_tmp.sql",
      "name": "stg_shopify__order_adjustment_tmp",
      "alias": "stg_shopify__order_adjustment_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "8d886e9cebd846bfc2c1497f125fc9249c6087d030feaf4bd58777b708103817"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "order_adjustment"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view",
        "enabled": true
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__order_line_refund_tmp": {
      "raw_sql": "--To disable this model, set the shopify__using_order_line_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_order_line_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='order_line_refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_refund_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.order_line_refund"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__order_line_refund_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__order_line_refund_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__order_line_refund_tmp.sql",
      "name": "stg_shopify__order_line_refund_tmp",
      "alias": "stg_shopify__order_line_refund_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "cdd52194249aa885b6cd43115a05b345d44c15dd99406d9c1ce40a467ab80ace"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "order_line_refund"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view",
        "enabled": true
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__order_line_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.order_line"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__order_line_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_line_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__order_line_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__order_line_tmp.sql",
      "name": "stg_shopify__order_line_tmp",
      "alias": "stg_shopify__order_line_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "7201f98f0ec16b171e0649f9715dce86b5fa54b8cb372306cd079a97138ec984"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "order_line"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__order_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='order', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.order"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__order_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__order_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__order_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__order_tmp.sql",
      "name": "stg_shopify__order_tmp",
      "alias": "stg_shopify__order_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "91f177eb714b9cf8deb303d6149a035a344cbf93346982424847c0e00bf32e05"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "order"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__product_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.product"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__product_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__product_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__product_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__product_tmp.sql",
      "name": "stg_shopify__product_tmp",
      "alias": "stg_shopify__product_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "838dd15eae55cbf47bfe4e195340330a1becdd40c784296ed1b7d36a9f5fcf11"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "product"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__product_variant_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='product_variant', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_variant_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.product_variant"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__product_variant_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__product_variant_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__product_variant_tmp.sql",
      "name": "stg_shopify__product_variant_tmp",
      "alias": "stg_shopify__product_variant_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "094476d23b3243beb3b5713d8501360545dfc36c82db2424f8640148a99c91d2"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "product_variant"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__refund_tmp": {
      "raw_sql": "--To disable this model, set the shopify__using_refund variable within your dbt_project.yml file to False.\n{{ config(enabled=var('shopify__using_refund', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='refund_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.refund"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__refund_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__refund_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__refund_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__refund_tmp.sql",
      "name": "stg_shopify__refund_tmp",
      "alias": "stg_shopify__refund_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "2d092a8989c16461ca8c4eb723fc5815369277757fae0fd9251b15849ca71918"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "refund"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view",
        "enabled": true
      },
      "created_at": 1633488421
    },
    "model.shopify_source.stg_shopify__transaction_tmp": {
      "raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='transaction', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='transaction_source'\n    )\n}}",
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.union_data"
        ],
        "nodes": [
          "source.shopify_source.shopify.transaction"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "view",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "stg_shopify",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_stg_shopify",
      "fqn": [
        "shopify_source",
        "tmp",
        "stg_shopify__transaction_tmp"
      ],
      "unique_id": "model.shopify_source.stg_shopify__transaction_tmp",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "tmp/stg_shopify__transaction_tmp.sql",
      "original_file_path": "models/tmp/stg_shopify__transaction_tmp.sql",
      "name": "stg_shopify__transaction_tmp",
      "alias": "stg_shopify__transaction_tmp",
      "checksum": {
        "name": "sha256",
        "checksum": "add02cb0f90e34bc3024c14367a730a8b65f14c7e84137bfe516c10d4ad3c6a2"
      },
      "tags": [],
      "refs": [],
      "sources": [
        [
          "shopify",
          "transaction"
        ]
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "stg_shopify",
        "materialized": "view"
      },
      "created_at": 1633488421
    },
    "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc": {
      "raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}",
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "customer_cohort_id",
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__customer_cohorts') }} where {{config.get('where')}}) shopify__customer_cohorts{% else %}{{ ref('shopify__customer_cohorts') }}{% endif %}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_unique"
        ],
        "nodes": [
          "model.shopify.shopify__customer_cohorts"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "unique_shopify__customer_cohorts_customer_cohort_id"
      ],
      "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/unique_shopify__customer_cohorts_customer_cohort_id.sql",
      "original_file_path": "models/shopify.yml",
      "name": "unique_shopify__customer_cohorts_customer_cohort_id",
      "alias": "unique_shopify__customer_cohorts_customer_cohort_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__customer_cohorts"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1633488422,
      "column_name": "customer_cohort_id"
    },
    "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad": {
      "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "customer_cohort_id",
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__customer_cohorts') }} where {{config.get('where')}}) shopify__customer_cohorts{% else %}{{ ref('shopify__customer_cohorts') }}{% endif %}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_not_null"
        ],
        "nodes": [
          "model.shopify.shopify__customer_cohorts"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "not_null_shopify__customer_cohorts_customer_cohort_id"
      ],
      "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/not_null_shopify__customer_cohorts_customer_cohort_id.sql",
      "original_file_path": "models/shopify.yml",
      "name": "not_null_shopify__customer_cohorts_customer_cohort_id",
      "alias": "not_null_shopify__customer_cohorts_customer_cohort_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__customer_cohorts"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1633488422,
      "column_name": "customer_cohort_id"
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__orders') }} where {{config.get('where')}}) shopify__orders{% else %}{{ ref('shopify__orders') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__orders"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce.sql",
      "original_file_path": "models/shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__orders"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_0e30d4742af59bda60aa3c3f634a72ce"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "customer_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__customers') }} where {{config.get('where')}}) shopify__customers{% else %}{{ ref('shopify__customers') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__customers"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696.sql",
      "original_file_path": "models/shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__customers"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "product_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__products') }} where {{config.get('where')}}) shopify__products{% else %}{{ ref('shopify__products') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__products"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa.sql",
      "original_file_path": "models/shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__products"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_line_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__order_lines') }} where {{config.get('where')}}) shopify__order_lines{% else %}{{ ref('shopify__order_lines') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__order_lines"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40.sql",
      "original_file_path": "models/shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__order_lines"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_0bd7a3e6d2ce7dc1c5c09d9f9d5f6b40"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "transaction_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__transactions') }} where {{config.get('where')}}) shopify__transactions{% else %}{{ ref('shopify__transactions') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__transactions"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb.sql",
      "original_file_path": "models/shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__transactions"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_8e8f17b2e5241cc1e3a33f9fa479a3fb"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "customer_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__customers__order_aggregates') }} where {{config.get('where')}}) shopify__customers__order_aggregates{% else %}{{ ref('shopify__customers__order_aggregates') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__customers__order_aggregates"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3.sql",
      "original_file_path": "models/intermediate/intermediate.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__customers__order_aggregates"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('shopify__orders__order_line_aggregates') }} where {{config.get('where')}}) shopify__orders__order_line_aggregates{% else %}{{ ref('shopify__orders__order_line_aggregates') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify.shopify__orders__order_line_aggregates"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation"
      ],
      "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21",
      "package_name": "shopify",
      "root_path": "/usr/app",
      "path": "schema_test/dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04.sql",
      "original_file_path": "models/intermediate/intermediate.yml",
      "name": "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "shopify__orders__order_line_aggregates"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04"
      },
      "created_at": 1633488422,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "customer_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__customer') }} where {{config.get('where')}}) stg_shopify__customer{% else %}{{ ref('stg_shopify__customer') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__customer"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__customer"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_line_refund_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__order_line_refund') }} where {{config.get('where')}}) stg_shopify__order_line_refund{% else %}{{ ref('stg_shopify__order_line_refund') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line_refund"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__order_line_refund"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_line_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__order_line') }} where {{config.get('where')}}) stg_shopify__order_line{% else %}{{ ref('stg_shopify__order_line') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_line"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__order_line"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__order') }} where {{config.get('where')}}) stg_shopify__order{% else %}{{ ref('stg_shopify__order') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__order"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "product_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__product') }} where {{config.get('where')}}) stg_shopify__product{% else %}{{ ref('stg_shopify__product') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__product"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__product"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "variant_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__product_variant') }} where {{config.get('where')}}) stg_shopify__product_variant{% else %}{{ ref('stg_shopify__product_variant') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__product_variant"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__product_variant"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "transaction_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__transaction') }} where {{config.get('where')}}) stg_shopify__transaction{% else %}{{ ref('stg_shopify__transaction') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__transaction"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__transaction"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "refund_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__refund') }} where {{config.get('where')}}) stg_shopify__refund{% else %}{{ ref('stg_shopify__refund') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__refund"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__refund"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659"
      },
      "created_at": 1633488423,
      "column_name": null
    },
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f": {
      "raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207\") }}",
      "test_metadata": {
        "name": "unique_combination_of_columns",
        "kwargs": {
          "combination_of_columns": [
            "order_adjustment_id",
            "source_relation"
          ],
          "model": "{% if config.get('where') %}(select * from {{ ref('stg_shopify__order_adjustment') }} where {{config.get('where')}}) stg_shopify__order_adjustment{% else %}{{ ref('stg_shopify__order_adjustment') }}{% endif %}"
        },
        "namespace": "dbt_utils"
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.test_unique_combination_of_columns",
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ],
        "nodes": [
          "model.shopify_source.stg_shopify__order_adjustment"
        ]
      },
      "config": {
        "enabled": true,
        "materialized": "test",
        "persist_docs": {},
        "vars": {},
        "quoting": {},
        "column_types": {},
        "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "full_refresh": null,
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEV_DB",
      "schema": "DBT_DEV_dbt_test__audit",
      "fqn": [
        "shopify_source",
        "schema_test",
        "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation"
      ],
      "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "schema_test/dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207.sql",
      "original_file_path": "models/stg_shopify.yml",
      "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation",
      "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "tags": [
        "schema"
      ],
      "refs": [
        [
          "stg_shopify__order_adjustment"
        ]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207"
      },
      "created_at": 1633488423,
      "column_name": null
    }
  },
  "sources": {
    "source.shopify_source.shopify.order": {
      "fqn": [
        "shopify_source",
        "shopify",
        "order"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.order",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "order",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "ORDER",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "app_id": {
          "name": "app_id",
          "description": "The ID of the app that created the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_1": {
          "name": "billing_address_address_1",
          "description": "The street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_address_2": {
          "name": "billing_address_address_2",
          "description": "An optional additional field for the street address of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_city": {
          "name": "billing_address_city",
          "description": "The city, town, or village of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_company": {
          "name": "billing_address_company",
          "description": "The company of the person associated with the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country": {
          "name": "billing_address_country",
          "description": "The name of the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_country_code": {
          "name": "billing_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_first_name": {
          "name": "billing_address_first_name",
          "description": "The first name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_last_name": {
          "name": "billing_address_last_name",
          "description": "The last name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_latitude": {
          "name": "billing_address_latitude",
          "description": "The latitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_longitude": {
          "name": "billing_address_longitude",
          "description": "The longitude of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_name": {
          "name": "billing_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_phone": {
          "name": "billing_address_phone",
          "description": "The phone number at the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province": {
          "name": "billing_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_province_code": {
          "name": "billing_address_province_code",
          "description": "The two-letter abbreviation of the region of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "billing_address_zip": {
          "name": "billing_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "browser_ip": {
          "name": "browser_ip",
          "description": "The IP address of the browser used by the customer when they placed the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "buyer_accepts_marketing": {
          "name": "buyer_accepts_marketing",
          "description": "Whether the customer consented to receive email updates from the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancel_reason": {
          "name": "cancel_reason",
          "description": "The reason why the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancelled_at": {
          "name": "cancelled_at",
          "description": "The date and time when the order was canceled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cart_token": {
          "name": "cart_token",
          "description": "The ID of the cart that's associated with the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "closed_at": {
          "name": "closed_at",
          "description": "The date and time when the order was closed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "The autogenerated date and time when the order was created in Shopify.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code for the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_id": {
          "name": "customer_id",
          "description": "The ID of the order's customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The customer's email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "financial_status": {
          "name": "financial_status",
          "description": "The status of payments associated with the order. Can only be set when the order is created",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "The order's status in terms of fulfilled line items.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "landing_site_base_url": {
          "name": "landing_site_base_url",
          "description": "The URL for the page where the buyer landed when they entered the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the order was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "note": {
          "name": "note",
          "description": "An optional note that a shop owner can attach to the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "number": {
          "name": "number",
          "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_number": {
          "name": "order_number",
          "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_at": {
          "name": "processed_at",
          "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processing_method": {
          "name": "processing_method",
          "description": "How the payment was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "referring_site": {
          "name": "referring_site",
          "description": "The website where the customer clicked a link to the shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_1": {
          "name": "shipping_address_address_1",
          "description": "The street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_address_2": {
          "name": "shipping_address_address_2",
          "description": "An optional additional field for the street address of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_city": {
          "name": "shipping_address_city",
          "description": "The city, town, or village of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_company": {
          "name": "shipping_address_company",
          "description": "The company of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country": {
          "name": "shipping_address_country",
          "description": "The name of the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_country_code": {
          "name": "shipping_address_country_code",
          "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_first_name": {
          "name": "shipping_address_first_name",
          "description": "The first name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_last_name": {
          "name": "shipping_address_last_name",
          "description": "The last name of the person associated with the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_latitude": {
          "name": "shipping_address_latitude",
          "description": "The latitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_longitude": {
          "name": "shipping_address_longitude",
          "description": "The longitude of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_name": {
          "name": "shipping_address_name",
          "description": "The full name of the person associated with the payment method.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_phone": {
          "name": "shipping_address_phone",
          "description": "The phone number at the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province": {
          "name": "shipping_address_province",
          "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_province_code": {
          "name": "shipping_address_province_code",
          "description": "The two-letter abbreviation of the region of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "shipping_address_zip": {
          "name": "shipping_address_zip",
          "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal_price": {
          "name": "subtotal_price",
          "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "taxes_included": {
          "name": "taxes_included",
          "description": "Whether taxes are included in the order subtotal.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "test": {
          "name": "test",
          "description": "Whether this is a test order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "token": {
          "name": "token",
          "description": "A unique token for the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discounts": {
          "name": "total_discounts",
          "description": "The total discounts applied to the price of the order in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_line_items_price": {
          "name": "total_line_items_price",
          "description": "The sum of all line item prices in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price": {
          "name": "total_price",
          "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_tax": {
          "name": "total_tax",
          "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_weight": {
          "name": "total_weight",
          "description": "The sum of all line item weights in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_at": {
          "name": "updated_at",
          "description": "The date and time (ISO 8601 format) when the order was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.\"ORDER\"",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.customer": {
      "fqn": [
        "shopify_source",
        "shopify",
        "customer"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.customer",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "customer",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "customer",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a customer in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "accepts_marketing": {
          "name": "accepts_marketing",
          "description": "Whether the customer has consented to receive marketing material via email.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "The date and time when the customer was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "default_address_id": {
          "name": "default_address_id",
          "description": "The default address for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "first_name": {
          "name": "first_name",
          "description": "The customer's first name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "A unique identifier for the customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "last_name": {
          "name": "last_name",
          "description": "The customer's last name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "orders_count": {
          "name": "orders_count",
          "description": "The number of orders associated with this customer.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone": {
          "name": "phone",
          "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "state": {
          "name": "state",
          "description": "The state of the customer's account with a shop.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_exempt": {
          "name": "tax_exempt",
          "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_spent": {
          "name": "total_spent",
          "description": "The total amount of money that the customer has spent across their order history.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_at": {
          "name": "updated_at",
          "description": "The date and time when the customer information was last updated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "verified_email": {
          "name": "verified_email",
          "description": "Whether the customer has verified their email address.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.customer",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.order_line": {
      "fqn": [
        "shopify_source",
        "shopify",
        "order_line"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.order_line",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "order_line",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "order_line",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a line item for an order in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillable_quantity": {
          "name": "fulfillable_quantity",
          "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_service": {
          "name": "fulfillment_service",
          "description": "The service provider that's fulfilling the item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_status": {
          "name": "fulfillment_status",
          "description": "How far along an order is in terms line items fulfilled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gift_card": {
          "name": "gift_card",
          "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "grams": {
          "name": "grams",
          "description": "The weight of the item in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "The ID of the line item.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The name of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID of the related order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "price": {
          "name": "price",
          "description": "The price of the item before discounts have been applied in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "The number of items that were purchased.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "requires_shipping": {
          "name": "requires_shipping",
          "description": "Whether the item requires shipping.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "sku": {
          "name": "sku",
          "description": "The item's SKU (stock keeping unit).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "taxable": {
          "name": "taxable",
          "description": "Whether the item was taxable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The title of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_discount": {
          "name": "total_discount",
          "description": "The total amount of the discount allocated to the line item in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "variant_id": {
          "name": "variant_id",
          "description": "The ID of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the item's supplier.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.order_line",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.order_line_refund": {
      "fqn": [
        "shopify_source",
        "shopify",
        "order_line_refund"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.order_line_refund",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "order_line_refund",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "order_line_refund",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a line item refund in Shopify.",
      "columns": {
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "The unique identifier of the line item in the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "TThe unique identifier of the location where the items will be restockedBD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_line_id": {
          "name": "order_line_id",
          "description": "The ID of the related line item in the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "The quantity of the associated line item that was returned.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "The ID of the related refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "restock_type": {
          "name": "restock_type",
          "description": "How this refund line item affects inventory levels.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "subtotal": {
          "name": "subtotal",
          "description": "Subtotal amount of the order line refund",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_tax": {
          "name": "total_tax",
          "description": "The total tax applied to the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.order_line_refund",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.product": {
      "fqn": [
        "shopify_source",
        "shopify",
        "product"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.product",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "product",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "product",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a product in Shopify.",
      "columns": {
        "_fivetran_deleted": {
          "name": "_fivetran_deleted",
          "description": "Whether the record has been deleted in the source system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "The date and time when the product was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "handle": {
          "name": "handle",
          "description": "A unique human-friendly string for the product. Automatically generated from the product's title.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_type": {
          "name": "product_type",
          "description": "A categorization for the product used for filtering and searching products.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_at": {
          "name": "published_at",
          "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "published_scope": {
          "name": "published_scope",
          "description": "Whether the product is published to the Point of Sale channel.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The name of the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_at": {
          "name": "updated_at",
          "description": "The date and time when the product was last modified.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "vendor": {
          "name": "vendor",
          "description": "The name of the product's vendor.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.product",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.product_variant": {
      "fqn": [
        "shopify_source",
        "shopify",
        "product_variant"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.product_variant",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "product_variant",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "product_variant",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a product variant in Shopify",
      "columns": {
        "barcode": {
          "name": "barcode",
          "description": "The barcode, UPC, or ISBN number for the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "compare_at_price": {
          "name": "compare_at_price",
          "description": "The original price of the item before an adjustment or a sale.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "The date and time (ISO 8601 format) when the product variant was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fulfillment_service": {
          "name": "fulfillment_service",
          "description": "The fulfillment service associated with the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "grams": {
          "name": "grams",
          "description": "The weight of the product variant in grams.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "id": {
          "name": "id",
          "description": "The unique numeric identifier for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "image_id": {
          "name": "image_id",
          "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_item_id": {
          "name": "inventory_item_id",
          "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_management": {
          "name": "inventory_management",
          "description": "The fulfillment service that tracks the number of items in stock for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_policy": {
          "name": "inventory_policy",
          "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "inventory_quantity": {
          "name": "inventory_quantity",
          "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "old_inventory_quantity": {
          "name": "old_inventory_quantity",
          "description": "This property is deprecated. Use the InventoryLevel resource instead.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_1": {
          "name": "option_1",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_2": {
          "name": "option_2",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "option_3": {
          "name": "option_3",
          "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "position": {
          "name": "position",
          "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "price": {
          "name": "price",
          "description": "The price of the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "product_id": {
          "name": "product_id",
          "description": "The unique numeric identifier for the product.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "requires_shipping": {
          "name": "requires_shipping",
          "description": "This property is deprecated. Use the `requires_shipping` property on the InventoryItem resource instead.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "sku": {
          "name": "sku",
          "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "taxable": {
          "name": "taxable",
          "description": "Whether a tax is charged when the product variant is sold.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_code": {
          "name": "tax_code",
          "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "title": {
          "name": "title",
          "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "updated_at": {
          "name": "updated_at",
          "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "weight": {
          "name": "weight",
          "description": "The weight of the product variant in the unit system specified with weight_unit.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "weight_unit": {
          "name": "weight_unit",
          "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_shipping_price_set": {
          "name": "total_shipping_price_set",
          "description": "The total shipping price set for the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "index": {
          "name": "index",
          "description": "The index associated with the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "pre_tax_price": {
          "name": "pre_tax_price",
          "description": "The total pre tax price of the order.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.product_variant",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.transaction": {
      "fqn": [
        "shopify_source",
        "shopify",
        "transaction"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.transaction",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "transaction",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "transaction",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a transaction in Shopify.",
      "columns": {
        "transaction_id": {
          "name": "transaction_id",
          "description": "The ID for the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "The ID for the order that the transaction is associated with.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "The ID associated with a refund in the refund table.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount": {
          "name": "amount",
          "description": "The amount of money included in the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "authorization": {
          "name": "authorization",
          "description": "The authorization code associated with the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_timestamp": {
          "name": "created_timestamp",
          "description": "The date and time when the transaction was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_timestamp": {
          "name": "processed_timestamp",
          "description": "The date and time when a transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "device_id": {
          "name": "device_id",
          "description": "The ID for the device.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gateway": {
          "name": "gateway",
          "description": "The name of the gateway the transaction was issued through.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "The origin of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "message": {
          "name": "message",
          "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency": {
          "name": "currency",
          "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "location_id": {
          "name": "location_id",
          "description": "The ID of the physical location where the transaction was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "parent_id": {
          "name": "parent_id",
          "description": "The ID of an associated transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_avs_result_code": {
          "name": "payment_avs_result_code",
          "description": "The response code from the address verification system.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_bin": {
          "name": "payment_credit_card_bin",
          "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_cvv_result_code": {
          "name": "payment_cvv_result_code",
          "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_number": {
          "name": "payment_credit_card_number",
          "description": "The customer's credit card number, with most of the leading digits redacted.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "payment_credit_card_company": {
          "name": "payment_credit_card_company",
          "description": "The name of the company that issued the customer's credit card.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "kind": {
          "name": "kind",
          "description": "The transaction's type.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt": {
          "name": "receipt",
          "description": "A transaction receipt attached to the transaction by the gateway.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_id": {
          "name": "currency_exchange_id",
          "description": "The ID of the adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_adjustment": {
          "name": "currency_exchange_adjustment",
          "description": "The difference between the amounts on the associated transaction and the parent transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_original_amount": {
          "name": "currency_exchange_original_amount",
          "description": "The amount of the parent transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_final_amount": {
          "name": "currency_exchange_final_amount",
          "description": "The amount of the associated transaction in the shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "currency_exchange_currency": {
          "name": "currency_exchange_currency",
          "description": "The shop currency.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "error_code": {
          "name": "error_code",
          "description": "A standardized error code, independent of the payment provider.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status": {
          "name": "status",
          "description": "The status of the transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "test": {
          "name": "test",
          "description": "Whether the transaction is a test transaction.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.transaction",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.refund": {
      "fqn": [
        "shopify_source",
        "shopify",
        "refund"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.refund",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "refund",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "refund",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents a refund within Shopify.",
      "columns": {
        "id": {
          "name": "id",
          "description": "The unique numeric identifier for the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "Timestamp of the date when the refund was created.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "processed_at": {
          "name": "processed_at",
          "description": "Timestamp of the date when the refund was processed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "note": {
          "name": "note",
          "description": "User generated note attached to the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "restock": {
          "name": "restock",
          "description": "Boolean indicating if the refund is a result of a restock.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "Reference to the user id which generated the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_duties_set": {
          "name": "total_duties_set",
          "description": "Record representing total duties set for the refund.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "Reference to the order which the refund is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.refund",
      "created_at": 1633488423
    },
    "source.shopify_source.shopify.order_adjustment": {
      "fqn": [
        "shopify_source",
        "shopify",
        "order_adjustment"
      ],
      "database": "DEV_DB",
      "schema": "shopify",
      "unique_id": "source.shopify_source.shopify.order_adjustment",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "models/src_shopify.yml",
      "original_file_path": "models/src_shopify.yml",
      "name": "order_adjustment",
      "source_name": "shopify",
      "source_description": "",
      "loader": "",
      "identifier": "order_adjustment",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": null,
        "error_after": null,
        "filter": null
      },
      "external": null,
      "description": "Each record represents and adjustment to and order within Shopify.",
      "columns": {
        "id": {
          "name": "id",
          "description": "The unique numeric identifier for the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_id": {
          "name": "order_id",
          "description": "Reference to the order which the adjustment is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "refund_id": {
          "name": "refund_id",
          "description": "Reference to the refund which the adjustment is associated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount": {
          "name": "amount",
          "description": "Amount of the adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_amount": {
          "name": "tax_amount",
          "description": "Tax amount applied to the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "kind": {
          "name": "kind",
          "description": "The kind of order adjustment (eg. refund, restock, etc.).",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "reason": {
          "name": "reason",
          "description": "The reason for the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "amount_set": {
          "name": "amount_set",
          "description": "Amount set towards the order adjustment",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_amount_set": {
          "name": "tax_amount_set",
          "description": "Tax amount set towards the order adjustment.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "_fivetran_synced": {
          "name": "_fivetran_synced",
          "description": "The time when a record was last updated by Fivetran.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "DEV_DB.shopify.order_adjustment",
      "created_at": 1633488423
    }
  },
  "macros": {
    "macro.dbt_snowflake.snowflake__create_table_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_table_as",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_table_as",
      "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__create_view_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_view_as",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_view_as",
      "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__get_columns_in_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__get_columns_in_relation",
      "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__list_schemas": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_schemas",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_schemas",
      "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__list_relations_without_caching": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_relations_without_caching",
      "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__check_schema_exists": {
      "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__check_schema_exists",
      "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__current_timestamp": {
      "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__current_timestamp",
      "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_string_as_time",
      "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__snapshot_get_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_get_time",
      "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__rename_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__rename_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__rename_relation",
      "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__alter_column_type": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_type",
      "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__alter_relation_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_comment",
      "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__alter_column_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_comment",
      "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.get_current_query_tag": {
      "unique_id": "macro.dbt_snowflake.get_current_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_current_query_tag",
      "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.set_query_tag": {
      "unique_id": "macro.dbt_snowflake.set_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "set_query_tag",
      "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_current_query_tag",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.unset_query_tag": {
      "unique_id": "macro.dbt_snowflake.unset_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "unset_query_tag",
      "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__get_catalog": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_catalog",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "name": "snowflake__get_catalog",
      "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_validate_get_incremental_strategy",
      "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_get_incremental_sql",
      "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_merge_sql",
          "macro.dbt.get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.materialization_incremental_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "materialization_incremental_snowflake",
      "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.snowflake__get_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_merge_sql",
      "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        );\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.default__get_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.materialization_view_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_view_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/view.sql",
      "original_file_path": "macros/materializations/view.sql",
      "name": "materialization_view_snowflake",
      "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt_snowflake.materialization_table_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_table_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "name": "materialization_table_snowflake",
      "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.statement": {
      "unique_id": "macro.dbt.statement",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/core.sql",
      "original_file_path": "macros/core.sql",
      "name": "statement",
      "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.noop_statement": {
      "unique_id": "macro.dbt.noop_statement",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/core.sql",
      "original_file_path": "macros/core.sql",
      "name": "noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_columns_in_query": {
      "unique_id": "macro.dbt.get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_columns_in_query": {
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_schema": {
      "unique_id": "macro.dbt.create_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__create_schema": {
      "unique_id": "macro.dbt.default__create_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.drop_schema": {
      "unique_id": "macro.dbt.drop_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__drop_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__drop_schema": {
      "unique_id": "macro.dbt.default__drop_schema",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_table_as": {
      "unique_id": "macro.dbt.create_table_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__create_table_as": {
      "unique_id": "macro.dbt.default__create_table_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_create_index_sql": {
      "unique_id": "macro.dbt.get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_index_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_create_index_sql": {
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_indexes": {
      "unique_id": "macro.dbt.create_indexes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__create_indexes": {
      "unique_id": "macro.dbt.default__create_indexes",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_create_index_sql",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_view_as": {
      "unique_id": "macro.dbt.create_view_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__create_view_as": {
      "unique_id": "macro.dbt.default__create_view_as",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_catalog": {
      "unique_id": "macro.dbt.get_catalog",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_catalog"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_catalog": {
      "unique_id": "macro.dbt.default__get_catalog",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_columns_in_relation": {
      "unique_id": "macro.dbt.get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_columns_in_relation": {
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.alter_column_type": {
      "unique_id": "macro.dbt.alter_column_type",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.alter_column_comment": {
      "unique_id": "macro.dbt.alter_column_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__alter_column_comment": {
      "unique_id": "macro.dbt.default__alter_column_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.alter_relation_comment": {
      "unique_id": "macro.dbt.alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_relation_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__alter_relation_comment": {
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.persist_docs": {
      "unique_id": "macro.dbt.persist_docs",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__persist_docs": {
      "unique_id": "macro.dbt.default__persist_docs",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__alter_column_type": {
      "unique_id": "macro.dbt.default__alter_column_type",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.drop_relation": {
      "unique_id": "macro.dbt.drop_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__drop_relation": {
      "unique_id": "macro.dbt.default__drop_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.truncate_relation": {
      "unique_id": "macro.dbt.truncate_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__truncate_relation": {
      "unique_id": "macro.dbt.default__truncate_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.rename_relation": {
      "unique_id": "macro.dbt.rename_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__rename_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__rename_relation": {
      "unique_id": "macro.dbt.default__rename_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.information_schema_name": {
      "unique_id": "macro.dbt.information_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__information_schema_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__information_schema_name": {
      "unique_id": "macro.dbt.default__information_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.list_schemas": {
      "unique_id": "macro.dbt.list_schemas",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__list_schemas": {
      "unique_id": "macro.dbt.default__list_schemas",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.information_schema_name",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.check_schema_exists": {
      "unique_id": "macro.dbt.check_schema_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__check_schema_exists"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__check_schema_exists": {
      "unique_id": "macro.dbt.default__check_schema_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.replace",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.list_relations_without_caching": {
      "unique_id": "macro.dbt.list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_relations_without_caching"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__list_relations_without_caching": {
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.current_timestamp": {
      "unique_id": "macro.dbt.current_timestamp",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__current_timestamp": {
      "unique_id": "macro.dbt.default__current_timestamp",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.collect_freshness": {
      "unique_id": "macro.dbt.collect_freshness",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__collect_freshness"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__collect_freshness": {
      "unique_id": "macro.dbt.default__collect_freshness",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.make_temp_relation": {
      "unique_id": "macro.dbt.make_temp_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__make_temp_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__make_temp_relation": {
      "unique_id": "macro.dbt.default__make_temp_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.set_sql_header": {
      "unique_id": "macro.dbt.set_sql_header",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_test_sql": {
      "unique_id": "macro.dbt.get_test_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_test_sql": {
      "unique_id": "macro.dbt.default__get_test_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.materialization_test_default": {
      "unique_id": "macro.dbt.materialization_test_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "materialization_test_default",
      "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.run_hooks": {
      "unique_id": "macro.dbt.run_hooks",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.column_list": {
      "unique_id": "macro.dbt.column_list",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "column_list",
      "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.column_list_for_create_table": {
      "unique_id": "macro.dbt.column_list_for_create_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "column_list_for_create_table",
      "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.make_hook_config": {
      "unique_id": "macro.dbt.make_hook_config",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.before_begin": {
      "unique_id": "macro.dbt.before_begin",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.in_transaction": {
      "unique_id": "macro.dbt.in_transaction",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.after_commit": {
      "unique_id": "macro.dbt.after_commit",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.drop_relation_if_exists": {
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.load_relation": {
      "unique_id": "macro.dbt.load_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.should_full_refresh": {
      "unique_id": "macro.dbt.should_full_refresh",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.should_store_failures": {
      "unique_id": "macro.dbt.should_store_failures",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_csv_table": {
      "unique_id": "macro.dbt.create_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.reset_csv_table": {
      "unique_id": "macro.dbt.reset_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__reset_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.load_csv_rows": {
      "unique_id": "macro.dbt.load_csv_rows",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__load_csv_rows"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__create_csv_table": {
      "unique_id": "macro.dbt.default__create_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__reset_csv_table": {
      "unique_id": "macro.dbt.default__reset_csv_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.basic_load_csv_rows": {
      "unique_id": "macro.dbt.basic_load_csv_rows",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "basic_load_csv_rows",
      "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_seed_column_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__load_csv_rows": {
      "unique_id": "macro.dbt.default__load_csv_rows",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.basic_load_csv_rows"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.materialization_seed_default": {
      "unique_id": "macro.dbt.materialization_seed_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_merge_sql": {
      "unique_id": "macro.dbt.get_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__get_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_insert_overwrite_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_merge_sql": {
      "unique_id": "macro.dbt.default__get_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.get_quoted_csv": {
      "unique_id": "macro.dbt.get_quoted_csv",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.common_get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.common_get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "common_get_delete_insert_merge_sql",
      "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.common_get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.materialization_table_default": {
      "unique_id": "macro.dbt.materialization_table_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/table/table.sql",
      "original_file_path": "macros/materializations/table/table.sql",
      "name": "materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.create_indexes",
          "macro.dbt.persist_docs",
          "macro.dbt.drop_relation_if_exists"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.handle_existing_table": {
      "unique_id": "macro.dbt.handle_existing_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__handle_existing_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.default__handle_existing_table": {
      "unique_id": "macro.dbt.default__handle_existing_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.create_or_replace_view": {
      "unique_id": "macro.dbt.create_or_replace_view",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488412
    },
    "macro.dbt.materialization_view_default": {
      "unique_id": "macro.dbt.materialization_view_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/view.sql",
      "original_file_path": "macros/materializations/view/view.sql",
      "name": "materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_view_as",
          "macro.dbt.persist_docs",
          "macro.dbt.drop_relation_if_exists"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.materialization_incremental_default": {
      "unique_id": "macro.dbt.materialization_incremental_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/incremental.sql",
      "original_file_path": "macros/materializations/incremental/incremental.sql",
      "name": "materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.should_full_refresh",
          "macro.dbt.make_temp_relation",
          "macro.dbt.run_query",
          "macro.dbt.incremental_upsert",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.incremental_upsert": {
      "unique_id": "macro.dbt.incremental_upsert",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/helpers.sql",
      "original_file_path": "macros/materializations/incremental/helpers.sql",
      "name": "incremental_upsert",
      "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.strategy_dispatch": {
      "unique_id": "macro.dbt.strategy_dispatch",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_hash_arguments": {
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_get_time": {
      "unique_id": "macro.dbt.snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_get_time",
      "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__snapshot_get_time": {
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_string_as_time": {
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__snapshot_string_as_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_check_strategy": {
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.run_query",
          "macro.dbt.snapshot_string_as_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_merge_sql": {
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "name": "snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "name": "default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.create_columns": {
      "unique_id": "macro.dbt.create_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__create_columns": {
      "unique_id": "macro.dbt.default__create_columns",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.post_snapshot": {
      "unique_id": "macro.dbt.post_snapshot",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__post_snapshot": {
      "unique_id": "macro.dbt.default__post_snapshot",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.snapshot_staging_table": {
      "unique_id": "macro.dbt.snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.build_snapshot_table": {
      "unique_id": "macro.dbt.build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.get_or_create_relation": {
      "unique_id": "macro.dbt.get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.build_snapshot_staging_table": {
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.materialization_snapshot_default": {
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_schema",
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.generate_schema_name": {
      "unique_id": "macro.dbt.generate_schema_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_schema.sql",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.generate_schema_name_for_env": {
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_schema.sql",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "name": "generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.run_query": {
      "unique_id": "macro.dbt.run_query",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/query.sql",
      "original_file_path": "macros/etc/query.sql",
      "name": "run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.is_incremental": {
      "unique_id": "macro.dbt.is_incremental",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/is_incremental.sql",
      "original_file_path": "macros/etc/is_incremental.sql",
      "name": "is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.generate_database_name": {
      "unique_id": "macro.dbt.generate_database_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_database.sql",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "name": "generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_database_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__generate_database_name": {
      "unique_id": "macro.dbt.default__generate_database_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_database.sql",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "name": "default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.generate_alias_name": {
      "unique_id": "macro.dbt.generate_alias_name",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_alias.sql",
      "original_file_path": "macros/etc/get_custom_alias.sql",
      "name": "generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.convert_datetime": {
      "unique_id": "macro.dbt.convert_datetime",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.dates_in_range": {
      "unique_id": "macro.dbt.dates_in_range",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.convert_datetime"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.partition_range": {
      "unique_id": "macro.dbt.partition_range",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.dates_in_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.py_current_timestring": {
      "unique_id": "macro.dbt.py_current_timestring",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__test_not_null": {
      "unique_id": "macro.dbt.default__test_not_null",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/not_null.sql",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "name": "default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.test_not_null": {
      "unique_id": "macro.dbt.test_not_null",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/not_null.sql",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "name": "test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__test_relationships": {
      "unique_id": "macro.dbt.default__test_relationships",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/relationships.sql",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "name": "default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.test_relationships": {
      "unique_id": "macro.dbt.test_relationships",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/relationships.sql",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "name": "test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_relationships"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__test_accepted_values": {
      "unique_id": "macro.dbt.default__test_accepted_values",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/accepted_values.sql",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "name": "default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.test_accepted_values": {
      "unique_id": "macro.dbt.test_accepted_values",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/accepted_values.sql",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "name": "test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.default__test_unique": {
      "unique_id": "macro.dbt.default__test_unique",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/unique.sql",
      "original_file_path": "macros/schema_tests/unique.sql",
      "name": "default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt.test_unique": {
      "unique_id": "macro.dbt.test_unique",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/unique.sql",
      "original_file_path": "macros/schema_tests/unique.sql",
      "name": "test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils._is_ephemeral": {
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/_is_ephemeral.sql",
      "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql",
      "name": "_is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils._is_relation": {
      "unique_id": "macro.dbt_utils._is_relation",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/_is_relation.sql",
      "original_file_path": "macros/cross_db_utils/_is_relation.sql",
      "name": "_is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "redshift__cast_bool_to_text",
      "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.concat": {
      "unique_id": "macro.dbt_utils.concat",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__concat": {
      "unique_id": "macro.dbt_utils.default__concat",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.current_timestamp": {
      "unique_id": "macro.dbt_utils.current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__current_timestamp": {
      "unique_id": "macro.dbt_utils.default__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__current_timestamp": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp",
      "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__current_timestamp": {
      "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "bigquery__current_timestamp",
      "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp_in_utc",
      "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp_in_utc",
      "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "snowflake__current_timestamp_in_utc",
      "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.postgres__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "postgres__current_timestamp_in_utc",
      "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp_in_utc",
      "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__current_timestamp_in_utc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_string": {
      "unique_id": "macro.dbt_utils.type_string",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_string": {
      "unique_id": "macro.dbt_utils.default__type_string",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__type_string": {
      "unique_id": "macro.dbt_utils.redshift__type_string",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "redshift__type_string",
      "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.postgres__type_string": {
      "unique_id": "macro.dbt_utils.postgres__type_string",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "postgres__type_string",
      "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__type_string": {
      "unique_id": "macro.dbt_utils.snowflake__type_string",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_string",
      "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_timestamp": {
      "unique_id": "macro.dbt_utils.type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_timestamp": {
      "unique_id": "macro.dbt_utils.default__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__type_timestamp": {
      "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_timestamp",
      "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_float": {
      "unique_id": "macro.dbt_utils.type_float",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_float": {
      "unique_id": "macro.dbt_utils.default__type_float",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__type_float": {
      "unique_id": "macro.dbt_utils.bigquery__type_float",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_float",
      "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_numeric": {
      "unique_id": "macro.dbt_utils.type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_numeric": {
      "unique_id": "macro.dbt_utils.default__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__type_numeric": {
      "unique_id": "macro.dbt_utils.bigquery__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_numeric",
      "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_bigint": {
      "unique_id": "macro.dbt_utils.type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_bigint": {
      "unique_id": "macro.dbt_utils.default__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__type_bigint": {
      "unique_id": "macro.dbt_utils.bigquery__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_bigint",
      "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.type_int": {
      "unique_id": "macro.dbt_utils.type_int",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__type_int": {
      "unique_id": "macro.dbt_utils.default__type_int",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_int",
      "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__type_int": {
      "unique_id": "macro.dbt_utils.bigquery__type_int",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_int",
      "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.date_trunc": {
      "unique_id": "macro.dbt_utils.date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__date_trunc": {
      "unique_id": "macro.dbt_utils.default__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__date_trunc": {
      "unique_id": "macro.dbt_utils.bigquery__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "bigquery__date_trunc",
      "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.dateadd": {
      "unique_id": "macro.dbt_utils.dateadd",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__dateadd": {
      "unique_id": "macro.dbt_utils.default__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__dateadd": {
      "unique_id": "macro.dbt_utils.bigquery__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "bigquery__dateadd",
      "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.postgres__dateadd": {
      "unique_id": "macro.dbt_utils.postgres__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "postgres__dateadd",
      "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__dateadd": {
      "unique_id": "macro.dbt_utils.redshift__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "redshift__dateadd",
      "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.datediff": {
      "unique_id": "macro.dbt_utils.datediff",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__datediff": {
      "unique_id": "macro.dbt_utils.default__datediff",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__datediff": {
      "unique_id": "macro.dbt_utils.bigquery__datediff",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "bigquery__datediff",
      "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.postgres__datediff": {
      "unique_id": "macro.dbt_utils.postgres__datediff",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "postgres__datediff",
      "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__datediff": {
      "unique_id": "macro.dbt_utils.redshift__datediff",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "redshift__datediff",
      "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.except": {
      "unique_id": "macro.dbt_utils.except",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__except": {
      "unique_id": "macro.dbt_utils.default__except",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__except": {
      "unique_id": "macro.dbt_utils.bigquery__except",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "bigquery__except",
      "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.hash": {
      "unique_id": "macro.dbt_utils.hash",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__hash"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__hash": {
      "unique_id": "macro.dbt_utils.default__hash",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__hash": {
      "unique_id": "macro.dbt_utils.bigquery__hash",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "bigquery__hash",
      "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__hash"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.identifier": {
      "unique_id": "macro.dbt_utils.identifier",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "identifier",
      "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__identifier"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__identifier": {
      "unique_id": "macro.dbt_utils.default__identifier",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "default__identifier",
      "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__identifier": {
      "unique_id": "macro.dbt_utils.bigquery__identifier",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "bigquery__identifier",
      "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.intersect": {
      "unique_id": "macro.dbt_utils.intersect",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__intersect"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__intersect": {
      "unique_id": "macro.dbt_utils.default__intersect",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__intersect": {
      "unique_id": "macro.dbt_utils.bigquery__intersect",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "bigquery__intersect",
      "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.last_day": {
      "unique_id": "macro.dbt_utils.last_day",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default_last_day": {
      "unique_id": "macro.dbt_utils.default_last_day",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default_last_day",
      "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__last_day": {
      "unique_id": "macro.dbt_utils.default__last_day",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.postgres__last_day": {
      "unique_id": "macro.dbt_utils.postgres__last_day",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "postgres__last_day",
      "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__last_day": {
      "unique_id": "macro.dbt_utils.redshift__last_day",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "redshift__last_day",
      "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.length": {
      "unique_id": "macro.dbt_utils.length",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__length"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__length": {
      "unique_id": "macro.dbt_utils.default__length",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "default__length",
      "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__length": {
      "unique_id": "macro.dbt_utils.redshift__length",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "redshift__length",
      "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.string_literal": {
      "unique_id": "macro.dbt_utils.string_literal",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__string_literal"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__string_literal": {
      "unique_id": "macro.dbt_utils.default__string_literal",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.position": {
      "unique_id": "macro.dbt_utils.position",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__position"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__position": {
      "unique_id": "macro.dbt_utils.default__position",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__position": {
      "unique_id": "macro.dbt_utils.bigquery__position",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "bigquery__position",
      "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.replace": {
      "unique_id": "macro.dbt_utils.replace",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__replace"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__replace": {
      "unique_id": "macro.dbt_utils.default__replace",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.right": {
      "unique_id": "macro.dbt_utils.right",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__right"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__right": {
      "unique_id": "macro.dbt_utils.default__right",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__right": {
      "unique_id": "macro.dbt_utils.bigquery__right",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "bigquery__right",
      "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__right": {
      "unique_id": "macro.dbt_utils.snowflake__right",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "snowflake__right",
      "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.safe_cast": {
      "unique_id": "macro.dbt_utils.safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__safe_cast"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__safe_cast": {
      "unique_id": "macro.dbt_utils.default__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__safe_cast": {
      "unique_id": "macro.dbt_utils.snowflake__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "snowflake__safe_cast",
      "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__safe_cast": {
      "unique_id": "macro.dbt_utils.bigquery__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "bigquery__safe_cast",
      "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.split_part": {
      "unique_id": "macro.dbt_utils.split_part",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__split_part": {
      "unique_id": "macro.dbt_utils.default__split_part",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.bigquery__split_part": {
      "unique_id": "macro.dbt_utils.bigquery__split_part",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "bigquery__split_part",
      "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.width_bucket": {
      "unique_id": "macro.dbt_utils.width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.snowflake__width_bucket"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__width_bucket": {
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.redshift__width_bucket": {
      "unique_id": "macro.dbt_utils.redshift__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "redshift__width_bucket",
      "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.log_info": {
      "unique_id": "macro.dbt_utils.log_info",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__log_info"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__log_info": {
      "unique_id": "macro.dbt_utils.default__log_info",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.pretty_log_format": {
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.pretty_time": {
      "unique_id": "macro.dbt_utils.pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__pretty_time": {
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.slugify": {
      "unique_id": "macro.dbt_utils.slugify",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "name": "slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.get_period_boundaries": {
      "unique_id": "macro.dbt_utils.get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_boundaries",
      "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_period_boundaries"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.default__get_period_boundaries": {
      "unique_id": "macro.dbt_utils.default__get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_boundaries",
      "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488413
    },
    "macro.dbt_utils.get_period_sql": {
      "unique_id": "macro.dbt_utils.get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_sql",
      "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_period_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_period_sql": {
      "unique_id": "macro.dbt_utils.default__get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_sql",
      "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.materialization_insert_by_period_default": {
      "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "materialization_insert_by_period_default",
      "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt_utils.get_period_boundaries",
          "macro.dbt_utils.log_info",
          "macro.dbt_utils.get_period_sql",
          "macro.dbt.noop_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_accepted_range": {
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_accepted_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_at_least_one": {
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_at_least_one"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_cardinality_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equal_rowcount"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_equality": {
      "unique_id": "macro.dbt_utils.test_equality",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_equality": {
      "unique_id": "macro.dbt_utils.default__test_equality",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, * from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, * from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_expression_is_true": {
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_fewer_rows_than"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_mutually_exclusive_ranges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_not_constant": {
      "unique_id": "macro.dbt_utils.test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_constant"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_not_constant": {
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_null_proportion"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_recency": {
      "unique_id": "macro.dbt_utils.test_recency",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_recency"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_recency": {
      "unique_id": "macro.dbt_utils.default__test_recency",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_relationships_where": {
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_relationships_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_sequential_values": {
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_sequential_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_not_null_where": {
      "unique_id": "macro.dbt_utils.test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "test_not_null_where",
      "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_null_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_not_null_where": {
      "unique_id": "macro.dbt_utils.default__test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "default__test_not_null_where",
      "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.test_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_unique_where": {
      "unique_id": "macro.dbt_utils.test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "test_unique_where",
      "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_unique_where": {
      "unique_id": "macro.dbt_utils.default__test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "default__test_unique_where",
      "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.test_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_intervals_between": {
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_intervals_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.date_spine": {
      "unique_id": "macro.dbt_utils.date_spine",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__date_spine": {
      "unique_id": "macro.dbt_utils.default__date_spine",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_powers_of_two": {
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.generate_series": {
      "unique_id": "macro.dbt_utils.generate_series",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__generate_series"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__generate_series": {
      "unique_id": "macro.dbt_utils.default__generate_series",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_column_values": {
      "unique_id": "macro.dbt_utils.get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_column_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_column_values": {
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_query_results_as_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_prefix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._bigquery__get_matching_schemata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "_bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.group_by": {
      "unique_id": "macro.dbt_utils.group_by",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__group_by": {
      "unique_id": "macro.dbt_utils.default__group_by",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.degrees_to_radians": {
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.haversine_distance": {
      "unique_id": "macro.dbt_utils.haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__haversine_distance"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__haversine_distance": {
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.degrees_to_radians"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.nullcheck": {
      "unique_id": "macro.dbt_utils.nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__nullcheck": {
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.nullcheck_table": {
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.pivot": {
      "unique_id": "macro.dbt_utils.pivot",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__pivot": {
      "unique_id": "macro.dbt_utils.default__pivot",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.slugify"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.safe_add": {
      "unique_id": "macro.dbt_utils.safe_add",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "safe_add",
      "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__safe_add"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__safe_add": {
      "unique_id": "macro.dbt_utils.default__safe_add",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.star": {
      "unique_id": "macro.dbt_utils.star",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__star"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__star": {
      "unique_id": "macro.dbt_utils.default__star",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.surrogate_key": {
      "unique_id": "macro.dbt_utils.surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__surrogate_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__surrogate_key": {
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.hash",
          "macro.dbt_utils.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.union_relations": {
      "unique_id": "macro.dbt_utils.union_relations",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__union_relations"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__union_relations": {
      "unique_id": "macro.dbt_utils.default__union_relations",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.string_literal",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.unpivot": {
      "unique_id": "macro.dbt_utils.unpivot",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__unpivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__unpivot": {
      "unique_id": "macro.dbt_utils.default__unpivot",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_url_host": {
      "unique_id": "macro.dbt_utils.get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_host"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_url_host": {
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.replace",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_url_parameter": {
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_parameter"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.get_url_path": {
      "unique_id": "macro.dbt_utils.get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_path"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.dbt_utils.default__get_url_path": {
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/usr/app/dbt_modules/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.replace",
          "macro.dbt_utils.position",
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.right",
          "macro.dbt_utils.length",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.add_pass_through_columns": {
      "unique_id": "macro.fivetran_utils.add_pass_through_columns",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/add_pass_through_columns.sql",
      "original_file_path": "macros/add_pass_through_columns.sql",
      "name": "add_pass_through_columns",
      "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.array_agg": {
      "unique_id": "macro.fivetran_utils.array_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/array_agg.sql",
      "original_file_path": "macros/array_agg.sql",
      "name": "array_agg",
      "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__array_agg"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.default__array_agg": {
      "unique_id": "macro.fivetran_utils.default__array_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/array_agg.sql",
      "original_file_path": "macros/array_agg.sql",
      "name": "default__array_agg",
      "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.redshift__array_agg": {
      "unique_id": "macro.fivetran_utils.redshift__array_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/array_agg.sql",
      "original_file_path": "macros/array_agg.sql",
      "name": "redshift__array_agg",
      "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.calculated_fields": {
      "unique_id": "macro.fivetran_utils.calculated_fields",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/calculated_fields.sql",
      "original_file_path": "macros/calculated_fields.sql",
      "name": "calculated_fields",
      "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.ceiling": {
      "unique_id": "macro.fivetran_utils.ceiling",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/ceiling.sql",
      "original_file_path": "macros/ceiling.sql",
      "name": "ceiling",
      "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.snowflake__ceiling"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.default__ceiling": {
      "unique_id": "macro.fivetran_utils.default__ceiling",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/ceiling.sql",
      "original_file_path": "macros/ceiling.sql",
      "name": "default__ceiling",
      "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.snowflake__ceiling": {
      "unique_id": "macro.fivetran_utils.snowflake__ceiling",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/ceiling.sql",
      "original_file_path": "macros/ceiling.sql",
      "name": "snowflake__ceiling",
      "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.collect_freshness": {
      "unique_id": "macro.fivetran_utils.collect_freshness",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/collect_freshness.sql",
      "original_file_path": "macros/collect_freshness.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__collect_freshness"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.default__collect_freshness": {
      "unique_id": "macro.fivetran_utils.default__collect_freshness",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/collect_freshness.sql",
      "original_file_path": "macros/collect_freshness.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.name == source.name %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.dummy_coalesce_value": {
      "unique_id": "macro.fivetran_utils.dummy_coalesce_value",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/dummy_coalesce_value.sql",
      "original_file_path": "macros/dummy_coalesce_value.sql",
      "name": "dummy_coalesce_value",
      "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.empty_variable_warning": {
      "unique_id": "macro.fivetran_utils.empty_variable_warning",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/empty_variable_warning.sql",
      "original_file_path": "macros/empty_variable_warning.sql",
      "name": "empty_variable_warning",
      "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.enabled_vars": {
      "unique_id": "macro.fivetran_utils.enabled_vars",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/enabled_vars.sql",
      "original_file_path": "macros/enabled_vars.sql",
      "name": "enabled_vars",
      "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488414
    },
    "macro.fivetran_utils.enabled_vars_one_true": {
      "unique_id": "macro.fivetran_utils.enabled_vars_one_true",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/enabled_vars_one_true.sql",
      "original_file_path": "macros/enabled_vars_one_true.sql",
      "name": "enabled_vars_one_true",
      "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.fill_pass_through_columns": {
      "unique_id": "macro.fivetran_utils.fill_pass_through_columns",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/fill_pass_through_columns.sql",
      "original_file_path": "macros/fill_pass_through_columns.sql",
      "name": "fill_pass_through_columns",
      "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.fill_staging_columns": {
      "unique_id": "macro.fivetran_utils.fill_staging_columns",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/fill_staging_columns.sql",
      "original_file_path": "macros/fill_staging_columns.sql",
      "name": "fill_staging_columns",
      "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.quote_column"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.quote_column": {
      "unique_id": "macro.fivetran_utils.quote_column",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/fill_staging_columns.sql",
      "original_file_path": "macros/fill_staging_columns.sql",
      "name": "quote_column",
      "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.first_value": {
      "unique_id": "macro.fivetran_utils.first_value",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/first_value.sql",
      "original_file_path": "macros/first_value.sql",
      "name": "first_value",
      "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__first_value"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__first_value": {
      "unique_id": "macro.fivetran_utils.default__first_value",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/first_value.sql",
      "original_file_path": "macros/first_value.sql",
      "name": "default__first_value",
      "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__first_value": {
      "unique_id": "macro.fivetran_utils.redshift__first_value",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/first_value.sql",
      "original_file_path": "macros/first_value.sql",
      "name": "redshift__first_value",
      "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.generate_columns_macro": {
      "unique_id": "macro.fivetran_utils.generate_columns_macro",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/generate_columns_macro.sql",
      "original_file_path": "macros/generate_columns_macro.sql",
      "name": "generate_columns_macro",
      "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.get_columns_for_macro"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__get_columns_for_macro": {
      "unique_id": "macro.fivetran_utils.default__get_columns_for_macro",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/get_columns_for_macro.sql",
      "original_file_path": "macros/get_columns_for_macro.sql",
      "name": "default__get_columns_for_macro",
      "macro_sql": "{% macro default__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__get_columns_for_macro": {
      "unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/get_columns_for_macro.sql",
      "original_file_path": "macros/get_columns_for_macro.sql",
      "name": "bigquery__get_columns_for_macro",
      "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.get_columns_for_macro": {
      "unique_id": "macro.fivetran_utils.get_columns_for_macro",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/get_columns_for_macro.sql",
      "original_file_path": "macros/get_columns_for_macro.sql",
      "name": "get_columns_for_macro",
      "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__get_columns_for_macro"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.json_extract": {
      "unique_id": "macro.fivetran_utils.json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_extract.sql",
      "original_file_path": "macros/json_extract.sql",
      "name": "json_extract",
      "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__json_extract"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__json_extract": {
      "unique_id": "macro.fivetran_utils.default__json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_extract.sql",
      "original_file_path": "macros/json_extract.sql",
      "name": "default__json_extract",
      "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__json_extract": {
      "unique_id": "macro.fivetran_utils.redshift__json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_extract.sql",
      "original_file_path": "macros/json_extract.sql",
      "name": "redshift__json_extract",
      "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__json_extract": {
      "unique_id": "macro.fivetran_utils.bigquery__json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_extract.sql",
      "original_file_path": "macros/json_extract.sql",
      "name": "bigquery__json_extract",
      "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.postgres__json_extract": {
      "unique_id": "macro.fivetran_utils.postgres__json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_extract.sql",
      "original_file_path": "macros/json_extract.sql",
      "name": "postgres__json_extract",
      "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.json_parse": {
      "unique_id": "macro.fivetran_utils.json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "json_parse",
      "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.snowflake__json_parse"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__json_parse": {
      "unique_id": "macro.fivetran_utils.default__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "default__json_parse",
      "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__json_parse": {
      "unique_id": "macro.fivetran_utils.redshift__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "redshift__json_parse",
      "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__json_parse": {
      "unique_id": "macro.fivetran_utils.bigquery__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "bigquery__json_parse",
      "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.postgres__json_parse": {
      "unique_id": "macro.fivetran_utils.postgres__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "postgres__json_parse",
      "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.snowflake__json_parse": {
      "unique_id": "macro.fivetran_utils.snowflake__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "snowflake__json_parse",
      "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.spark__json_parse": {
      "unique_id": "macro.fivetran_utils.spark__json_parse",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/json_parse.sql",
      "original_file_path": "macros/json_parse.sql",
      "name": "spark__json_parse",
      "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.max_bool": {
      "unique_id": "macro.fivetran_utils.max_bool",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/max_bool.sql",
      "original_file_path": "macros/max_bool.sql",
      "name": "max_bool",
      "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.snowflake__max_bool"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__max_bool": {
      "unique_id": "macro.fivetran_utils.default__max_bool",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/max_bool.sql",
      "original_file_path": "macros/max_bool.sql",
      "name": "default__max_bool",
      "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.snowflake__max_bool": {
      "unique_id": "macro.fivetran_utils.snowflake__max_bool",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/max_bool.sql",
      "original_file_path": "macros/max_bool.sql",
      "name": "snowflake__max_bool",
      "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__max_bool": {
      "unique_id": "macro.fivetran_utils.bigquery__max_bool",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/max_bool.sql",
      "original_file_path": "macros/max_bool.sql",
      "name": "bigquery__max_bool",
      "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.percentile": {
      "unique_id": "macro.fivetran_utils.percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "percentile",
      "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__percentile"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__percentile": {
      "unique_id": "macro.fivetran_utils.default__percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "default__percentile",
      "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__percentile": {
      "unique_id": "macro.fivetran_utils.redshift__percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "redshift__percentile",
      "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__percentile": {
      "unique_id": "macro.fivetran_utils.bigquery__percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "bigquery__percentile",
      "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.postgres__percentile": {
      "unique_id": "macro.fivetran_utils.postgres__percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "postgres__percentile",
      "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.spark__percentile": {
      "unique_id": "macro.fivetran_utils.spark__percentile",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/percentile.sql",
      "original_file_path": "macros/percentile.sql",
      "name": "spark__percentile",
      "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.persist_pass_through_columns": {
      "unique_id": "macro.fivetran_utils.persist_pass_through_columns",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/persist_pass_through_columns.sql",
      "original_file_path": "macros/persist_pass_through_columns.sql",
      "name": "persist_pass_through_columns",
      "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.pivot_json_extract": {
      "unique_id": "macro.fivetran_utils.pivot_json_extract",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/pivot_json_extract.sql",
      "original_file_path": "macros/pivot_json_extract.sql",
      "name": "pivot_json_extract",
      "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.json_extract"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.remove_prefix_from_columns": {
      "unique_id": "macro.fivetran_utils.remove_prefix_from_columns",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/remove_prefix_from_columns.sql",
      "original_file_path": "macros/remove_prefix_from_columns.sql",
      "name": "remove_prefix_from_columns",
      "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.seed_data_helper": {
      "unique_id": "macro.fivetran_utils.seed_data_helper",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/seed_data_helper.sql",
      "original_file_path": "macros/seed_data_helper.sql",
      "name": "seed_data_helper",
      "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.snowflake_seed_data": {
      "unique_id": "macro.fivetran_utils.snowflake_seed_data",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/snowflake_seed_data.sql",
      "original_file_path": "macros/snowflake_seed_data.sql",
      "name": "snowflake_seed_data",
      "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.source_relation": {
      "unique_id": "macro.fivetran_utils.source_relation",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/source_relation.sql",
      "original_file_path": "macros/source_relation.sql",
      "name": "source_relation",
      "macro_sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') () }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__source_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__source_relation": {
      "unique_id": "macro.fivetran_utils.default__source_relation",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/source_relation.sql",
      "original_file_path": "macros/source_relation.sql",
      "name": "default__source_relation",
      "macro_sql": "{% macro default__source_relation() %}\n\n{% if var('union_schemas', none)  %}\n, case\n    {% for schema in var('union_schemas') %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var('union_databases', none) %}\n, case\n    {% for database in var('union_databases') %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, '' as source_relation\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.staging_models_automation": {
      "unique_id": "macro.fivetran_utils.staging_models_automation",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/staging_models_automation.sql",
      "original_file_path": "macros/staging_models_automation.sql",
      "name": "staging_models_automation",
      "macro_sql": "{% macro staging_models_automation(package, source_schema, source_database, tables) %}\n\n{% set package = \"\"~ package ~\"\" %}\n{% set source_schema = \"\"~ source_schema ~\"\" %}\n{% set source_database = \"\"~ source_database ~\"\" %}\n\n{% set zsh_command = \"source dbt_modules/fivetran_utils/columns_setup.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n\n{% for t in tables %}\n    {% if t != tables[-1] %}\n        {% set help_command = zsh_command + t + \" && \\n\" %}\n\n    {% else %}\n        {% set help_command = zsh_command + t %}\n\n    {% endif %}\n    {{ log(help_command, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.string_agg": {
      "unique_id": "macro.fivetran_utils.string_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/string_agg.sql",
      "original_file_path": "macros/string_agg.sql",
      "name": "string_agg",
      "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.snowflake__string_agg"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__string_agg": {
      "unique_id": "macro.fivetran_utils.default__string_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/string_agg.sql",
      "original_file_path": "macros/string_agg.sql",
      "name": "default__string_agg",
      "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.snowflake__string_agg": {
      "unique_id": "macro.fivetran_utils.snowflake__string_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/string_agg.sql",
      "original_file_path": "macros/string_agg.sql",
      "name": "snowflake__string_agg",
      "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__string_agg": {
      "unique_id": "macro.fivetran_utils.redshift__string_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/string_agg.sql",
      "original_file_path": "macros/string_agg.sql",
      "name": "redshift__string_agg",
      "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.spark__string_agg": {
      "unique_id": "macro.fivetran_utils.spark__string_agg",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/string_agg.sql",
      "original_file_path": "macros/string_agg.sql",
      "name": "spark__string_agg",
      "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.timestamp_add": {
      "unique_id": "macro.fivetran_utils.timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "timestamp_add",
      "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__timestamp_add"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__timestamp_add": {
      "unique_id": "macro.fivetran_utils.default__timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "default__timestamp_add",
      "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__timestamp_add": {
      "unique_id": "macro.fivetran_utils.bigquery__timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "bigquery__timestamp_add",
      "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__timestamp_add": {
      "unique_id": "macro.fivetran_utils.redshift__timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "redshift__timestamp_add",
      "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.postgres__timestamp_add": {
      "unique_id": "macro.fivetran_utils.postgres__timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "postgres__timestamp_add",
      "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.spark__timestamp_add": {
      "unique_id": "macro.fivetran_utils.spark__timestamp_add",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_add.sql",
      "original_file_path": "macros/timestamp_add.sql",
      "name": "spark__timestamp_add",
      "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.timestamp_diff": {
      "unique_id": "macro.fivetran_utils.timestamp_diff",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_diff.sql",
      "original_file_path": "macros/timestamp_diff.sql",
      "name": "timestamp_diff",
      "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__timestamp_diff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__timestamp_diff": {
      "unique_id": "macro.fivetran_utils.default__timestamp_diff",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_diff.sql",
      "original_file_path": "macros/timestamp_diff.sql",
      "name": "default__timestamp_diff",
      "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.redshift__timestamp_diff": {
      "unique_id": "macro.fivetran_utils.redshift__timestamp_diff",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_diff.sql",
      "original_file_path": "macros/timestamp_diff.sql",
      "name": "redshift__timestamp_diff",
      "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.bigquery__timestamp_diff": {
      "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_diff.sql",
      "original_file_path": "macros/timestamp_diff.sql",
      "name": "bigquery__timestamp_diff",
      "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.postgres__timestamp_diff": {
      "unique_id": "macro.fivetran_utils.postgres__timestamp_diff",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/timestamp_diff.sql",
      "original_file_path": "macros/timestamp_diff.sql",
      "name": "postgres__timestamp_diff",
      "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.union_data": {
      "unique_id": "macro.fivetran_utils.union_data",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/union_data.sql",
      "original_file_path": "macros/union_data.sql",
      "name": "union_data",
      "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.fivetran_utils.default__union_data"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.default__union_data": {
      "unique_id": "macro.fivetran_utils.default__union_data",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/union_data.sql",
      "original_file_path": "macros/union_data.sql",
      "name": "default__union_data",
      "macro_sql": "{% macro default__union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) %}\n\n{% if var('union_schemas', none) %}\n\n    {% set relations = [] %}\n\n    {% for schema in var('union_schemas') %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var('union_databases', none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var('union_databases') %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.union_relations"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.union_relations": {
      "unique_id": "macro.fivetran_utils.union_relations",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/union_relations.sql",
      "original_file_path": "macros/union_relations.sql",
      "name": "union_relations",
      "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils.string_literal",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.fivetran_utils.union_tables": {
      "unique_id": "macro.fivetran_utils.union_tables",
      "package_name": "fivetran_utils",
      "root_path": "/usr/app/dbt_modules/fivetran_utils",
      "path": "macros/union_relations.sql",
      "original_file_path": "macros/union_relations.sql",
      "name": "union_tables",
      "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.union_relations"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_order_columns": {
      "unique_id": "macro.shopify_source.get_order_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_order_columns",
      "macro_sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"browser_ip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"buyer_accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_buyer_accepted_marketing\"},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cancelled_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"cancelled_timestamp\"},\n    {\"name\": \"cart_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"checkout_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"closed_timestamp\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"financial_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_id\"},\n    {\"name\": \"landing_site_base_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_number\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"processing_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"referring_site\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_shipping_price_set\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_province_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtotal_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"taxes_included\", \"datatype\": \"boolean\", \"alias\": \"has_taxes_included\"},\n    {\"name\": \"test\", \"datatype\": \"boolean\", \"alias\": \"is_test_order\"},\n    {\"name\": \"token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_discounts\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_line_items_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_weight\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_customer_columns": {
      "unique_id": "macro.shopify_source.get_customer_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_customer_columns",
      "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accepts_marketing\", \"datatype\": \"boolean\", \"alias\": \"has_accepted_marketing\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"default_address_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"customer_id\"},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"orders_count\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_state\"},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\", \"alias\": \"is_tax_exempt\"},\n    {\"name\": \"total_spent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"verified_email\", \"datatype\": \"boolean\", \"alias\": \"is_verified_email\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_order_line_refund_columns": {
      "unique_id": "macro.shopify_source.get_order_line_refund_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_order_line_refund_columns",
      "macro_sql": "{% macro get_order_line_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_refund_id\"},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"restock_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_float",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_order_line_columns": {
      "unique_id": "macro.shopify_source.get_order_line_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_order_line_columns",
      "macro_sql": "{% macro get_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fulfillable_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"gift_card\", \"datatype\": \"boolean\", \"alias\": \"is_gift_card\"},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"order_line_id\"},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pre_tax_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_charge_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_for_shipping_jan_3_rd_2020\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_shipping_interval_frequency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"property_shipping_interval_unit_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_subscription_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_discount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"variant_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_product_columns": {
      "unique_id": "macro.shopify_source.get_product_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_product_columns",
      "macro_sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"handle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"product_id\"},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"published_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"published_timestamp\"},\n    {\"name\": \"published_scope\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_product_variant_columns": {
      "unique_id": "macro.shopify_source.get_product_variant_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_product_variant_columns",
      "macro_sql": "{% macro get_product_variant_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"variant_id\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"image_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sku\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"position\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"inventory_policy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"compare_at_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"inventory_management\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\", \"alias\": \"is_taxable\"},\n    {\"name\": \"barcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"grams\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"weight\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"option_3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"old_inventory_quantity\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": \"boolean\", \"alias\": \"is_requiring_shipping\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_transaction_columns": {
      "unique_id": "macro.shopify_source.get_transaction_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_transaction_columns",
      "macro_sql": "{% macro get_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"transaction_id\"},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"processed_timestamp\"},\n    {\"name\": \"device_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"gateway\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"payment_avs_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_bin\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_cvv_result_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_credit_card_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_exchange_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_adjustment\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_original_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_final_amount\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"currency_exchange_currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"test\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{% if target.type in ('redshift','postgres') %}\n {{ columns.append({\"name\": \"authorization\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"authorization\"}) }}\n{% else %}\n {\"name\": \"authorization\", \"datatype\": dbt_utils.type_string()}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_refund_columns": {
      "unique_id": "macro.shopify_source.get_refund_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_refund_columns",
      "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric(), \"alias\": \"refund_id\"},\n    {\"name\": \"note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"restock\", \"datatype\": \"boolean\"},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_timestamp",
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.shopify_source.get_order_adjustment_columns": {
      "unique_id": "macro.shopify_source.get_order_adjustment_columns",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "macros/staging_columns.sql",
      "original_file_path": "macros/staging_columns.sql",
      "name": "get_order_adjustment_columns",
      "macro_sql": "{% macro get_order_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\":  dbt_utils.type_numeric(), \"alias\": \"order_adjustment_id\"},\n    {\"name\": \"order_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\":  dbt_utils.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"kind\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_numeric",
          "macro.dbt_utils.type_float",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__concat": {
      "unique_id": "macro.spark_utils.spark__concat",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/concat.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql",
      "name": "spark__concat",
      "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__current_timestamp": {
      "unique_id": "macro.spark_utils.spark__current_timestamp",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql",
      "name": "spark__current_timestamp",
      "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__current_timestamp_in_utc": {
      "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql",
      "name": "spark__current_timestamp_in_utc",
      "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__type_numeric": {
      "unique_id": "macro.spark_utils.spark__type_numeric",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql",
      "name": "spark__type_numeric",
      "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__dateadd": {
      "unique_id": "macro.spark_utils.spark__dateadd",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql",
      "name": "spark__dateadd",
      "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.assert_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488415
    },
    "macro.spark_utils.spark__datediff": {
      "unique_id": "macro.spark_utils.spark__datediff",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/datediff.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql",
      "name": "spark__datediff",
      "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.assert_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__split_part": {
      "unique_id": "macro.spark_utils.spark__split_part",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/cross_db_utils/split_part.sql",
      "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql",
      "name": "spark__split_part",
      "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__get_relations_by_pattern": {
      "unique_id": "macro.spark_utils.spark__get_relations_by_pattern",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "name": "spark__get_relations_by_pattern",
      "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__get_relations_by_prefix": {
      "unique_id": "macro.spark_utils.spark__get_relations_by_prefix",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "name": "spark__get_relations_by_prefix",
      "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.spark__get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__get_tables_by_pattern": {
      "unique_id": "macro.spark_utils.spark__get_tables_by_pattern",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "name": "spark__get_tables_by_pattern",
      "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.spark__get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__get_tables_by_prefix": {
      "unique_id": "macro.spark_utils.spark__get_tables_by_prefix",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql",
      "name": "spark__get_tables_by_prefix",
      "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.spark__get_relations_by_prefix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.assert_not_null": {
      "unique_id": "macro.spark_utils.assert_not_null",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/etc/assert_not_null.sql",
      "original_file_path": "macros/etc/assert_not_null.sql",
      "name": "assert_not_null",
      "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.spark_utils.default__assert_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.default__assert_not_null": {
      "unique_id": "macro.spark_utils.default__assert_not_null",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/etc/assert_not_null.sql",
      "original_file_path": "macros/etc/assert_not_null.sql",
      "name": "default__assert_not_null",
      "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    },
    "macro.spark_utils.spark__convert_timezone": {
      "unique_id": "macro.spark_utils.spark__convert_timezone",
      "package_name": "spark_utils",
      "root_path": "/usr/app/dbt_modules/spark_utils",
      "path": "macros/snowplow/convert_timezone.sql",
      "original_file_path": "macros/snowplow/convert_timezone.sql",
      "name": "spark__convert_timezone",
      "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1633488416
    }
  },
  "docs": {
    "dbt.__overview__": {
      "unique_id": "dbt.__overview__",
      "package_name": "dbt",
      "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "name": "__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."
    },
    "shopify_source._fivetran_synced": {
      "unique_id": "shopify_source._fivetran_synced",
      "package_name": "shopify_source",
      "root_path": "/usr/app/dbt_modules/shopify_source",
      "path": "docs.md",
      "original_file_path": "models/docs.md",
      "name": "_fivetran_synced",
      "block_contents": "The time when a record was last updated by Fivetran."
    }
  },
  "exposures": {},
  "selectors": {},
  "disabled": [],
  "parent_map": {
    "model.shopify.shopify__customer_cohorts": [
      "model.shopify.shopify__calendar",
      "model.shopify.shopify__customers",
      "model.shopify.shopify__orders"
    ],
    "model.shopify.shopify__customers": [
      "model.shopify.shopify__customers__order_aggregates",
      "model.shopify_source.stg_shopify__customer",
      "model.shopify_source.stg_shopify__customer"
    ],
    "model.shopify.shopify__order_lines": [
      "model.shopify.shopify__orders__order_refunds",
      "model.shopify_source.stg_shopify__order_line",
      "model.shopify_source.stg_shopify__product_variant"
    ],
    "model.shopify.shopify__orders": [
      "model.shopify.shopify__orders__order_line_aggregates",
      "model.shopify.shopify__orders__order_refunds",
      "model.shopify_source.stg_shopify__order",
      "model.shopify_source.stg_shopify__order_adjustment"
    ],
    "model.shopify.shopify__products": [
      "model.shopify.shopify__order_lines",
      "model.shopify.shopify__orders",
      "model.shopify_source.stg_shopify__product"
    ],
    "model.shopify.shopify__transactions": [
      "model.shopify_source.stg_shopify__transaction"
    ],
    "model.shopify.shopify__customers__order_aggregates": [
      "model.shopify.shopify__transactions",
      "model.shopify_source.stg_shopify__order"
    ],
    "model.shopify.shopify__orders__order_line_aggregates": [
      "model.shopify_source.stg_shopify__order_line"
    ],
    "model.shopify.shopify__orders__order_refunds": [
      "model.shopify_source.stg_shopify__order_line_refund",
      "model.shopify_source.stg_shopify__refund"
    ],
    "model.shopify.shopify__calendar": [],
    "model.shopify_source.stg_shopify__customer": [
      "model.shopify_source.stg_shopify__customer_tmp",
      "model.shopify_source.stg_shopify__customer_tmp"
    ],
    "model.shopify_source.stg_shopify__order": [
      "model.shopify_source.stg_shopify__order_tmp",
      "model.shopify_source.stg_shopify__order_tmp"
    ],
    "model.shopify_source.stg_shopify__order_adjustment": [
      "model.shopify_source.stg_shopify__order_adjustment_tmp",
      "model.shopify_source.stg_shopify__order_adjustment_tmp"
    ],
    "model.shopify_source.stg_shopify__order_line": [
      "model.shopify_source.stg_shopify__order_line_tmp",
      "model.shopify_source.stg_shopify__order_line_tmp"
    ],
    "model.shopify_source.stg_shopify__order_line_refund": [
      "model.shopify_source.stg_shopify__order_line_refund_tmp",
      "model.shopify_source.stg_shopify__order_line_refund_tmp"
    ],
    "model.shopify_source.stg_shopify__product": [
      "model.shopify_source.stg_shopify__product_tmp",
      "model.shopify_source.stg_shopify__product_tmp"
    ],
    "model.shopify_source.stg_shopify__product_variant": [
      "model.shopify_source.stg_shopify__product_variant_tmp",
      "model.shopify_source.stg_shopify__product_variant_tmp"
    ],
    "model.shopify_source.stg_shopify__refund": [
      "model.shopify_source.stg_shopify__refund_tmp",
      "model.shopify_source.stg_shopify__refund_tmp"
    ],
    "model.shopify_source.stg_shopify__transaction": [
      "model.shopify_source.stg_shopify__transaction_tmp",
      "model.shopify_source.stg_shopify__transaction_tmp"
    ],
    "model.shopify_source.stg_shopify__customer_tmp": [
      "source.shopify_source.shopify.customer"
    ],
    "model.shopify_source.stg_shopify__order_adjustment_tmp": [
      "source.shopify_source.shopify.order_adjustment"
    ],
    "model.shopify_source.stg_shopify__order_line_refund_tmp": [
      "source.shopify_source.shopify.order_line_refund"
    ],
    "model.shopify_source.stg_shopify__order_line_tmp": [
      "source.shopify_source.shopify.order_line"
    ],
    "model.shopify_source.stg_shopify__order_tmp": [
      "source.shopify_source.shopify.order"
    ],
    "model.shopify_source.stg_shopify__product_tmp": [
      "source.shopify_source.shopify.product"
    ],
    "model.shopify_source.stg_shopify__product_variant_tmp": [
      "source.shopify_source.shopify.product_variant"
    ],
    "model.shopify_source.stg_shopify__refund_tmp": [
      "source.shopify_source.shopify.refund"
    ],
    "model.shopify_source.stg_shopify__transaction_tmp": [
      "source.shopify_source.shopify.transaction"
    ],
    "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc": [
      "model.shopify.shopify__customer_cohorts"
    ],
    "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad": [
      "model.shopify.shopify__customer_cohorts"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af": [
      "model.shopify.shopify__orders"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd": [
      "model.shopify.shopify__customers"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173": [
      "model.shopify.shopify__products"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46": [
      "model.shopify.shopify__order_lines"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f": [
      "model.shopify.shopify__transactions"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac": [
      "model.shopify.shopify__customers__order_aggregates"
    ],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21": [
      "model.shopify.shopify__orders__order_line_aggregates"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7": [
      "model.shopify_source.stg_shopify__customer"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859": [
      "model.shopify_source.stg_shopify__order_line_refund"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6": [
      "model.shopify_source.stg_shopify__order_line"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422": [
      "model.shopify_source.stg_shopify__order"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa": [
      "model.shopify_source.stg_shopify__product"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75": [
      "model.shopify_source.stg_shopify__product_variant"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2": [
      "model.shopify_source.stg_shopify__transaction"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a": [
      "model.shopify_source.stg_shopify__refund"
    ],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f": [
      "model.shopify_source.stg_shopify__order_adjustment"
    ],
    "source.shopify_source.shopify.order": [],
    "source.shopify_source.shopify.customer": [],
    "source.shopify_source.shopify.order_line": [],
    "source.shopify_source.shopify.order_line_refund": [],
    "source.shopify_source.shopify.product": [],
    "source.shopify_source.shopify.product_variant": [],
    "source.shopify_source.shopify.transaction": [],
    "source.shopify_source.shopify.refund": [],
    "source.shopify_source.shopify.order_adjustment": []
  },
  "child_map": {
    "model.shopify.shopify__customer_cohorts": [
      "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad",
      "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc"
    ],
    "model.shopify.shopify__customers": [
      "model.shopify.shopify__customer_cohorts",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd"
    ],
    "model.shopify.shopify__order_lines": [
      "model.shopify.shopify__products",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46"
    ],
    "model.shopify.shopify__orders": [
      "model.shopify.shopify__customer_cohorts",
      "model.shopify.shopify__products",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af"
    ],
    "model.shopify.shopify__products": [
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173"
    ],
    "model.shopify.shopify__transactions": [
      "model.shopify.shopify__customers__order_aggregates",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f"
    ],
    "model.shopify.shopify__customers__order_aggregates": [
      "model.shopify.shopify__customers",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac"
    ],
    "model.shopify.shopify__orders__order_line_aggregates": [
      "model.shopify.shopify__orders",
      "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21"
    ],
    "model.shopify.shopify__orders__order_refunds": [
      "model.shopify.shopify__order_lines",
      "model.shopify.shopify__orders"
    ],
    "model.shopify.shopify__calendar": [
      "model.shopify.shopify__customer_cohorts"
    ],
    "model.shopify_source.stg_shopify__customer": [
      "model.shopify.shopify__customers",
      "model.shopify.shopify__customers",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7"
    ],
    "model.shopify_source.stg_shopify__order": [
      "model.shopify.shopify__customers__order_aggregates",
      "model.shopify.shopify__orders",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422"
    ],
    "model.shopify_source.stg_shopify__order_adjustment": [
      "model.shopify.shopify__orders",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f"
    ],
    "model.shopify_source.stg_shopify__order_line": [
      "model.shopify.shopify__order_lines",
      "model.shopify.shopify__orders__order_line_aggregates",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6"
    ],
    "model.shopify_source.stg_shopify__order_line_refund": [
      "model.shopify.shopify__orders__order_refunds",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859"
    ],
    "model.shopify_source.stg_shopify__product": [
      "model.shopify.shopify__products",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa"
    ],
    "model.shopify_source.stg_shopify__product_variant": [
      "model.shopify.shopify__order_lines",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75"
    ],
    "model.shopify_source.stg_shopify__refund": [
      "model.shopify.shopify__orders__order_refunds",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a"
    ],
    "model.shopify_source.stg_shopify__transaction": [
      "model.shopify.shopify__transactions",
      "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2"
    ],
    "model.shopify_source.stg_shopify__customer_tmp": [
      "model.shopify_source.stg_shopify__customer",
      "model.shopify_source.stg_shopify__customer"
    ],
    "model.shopify_source.stg_shopify__order_adjustment_tmp": [
      "model.shopify_source.stg_shopify__order_adjustment",
      "model.shopify_source.stg_shopify__order_adjustment"
    ],
    "model.shopify_source.stg_shopify__order_line_refund_tmp": [
      "model.shopify_source.stg_shopify__order_line_refund",
      "model.shopify_source.stg_shopify__order_line_refund"
    ],
    "model.shopify_source.stg_shopify__order_line_tmp": [
      "model.shopify_source.stg_shopify__order_line",
      "model.shopify_source.stg_shopify__order_line"
    ],
    "model.shopify_source.stg_shopify__order_tmp": [
      "model.shopify_source.stg_shopify__order",
      "model.shopify_source.stg_shopify__order"
    ],
    "model.shopify_source.stg_shopify__product_tmp": [
      "model.shopify_source.stg_shopify__product",
      "model.shopify_source.stg_shopify__product"
    ],
    "model.shopify_source.stg_shopify__product_variant_tmp": [
      "model.shopify_source.stg_shopify__product_variant",
      "model.shopify_source.stg_shopify__product_variant"
    ],
    "model.shopify_source.stg_shopify__refund_tmp": [
      "model.shopify_source.stg_shopify__refund",
      "model.shopify_source.stg_shopify__refund"
    ],
    "model.shopify_source.stg_shopify__transaction_tmp": [
      "model.shopify_source.stg_shopify__transaction",
      "model.shopify_source.stg_shopify__transaction"
    ],
    "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.5c4b1a3abc": [],
    "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.0a8b3278ad": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.6343bdc1af": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.0a89b737cd": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.34523cf173": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.fe01a1ac46": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.6563ff8b8f": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.00bc3309ac": [],
    "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.000420af21": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.f17a8d22e7": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.a4727ab859": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.bbed1054f6": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.bd322d1422": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.63b36b64aa": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.af072cdb75": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.48c66a73b2": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.dc254cee5a": [],
    "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.957d3be47f": [],
    "source.shopify_source.shopify.order": [
      "model.shopify_source.stg_shopify__order_tmp"
    ],
    "source.shopify_source.shopify.customer": [
      "model.shopify_source.stg_shopify__customer_tmp"
    ],
    "source.shopify_source.shopify.order_line": [
      "model.shopify_source.stg_shopify__order_line_tmp"
    ],
    "source.shopify_source.shopify.order_line_refund": [
      "model.shopify_source.stg_shopify__order_line_refund_tmp"
    ],
    "source.shopify_source.shopify.product": [
      "model.shopify_source.stg_shopify__product_tmp"
    ],
    "source.shopify_source.shopify.product_variant": [
      "model.shopify_source.stg_shopify__product_variant_tmp"
    ],
    "source.shopify_source.shopify.transaction": [
      "model.shopify_source.stg_shopify__transaction_tmp"
    ],
    "source.shopify_source.shopify.refund": [
      "model.shopify_source.stg_shopify__refund_tmp"
    ],
    "source.shopify_source.shopify.order_adjustment": [
      "model.shopify_source.stg_shopify__order_adjustment_tmp"
    ]
  }
}