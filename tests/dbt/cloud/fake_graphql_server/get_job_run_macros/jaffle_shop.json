{
  "job": {
    "macros": [
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "bigquery__convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__convert_timezone"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro bigquery__date_part(datepart, date) -%}\\n    extract({{ datepart }} from {{ date }})\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__date_part",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__date_part"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro bigquery__day_name(date, short) -%}\\n{%- set f = '%a' if short else '%A' -%}\\n    format_date('{{ f }}', cast({{ date }} as date))\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__day_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__day_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro bigquery__day_of_week(date, isoweek) -%}\\n\\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\\n\\n    {%- if isoweek -%}\\n    case\\n        -- Shift start of week from Sunday (1) to Monday (2)\\n        when {{ dow }} = 1 then 7\\n        else {{ dow }} - 1\\n    end\\n    {%- else -%}\\n    {{ dow }}\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__day_of_week"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\\n    {%- if format == \"seconds\" -%}\\n        timestamp_seconds({{ epochs }})\\n    {%- elif format == \"milliseconds\" -%}\\n        timestamp_millis({{ epochs }})\\n    {%- elif format == \"microseconds\" -%}\\n        timestamp_micros({{ epochs }})\\n    {%- else -%}\\n    {{ exceptions.raise_compiler_error(\\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\\n        )\\n    }}\\n    {% endif -%}\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__from_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__from_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine",
          "macro.dbt.type_timestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\\n\\n{%- if start_date and end_date -%}\\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\\n\\n{%- elif n_dateparts and datepart -%}\\n\\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\\n{%- set end_date = dbt_date.tomorrow() -%}\\n{%- endif -%}\\n\\nwith date_spine as\\n(\\n\\n    {{ dbt_date.date_spine(\\n        datepart=datepart,\\n        start_date=start_date,\\n        end_date=end_date,\\n       )\\n    }}\\n\\n)\\nselect\\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\\nfrom\\n    date_spine d\\n{% endmacro %}",
        "meta": {},
        "name": "bigquery__get_base_dates",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__get_base_dates"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro bigquery__month_name(date, short) -%}\\n{%- set f = '%b' if short else '%B' -%}\\n    format_date('{{ f }}', cast({{ date }} as date))\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__month_name"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\\n    unix_seconds({{ timestamp }})\\n{%- endmacro %}",
        "meta": {},
        "name": "bigquery__to_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.bigquery__to_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__convert_timezone"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.convert_timezone"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro date_part(datepart, date) -%}\\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "date_part",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.date_part"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__date_spine"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro date_spine(datepart, start_date, end_date) %}\\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "date_spine",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.date_spine"
      },
      {
        "dependsOn": [
          "macro.dbt_date.snowflake__day_name"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro day_name(date, short=True) -%}\\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "day_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.day_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro day_of_month(date) -%}\\n{{ dbt_date.date_part('day', date) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "day_of_month",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.day_of_month"
      },
      {
        "dependsOn": [
          "macro.dbt_date.snowflake__day_of_week"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro day_of_week(date, isoweek=true) -%}\\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.day_of_week"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__day_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro day_of_year(date) -%}\\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "day_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.day_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt.type_timestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\\n    cast({{ column }} as {{ dbt.type_timestamp() }})\\n)\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "default__convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__convert_timezone"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__date_part(datepart, date) -%}\\n    date_part('{{ datepart }}', {{  date }})\\n{%- endmacro %}",
        "meta": {},
        "name": "default__date_part",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__date_part"
      },
      {
        "dependsOn": [
          "macro.dbt_date.generate_series",
          "macro.dbt_date.get_intervals_between",
          "macro.dbt.dateadd"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__date_spine(datepart, start_date, end_date) %}\\n\\n\\n{# call as follows:\\n\\ndate_spine(\\n    \"day\",\\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\\n    \"dbt.dateadd(week, 1, current_date)\"\\n) #}\\n\\n\\nwith rawdata as (\\n\\n    {{\\n        dbt_date.generate_series(\\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\\n        )\\n    }}\\n\\n),\\n\\nall_periods as (\\n\\n    select (\\n        {{\\n            dbt.dateadd(\\n                datepart,\\n                \"row_number() over (order by 1) - 1\",\\n                start_date\\n            )\\n        }}\\n    ) as date_{{datepart}}\\n    from rawdata\\n\\n),\\n\\nfiltered as (\\n\\n    select *\\n    from all_periods\\n    where date_{{datepart}} <= {{ end_date }}\\n\\n)\\n\\nselect * from filtered\\n\\n{% endmacro %}",
        "meta": {},
        "name": "default__date_spine",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__date_spine"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__day_name(date, short) -%}\\n{%- set f = 'Dy' if short else 'Day' -%}\\n    to_char({{ date }}, '{{ f }}')\\n{%- endmacro %}",
        "meta": {},
        "name": "default__day_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__day_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__day_of_week(date, isoweek) -%}\\n\\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\\n\\n    {%- if isoweek -%}\\n    case\\n        -- Shift start of week from Sunday (0) to Monday (1)\\n        when {{ dow }} = 0 then 7\\n        else {{ dow }}\\n    end\\n    {%- else -%}\\n    {{ dow }} + 1\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "default__day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__day_of_week"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__day_of_year(date) -%}\\n    {{ dbt_date.date_part('dayofyear', date) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__day_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__day_of_year"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\\n    {%- if format != \"seconds\" -%}\\n    {{ exceptions.raise_compiler_error(\\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\\n        )\\n    }}\\n    {% endif -%}\\n    to_timestamp({{ epochs }})\\n{%- endmacro %}",
        "meta": {},
        "name": "default__from_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__from_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.get_powers_of_two"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__generate_series(upper_bound) %}\\n\\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\\n\\n    with p as (\\n        select 0 as generated_number union all select 1\\n    ), unioned as (\\n\\n    select\\n\\n    {% for i in range(n) %}\\n    p{{i}}.generated_number * power(2, {{i}})\\n    {% if not loop.last %} + {% endif %}\\n    {% endfor %}\\n    + 1\\n    as generated_number\\n\\n    from\\n\\n    {% for i in range(n) %}\\n    p as p{{i}}\\n    {% if not loop.last %} cross join {% endif %}\\n    {% endfor %}\\n\\n    )\\n\\n    select *\\n    from unioned\\n    where generated_number <= {{upper_bound}}\\n    order by generated_number\\n\\n{% endmacro %}",
        "meta": {},
        "name": "default__generate_series",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__generate_series"
      },
      {
        "dependsOn": [
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\\n\\n{%- if start_date and end_date -%}\\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\\n\\n{%- elif n_dateparts and datepart -%}\\n\\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\\n{%- set end_date = dbt_date.tomorrow() -%}\\n{%- endif -%}\\n\\nwith date_spine as\\n(\\n\\n    {{ dbt_date.date_spine(\\n        datepart=datepart,\\n        start_date=start_date,\\n        end_date=end_date,\\n       )\\n    }}\\n\\n)\\nselect\\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\\nfrom\\n    date_spine d\\n{% endmacro %}",
        "meta": {},
        "name": "default__get_base_dates",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__get_base_dates"
      },
      {
        "dependsOn": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__get_date_dimension(start_date, end_date) %}\\nwith base_dates as (\\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\\n),\\ndates_with_prior_year_dates as (\\n\\n    select\\n        cast(d.date_day as date) as date_day,\\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\\n    from\\n    \\tbase_dates d\\n\\n)\\nselect\\n    d.date_day,\\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\\n    d.prior_year_date_day as prior_year_date_day,\\n    d.prior_year_over_year_date_day,\\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\\n\\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\\n\\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\\n\\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\\n\\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\\n\\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\\n\\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\\n\\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\\n\\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\\nfrom\\n    dates_with_prior_year_dates d\\norder by 1\\n{% endmacro %}",
        "meta": {},
        "name": "default__get_date_dimension",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__get_date_dimension"
      },
      {
        "dependsOn": [
          "macro.dbt.dateadd",
          "macro.dbt.datediff"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\\n-- this gets all the dates within a fiscal year\\n-- determined by the given year-end-month\\n-- ending on the saturday closest to that month's end date\\nwith date_dimension as (\\n    select * from {{ dates }}\\n),\\nyear_month_end as (\\n\\n    select\\n       d.year_number - {{ shift_year }} as fiscal_year_number,\\n       d.month_end_date\\n    from\\n        date_dimension d\\n    where\\n        d.month_of_year = {{ year_end_month }}\\n    group by 1,2\\n\\n),\\nweeks as (\\n\\n    select\\n        d.year_number,\\n        d.month_of_year,\\n        d.date_day as week_start_date,\\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\\n    from\\n        date_dimension d\\n    where\\n        d.day_of_week = {{ week_start_day }}\\n\\n),\\n-- get all the weeks that start in the month the year ends\\nyear_week_ends as (\\n\\n    select\\n        d.year_number - {{ shift_year }} as fiscal_year_number,\\n        d.week_end_date\\n    from\\n        weeks d\\n    where\\n        d.month_of_year = {{ year_end_month }}\\n    group by\\n        1,2\\n\\n),\\n-- then calculate which Saturday is closest to month end\\nweeks_at_month_end as (\\n\\n    select\\n        d.fiscal_year_number,\\n        d.week_end_date,\\n        m.month_end_date,\\n        rank() over\\n            (partition by d.fiscal_year_number\\n                order by\\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\\n\\n            ) as closest_to_month_end\\n    from\\n        year_week_ends d\\n        join\\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\\n),\\nfiscal_year_range as (\\n\\n    select\\n        w.fiscal_year_number,\\n        cast(\\n            {{ dbt.dateadd('day', 1,\\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\\n            as date) as fiscal_year_start_date,\\n        w.week_end_date as fiscal_year_end_date\\n    from\\n        weeks_at_month_end w\\n    where\\n        w.closest_to_month_end = 1\\n\\n),\\nfiscal_year_dates as (\\n\\n    select\\n        d.date_day,\\n        m.fiscal_year_number,\\n        m.fiscal_year_start_date,\\n        m.fiscal_year_end_date,\\n        w.week_start_date,\\n        w.week_end_date,\\n        -- we reset the weeks of the year starting with the merch year start date\\n        dense_rank()\\n            over(\\n                partition by m.fiscal_year_number\\n                order by w.week_start_date\\n                ) as fiscal_week_of_year\\n    from\\n        date_dimension d\\n        join\\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\\n        join\\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\\n\\n)\\nselect * from fiscal_year_dates order by 1\\n{% endmacro %}",
        "meta": {},
        "name": "default__get_fiscal_year_dates",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__get_fiscal_year_dates"
      },
      {
        "dependsOn": [
          "macro.dbt.statement",
          "macro.dbt.datediff"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\\n    {%- call statement('get_intervals_between', fetch_result=True) %}\\n\\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\\n\\n    {%- endcall -%}\\n\\n    {%- set value_list = load_result('get_intervals_between') -%}\\n\\n    {%- if value_list and value_list['data'] -%}\\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\\n        {{ return(values[0]) }}\\n    {%- else -%}\\n        {{ return(1) }}\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "default__get_intervals_between",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__get_intervals_between"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro default__get_powers_of_two(upper_bound) %}\\n\\n    {% if upper_bound <= 0 %}\\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\\n    {% endif %}\\n\\n    {% for _ in range(1, 100) %}\\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\\n    {% endfor %}\\n\\n{% endmacro %}",
        "meta": {},
        "name": "default__get_powers_of_two",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__get_powers_of_two"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_end"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__iso_week_end(date) -%}\\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__iso_week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__iso_week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__iso_week_of_year(date) -%}\\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__iso_week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__iso_week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_start"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__iso_week_start(date) -%}\\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__iso_week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__iso_week_start"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__month_name(date, short) -%}\\n{%- set f = 'MON' if short else 'MONTH' -%}\\n    to_char({{ date }}, '{{ f }}')\\n{%- endmacro %}",
        "meta": {},
        "name": "default__month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro default__to_unixtimestamp(timestamp) -%}\\n    {{ dbt_date.date_part('epoch', timestamp) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__to_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__to_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt.last_day"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro default__week_end(date) -%}\\n{{ last_day(date, 'week') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "default__week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro default__week_of_year(date) -%}\\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\\n{%- endmacro %}",
        "meta": {},
        "name": "default__week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro default__week_start(date) -%}\\ncast({{ dbt.date_trunc('week', date) }} as date)\\n{%- endmacro %}",
        "meta": {},
        "name": "default__week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.default__week_start"
      },
      {
        "dependsOn": [
          "macro.dbt_date.snowflake__from_unixtimestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "from_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.from_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__generate_series"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro generate_series(upper_bound) %}\\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\\n{% endmacro %}",
        "meta": {},
        "name": "generate_series",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.generate_series"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__get_base_dates"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\\n{% endmacro %}",
        "meta": {},
        "name": "get_base_dates",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_base_dates"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__get_date_dimension"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_date_dimension(start_date, end_date) %}\\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\\n{% endmacro %}",
        "meta": {},
        "name": "get_date_dimension",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_date_dimension"
      },
      {
        "dependsOn": [
          "macro.dbt_date.get_fiscal_year_dates",
          "macro.dbt.type_int"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\\n{#\\nThis macro requires you to pass in a ref to a date dimension, created via\\ndbt_date.get_date_dimension()s\\n#}\\nwith fscl_year_dates_for_periods as (\\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\\n),\\nfscl_year_w13 as (\\n\\n    select\\n        f.*,\\n        -- We count the weeks in a 13 week period\\n        -- and separate the 4-5-4 week sequences\\n        mod(cast(\\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\\n            ), 13) as w13_number,\\n        -- Chop weeks into 13 week merch quarters\\n        cast(\\n            least(\\n                floor((f.fiscal_week_of_year-1)/13.0)\\n                , 3)\\n            as {{ dbt.type_int() }}) as quarter_number\\n    from\\n        fscl_year_dates_for_periods f\\n\\n),\\nfscl_periods as (\\n\\n    select\\n        f.date_day,\\n        f.fiscal_year_number,\\n        f.week_start_date,\\n        f.week_end_date,\\n        f.fiscal_week_of_year,\\n        case\\n            -- we move week 53 into the 3rd period of the quarter\\n            when f.fiscal_week_of_year = 53 then 3\\n            when f.w13_number between 0 and 3 then 1\\n            when f.w13_number between 4 and 8 then 2\\n            when f.w13_number between 9 and 12 then 3\\n        end as period_of_quarter,\\n        f.quarter_number\\n    from\\n        fscl_year_w13 f\\n\\n),\\nfscl_periods_quarters as (\\n\\n    select\\n        f.*,\\n        cast((\\n            (f.quarter_number * 3) + f.period_of_quarter\\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\\n    from\\n        fscl_periods f\\n\\n)\\nselect\\n    date_day,\\n    fiscal_year_number,\\n    week_start_date,\\n    week_end_date,\\n    fiscal_week_of_year,\\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\\n    fiscal_period_number,\\n    quarter_number+1 as fiscal_quarter_number,\\n    period_of_quarter as fiscal_period_of_quarter\\nfrom\\n    fscl_periods_quarters\\norder by 1,2\\n{% endmacro %}",
        "meta": {},
        "name": "get_fiscal_periods",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_fiscal_periods"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__get_fiscal_year_dates"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\\n{% endmacro %}",
        "meta": {},
        "name": "get_fiscal_year_dates",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_fiscal_year_dates"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__get_intervals_between"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "get_intervals_between",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_intervals_between"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__get_powers_of_two"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro get_powers_of_two(upper_bound) %}\\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\\n{% endmacro %}",
        "meta": {},
        "name": "get_powers_of_two",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.get_powers_of_two"
      },
      {
        "dependsOn": [
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.n_days_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro _iso_week_end(date, week_type) -%}\\n{%- set dt = dbt_date.iso_week_start(date) -%}\\n{{ dbt_date.n_days_away(6, dt) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "_iso_week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date._iso_week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_end"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro iso_week_end(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "iso_week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.iso_week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro _iso_week_of_year(date, week_type) -%}\\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\\n{%- endmacro %}",
        "meta": {},
        "name": "_iso_week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date._iso_week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "iso_week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.iso_week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro _iso_week_start(date, week_type) -%}\\ncast({{ dbt.date_trunc(week_type, date) }} as date)\\n{%- endmacro %}",
        "meta": {},
        "name": "_iso_week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date._iso_week_start"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__iso_week_start"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro iso_week_start(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "iso_week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.iso_week_start"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_months_ago"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro last_month(tz=None) -%}\\n{{ dbt_date.n_months_ago(1, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "last_month",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.last_month"
      },
      {
        "dependsOn": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.last_month"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro last_month_name(short=True, tz=None) -%}\\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "last_month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.last_month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.last_month"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro last_month_number(tz=None) -%}\\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "last_month_number",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.last_month_number"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_weeks_ago"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro last_week(tz=None) -%}\\n{{ dbt_date.n_weeks_ago(1, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "last_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.last_week"
      },
      {
        "dependsOn": [
          "macro.dbt_date.snowflake__month_name"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro month_name(date, short=True) -%}\\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt.dateadd"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{%- set n = n|int -%}\\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_days_ago",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_days_ago"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_days_ago"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_days_away(n, date=None, tz=None) -%}\\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_days_away",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_days_away"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_months_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro next_month(tz=None) -%}\\n{{ dbt_date.n_months_away(1, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "next_month",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.next_month"
      },
      {
        "dependsOn": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.next_month"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro next_month_name(short=True, tz=None) -%}\\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "next_month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.next_month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.next_month"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro next_month_number(tz=None) -%}\\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "next_month_number",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.next_month_number"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_weeks_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro next_week(tz=None) -%}\\n{{ dbt_date.n_weeks_away(1, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "next_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.next_week"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_months_ago(n, tz=None) -%}\\n{%- set n = n|int -%}\\n{{ dbt.date_trunc('month',\\n    dbt.dateadd('month', -1 * n,\\n        dbt_date.today(tz)\\n        )\\n    ) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_months_ago",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_months_ago"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_months_away(n, tz=None) -%}\\n{%- set n = n|int -%}\\n{{ dbt.date_trunc('month',\\n    dbt.dateadd('month', n,\\n        dbt_date.today(tz)\\n        )\\n    ) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_months_away",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_months_away"
      },
      {
        "dependsOn": [
          "macro.dbt_date.convert_timezone",
          "macro.dbt.current_timestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro now(tz=None) -%}\\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "now",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.now"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_weeks_ago(n, tz=None) -%}\\n{%- set n = n|int -%}\\n{{ dbt.date_trunc('week',\\n    dbt.dateadd('week', -1 * n,\\n        dbt_date.today(tz)\\n        )\\n    ) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_weeks_ago",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_weeks_ago"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro n_weeks_away(n, tz=None) -%}\\n{%- set n = n|int -%}\\n{{ dbt.date_trunc('week',\\n    dbt.dateadd('week', n,\\n        dbt_date.today(tz)\\n        )\\n    ) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "n_weeks_away",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.n_weeks_away"
      },
      {
        "dependsOn": [
          "macro.dbt.datediff",
          "macro.dbt_date.now"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "periods_since",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.periods_since"
      },
      {
        "dependsOn": [
          "macro.dbt.type_timestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\\ncast(\\n    cast({{ column }} as {{ dbt.type_timestamp() }})\\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\\n)\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "postgres__convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__convert_timezone"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__day_name(date, short) -%}\\n{# FM = Fill mode, which suppresses padding blanks #}\\n{%- set f = 'FMDy' if short else 'FMDay' -%}\\n    to_char({{ date }}, '{{ f }}')\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__day_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__day_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n\\n{%- macro postgres__day_of_week(date, isoweek) -%}\\n\\n    {%- if isoweek -%}\\n        {%- set dow_part = 'isodow' -%}\\n        -- Monday(1) to Sunday (7)\\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\\n    {%- else -%}\\n        {%- set dow_part = 'dow' -%}\\n        -- Sunday(1) to Saturday (7)\\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__day_of_week"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__day_of_year(date) -%}\\n    {{ dbt_date.date_part('doy', date) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__day_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__day_of_year"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\\n    {%- if format != \"seconds\" -%}\\n    {{ exceptions.raise_compiler_error(\\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\\n        )\\n    }}\\n    {% endif -%}\\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__from_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__from_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\\nwith base_dates as (\\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\\n),\\ndates_with_prior_year_dates as (\\n\\n    select\\n        cast(d.date_day as date) as date_day,\\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\\n    from\\n    \\tbase_dates d\\n\\n)\\nselect\\n    d.date_day,\\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\\n    d.prior_year_date_day as prior_year_date_day,\\n    d.prior_year_over_year_date_day,\\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\\n\\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\\n\\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\\n\\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\\n\\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\\n\\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\\n\\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\\n\\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\\n\\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\\n\\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\\nfrom\\n    dates_with_prior_year_dates d\\norder by 1\\n{% endmacro %}",
        "meta": {},
        "name": "postgres__get_date_dimension",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__get_date_dimension"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__iso_week_of_year(date) -%}\\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\\n{{ dbt_date._iso_week_of_year(date, 'week') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__iso_week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__iso_week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_start"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__iso_week_start(date) -%}\\n{{ dbt_date._iso_week_start(date, 'week') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__iso_week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__iso_week_start"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__month_name(date, short) -%}\\n{# FM = Fill mode, which suppresses padding blanks #}\\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\\n    to_char({{ date }}, '{{ f }}')\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__week_end(date) -%}\\n{%- set dt = dbt_date.week_start(date) -%}\\n{{ dbt_date.n_days_away(6, dt) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__week_end"
      },
      {
        "dependsOn": [
          "macro.dbt.type_int"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__week_of_year(date) -%}\\n{# postgresql 'week' returns isoweek. Use to_char instead.\\n   WW = the first week starts on the first day of the year #}\\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt.dateadd",
          "macro.dbt.date_trunc"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro postgres__week_start(date) -%}\\n-- Sunday as week start date\\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\\n{%- endmacro %}",
        "meta": {},
        "name": "postgres__week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.postgres__week_start"
      },
      {
        "dependsOn": [
          "macro.dbt_date.default__convert_timezone"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "redshift__convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.redshift__convert_timezone"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro redshift__day_of_month(date) -%}\\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\\n{%- endmacro %}",
        "meta": {},
        "name": "redshift__day_of_month",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.redshift__day_of_month"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n\\n{%- macro redshift__day_of_week(date, isoweek) -%}\\n\\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\\n\\n    {%- if isoweek -%}\\n    case\\n        -- Shift start of week from Sunday (0) to Monday (1)\\n        when {{ dow }} = 0 then 7\\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\\n    end\\n    {%- else -%}\\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "redshift__day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.redshift__day_of_week"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro redshift__day_of_year(date) -%}\\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\\n{%- endmacro %}",
        "meta": {},
        "name": "redshift__day_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.redshift__day_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro round_timestamp(timestamp) %}\\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\\n{% endmacro %}",
        "meta": {},
        "name": "round_timestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.round_timestamp"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__day_name(date, short) -%}\\n    {%- if short -%}\\n    dayname({{ date }})\\n    {%- else -%}\\n    -- long version not implemented on Snowflake so we're doing it manually :/\\n    case dayname({{ date }})\\n        when 'Mon' then 'Monday'\\n        when 'Tue' then 'Tuesday'\\n        when 'Wed' then 'Wednesday'\\n        when 'Thu' then 'Thursday'\\n        when 'Fri' then 'Friday'\\n        when 'Sat' then 'Saturday'\\n        when 'Sun' then 'Sunday'\\n    end\\n    {%- endif -%}\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__day_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__day_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__day_of_week(date, isoweek) -%}\\n\\n    {%- if isoweek -%}\\n        {%- set dow_part = 'dayofweekiso' -%}\\n        {{ dbt_date.date_part(dow_part, date) }}\\n    {%- else -%}\\n        {%- set dow_part = 'dayofweek' -%}\\n        case\\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\\n        end\\n    {%- endif -%}\\n\\n\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__day_of_week",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__day_of_week"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\\n    {%- if format == \"seconds\" -%}\\n    {%- set scale = 0 -%}\\n    {%- elif format == \"milliseconds\" -%}\\n    {%- set scale = 3 -%}\\n    {%- elif format == \"microseconds\" -%}\\n    {%- set scale = 6 -%}\\n    {%- else -%}\\n    {{ exceptions.raise_compiler_error(\\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\\n        )\\n    }}\\n    {% endif -%}\\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\\n\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__from_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__from_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_end"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__iso_week_end(date) -%}\\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__iso_week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__iso_week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__iso_week_of_year(date) -%}\\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__iso_week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__iso_week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt_date._iso_week_start"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__iso_week_start(date) -%}\\n{{ dbt_date._iso_week_start(date, 'week') }}\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__iso_week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__iso_week_start"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__month_name(date, short) -%}\\n{%- set f = 'MON' if short else 'MMMM' -%}\\n    to_char({{ date }}, '{{ f }}')\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__month_name",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__month_name"
      },
      {
        "dependsOn": [
          "macro.dbt_date.date_part"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__to_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__to_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__week_end(date) -%}\\n{%- set dt = dbt_date.week_start(date) -%}\\n{{ dbt_date.n_days_away(6, dt) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date.day_of_week",
          "macro.dbt.dateadd"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "\\n\\n{%- macro snowflake__week_start(date) -%}\\n    {#\\n        Get the day of week offset: e.g. if the date is a Sunday,\\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\\n    #}\\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\\n{%- endmacro %}",
        "meta": {},
        "name": "snowflake__week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.snowflake__week_start"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\\nfrom_utc_timestamp(\\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\\n        '{{ target_tz }}'\\n        )\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "spark__convert_timezone",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.spark__convert_timezone"
      },
      {
        "dependsOn": [
          "macro.dbt_date.now"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro today(tz=None) -%}\\ncast({{ dbt_date.now(tz) }} as date)\\n{%- endmacro -%}",
        "meta": {},
        "name": "today",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.today"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_days_away"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro tomorrow(date=None, tz=None) -%}\\n{{ dbt_date.n_days_away(1, date, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "tomorrow",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.tomorrow"
      },
      {
        "dependsOn": [
          "macro.dbt_date.snowflake__to_unixtimestamp"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro to_unixtimestamp(timestamp) -%}\\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\\n{%- endmacro %}",
        "meta": {},
        "name": "to_unixtimestamp",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.to_unixtimestamp"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__week_end"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro week_end(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "week_end",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.week_end"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.default__week_of_year"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro week_of_year(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "week_of_year",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.week_of_year"
      },
      {
        "dependsOn": [
          "macro.dbt_date.today",
          "macro.dbt_date.snowflake__week_start"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro week_start(date=None, tz=None) -%}\\n{%-set dt = date if date else dbt_date.today(tz) -%}\\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\\n{%- endmacro -%}\\n\\n",
        "meta": {},
        "name": "week_start",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.week_start"
      },
      {
        "dependsOn": [
          "macro.dbt_date.n_days_ago"
        ],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{%- macro yesterday(date=None, tz=None) -%}\\n{{ dbt_date.n_days_ago(1, date, tz) }}\\n{%- endmacro -%}",
        "meta": {},
        "name": "yesterday",
        "packageName": "dbt_date",
        "uniqueId": "macro.dbt_date.yesterday"
      },
      {
        "dependsOn": [],
        "description": "",
        "environmentId": 132676,
        "macroSql": "{% macro cents_to_dollars(column_name, precision=2) -%}\\n    ({{ column_name }} / 100)::numeric(16, {{ precision }})\\n{%- endmacro %}",
        "meta": {},
        "name": "cents_to_dollars",
        "packageName": "jaffle_shop",
        "uniqueId": "macro.jaffle_shop.cents_to_dollars"
      }
    ]
  }
}
