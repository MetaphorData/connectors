---
name: CI/CD

env:
    PYTHON_VERSION: 3.7
    POETRY_VERSION: 1.1.7

# Run this build workflow every time a new PR or push is made to the main branch
on:
    push:
        branches: [main]

    pull_request:
        branches: [main]

    workflow_dispatch:

jobs:
    check-py:
        name: Check Python code
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Setup Poetry
              uses: abatilo/actions-poetry@v2.0.0
              with:
                  poetry-version: ${{ env.POETRY_VERSION }}

            - name: Lint & Type Check
              run: |
                  poetry install -E all
                  poetry run flakehell lint
                  poetry run black --check .
                  poetry run isort --check .
                  poetry run mypy .

            - name: Test
              run: |
                  poetry run pytest

    # Only publish to PyPI when PR merged or manually triggered
    publish:
        if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') ||  github.event_name == 'workflow_dispatch' }}
        needs:
            - check-py
        name: Publish to PyPI
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Setup Poetry
              uses: abatilo/actions-poetry@v2.0.0
              with:
                  poetry-version: ${{ env.POETRY_VERSION }}

            - name: Publish to PyPI
              run: >
                  poetry publish --build
                  -u ${{ secrets.PYPI_USERNAME }}
                  -p ${{ secrets.PYPI_PASSWORD }}
                  2>&1 | tee ${{ runner.temp }}/logs
                  || grep -qiE 'File already exists' ${{ runner.temp }}/logs

            - name: Check PyPI publish
              id: check-publish
              run: >
                  grep -qiEv 'File already exists' ${{ runner.temp }}/logs &&  VERSION=$(grep '^version =' pyproject.toml | cut -d' ' -f 3 | tr -d '"')
                  &&
                  echo '::set-output name=PYPI_VERSION::$VERSION'

            - name: Create tag
              if: ${{ steps.check-publish.outputs.PYPI_VERSION }}
              env:
                  PYPI_VERSION: ${{ steps.check-publish.outputs.PYPI_VERSION }}
              uses: actions/github-script@v3
              with:
                  github-token: ${{ github.token }}
                  script: |
                      try {
                        await github.git.deleteRef({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          ref: "tags/${{ env.PYPI_VERSION }}"
                        });
                      } catch (err) {}

                      github.git.createRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: "refs/tags/${{ env.PYPI_VERSION }}",
                        sha: "${{ github.sha }}"
                      })
