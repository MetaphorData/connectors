---
name: CD

env:
  PYTHON_VERSION: 3.7
  POETRY_VERSION: 1.1.12
  NODE_VERSION: 14
  DOCKER_IMAGE: metaphordata/connectors

# Run this build workflow after a new PR is merged
on:
  push:
    branches: [main]

  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Publish to PyPI
        run: >
          poetry publish --build
          -u ${{ secrets.PYPI_USERNAME }}
          -p ${{ secrets.PYPI_PASSWORD }}
          2>&1 | tee ${{ runner.temp }}/logs
          || grep -qiE 'File already exists' ${{ runner.temp }}/logs

      # Tag release
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm install toml

      - id: get-version
        name: Get version
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');

            const logs = fs.readFileSync('${{ runner.temp }}/logs').toString('utf8');
            if (logs.search(/File already exists/ig) >= 0) {
              core.notice('No new version was published to PyPI.');
              process.exit(0);
            }

            const toml = require('toml');
            const pyproject = toml.parse(fs.readFileSync('pyproject.toml')); 
            core.setOutput('version', pyproject.tool.poetry.version);

      - name: Create tag
        if: ${{ steps.get-version.outputs.version }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ github.token }}
          script: |
            const version = '${{ steps.get-version.outputs.version }}';
            core.notice(`Tagging ${{ github.sha }} as ${version}`);

            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${ version }`
              });
            } catch (err) {}

            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${ version }`,
              sha: "${{ github.sha }}"
            })

  docker:
    name: Publish to Docker
    runs-on: ubuntu-latest
    needs:
      - pypi
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
